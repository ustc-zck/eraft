// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_5fcmdpb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_5fcmdpb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
#include "errorpb.pb.h"
#include "eraftpb.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_5fcmdpb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_5fcmdpb_2eproto;
namespace raft_cmdpb {
class AdminRequest;
class AdminRequestDefaultTypeInternal;
extern AdminRequestDefaultTypeInternal _AdminRequest_default_instance_;
class AdminResponse;
class AdminResponseDefaultTypeInternal;
extern AdminResponseDefaultTypeInternal _AdminResponse_default_instance_;
class ChangePeerRequest;
class ChangePeerRequestDefaultTypeInternal;
extern ChangePeerRequestDefaultTypeInternal _ChangePeerRequest_default_instance_;
class ChangePeerResponse;
class ChangePeerResponseDefaultTypeInternal;
extern ChangePeerResponseDefaultTypeInternal _ChangePeerResponse_default_instance_;
class CompactLogRequest;
class CompactLogRequestDefaultTypeInternal;
extern CompactLogRequestDefaultTypeInternal _CompactLogRequest_default_instance_;
class CompactLogResponse;
class CompactLogResponseDefaultTypeInternal;
extern CompactLogResponseDefaultTypeInternal _CompactLogResponse_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
class DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class RaftCmdRequest;
class RaftCmdRequestDefaultTypeInternal;
extern RaftCmdRequestDefaultTypeInternal _RaftCmdRequest_default_instance_;
class RaftCmdResponse;
class RaftCmdResponseDefaultTypeInternal;
extern RaftCmdResponseDefaultTypeInternal _RaftCmdResponse_default_instance_;
class RaftRequestHeader;
class RaftRequestHeaderDefaultTypeInternal;
extern RaftRequestHeaderDefaultTypeInternal _RaftRequestHeader_default_instance_;
class RaftResponseHeader;
class RaftResponseHeaderDefaultTypeInternal;
extern RaftResponseHeaderDefaultTypeInternal _RaftResponseHeader_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SnapRequest;
class SnapRequestDefaultTypeInternal;
extern SnapRequestDefaultTypeInternal _SnapRequest_default_instance_;
class SnapResponse;
class SnapResponseDefaultTypeInternal;
extern SnapResponseDefaultTypeInternal _SnapResponse_default_instance_;
class SplitRequest;
class SplitRequestDefaultTypeInternal;
extern SplitRequestDefaultTypeInternal _SplitRequest_default_instance_;
class SplitResponse;
class SplitResponseDefaultTypeInternal;
extern SplitResponseDefaultTypeInternal _SplitResponse_default_instance_;
class TransferLeaderRequest;
class TransferLeaderRequestDefaultTypeInternal;
extern TransferLeaderRequestDefaultTypeInternal _TransferLeaderRequest_default_instance_;
class TransferLeaderResponse;
class TransferLeaderResponseDefaultTypeInternal;
extern TransferLeaderResponseDefaultTypeInternal _TransferLeaderResponse_default_instance_;
}  // namespace raft_cmdpb
PROTOBUF_NAMESPACE_OPEN
template<> ::raft_cmdpb::AdminRequest* Arena::CreateMaybeMessage<::raft_cmdpb::AdminRequest>(Arena*);
template<> ::raft_cmdpb::AdminResponse* Arena::CreateMaybeMessage<::raft_cmdpb::AdminResponse>(Arena*);
template<> ::raft_cmdpb::ChangePeerRequest* Arena::CreateMaybeMessage<::raft_cmdpb::ChangePeerRequest>(Arena*);
template<> ::raft_cmdpb::ChangePeerResponse* Arena::CreateMaybeMessage<::raft_cmdpb::ChangePeerResponse>(Arena*);
template<> ::raft_cmdpb::CompactLogRequest* Arena::CreateMaybeMessage<::raft_cmdpb::CompactLogRequest>(Arena*);
template<> ::raft_cmdpb::CompactLogResponse* Arena::CreateMaybeMessage<::raft_cmdpb::CompactLogResponse>(Arena*);
template<> ::raft_cmdpb::DeleteRequest* Arena::CreateMaybeMessage<::raft_cmdpb::DeleteRequest>(Arena*);
template<> ::raft_cmdpb::DeleteResponse* Arena::CreateMaybeMessage<::raft_cmdpb::DeleteResponse>(Arena*);
template<> ::raft_cmdpb::GetRequest* Arena::CreateMaybeMessage<::raft_cmdpb::GetRequest>(Arena*);
template<> ::raft_cmdpb::GetResponse* Arena::CreateMaybeMessage<::raft_cmdpb::GetResponse>(Arena*);
template<> ::raft_cmdpb::PutRequest* Arena::CreateMaybeMessage<::raft_cmdpb::PutRequest>(Arena*);
template<> ::raft_cmdpb::PutResponse* Arena::CreateMaybeMessage<::raft_cmdpb::PutResponse>(Arena*);
template<> ::raft_cmdpb::RaftCmdRequest* Arena::CreateMaybeMessage<::raft_cmdpb::RaftCmdRequest>(Arena*);
template<> ::raft_cmdpb::RaftCmdResponse* Arena::CreateMaybeMessage<::raft_cmdpb::RaftCmdResponse>(Arena*);
template<> ::raft_cmdpb::RaftRequestHeader* Arena::CreateMaybeMessage<::raft_cmdpb::RaftRequestHeader>(Arena*);
template<> ::raft_cmdpb::RaftResponseHeader* Arena::CreateMaybeMessage<::raft_cmdpb::RaftResponseHeader>(Arena*);
template<> ::raft_cmdpb::Request* Arena::CreateMaybeMessage<::raft_cmdpb::Request>(Arena*);
template<> ::raft_cmdpb::Response* Arena::CreateMaybeMessage<::raft_cmdpb::Response>(Arena*);
template<> ::raft_cmdpb::SnapRequest* Arena::CreateMaybeMessage<::raft_cmdpb::SnapRequest>(Arena*);
template<> ::raft_cmdpb::SnapResponse* Arena::CreateMaybeMessage<::raft_cmdpb::SnapResponse>(Arena*);
template<> ::raft_cmdpb::SplitRequest* Arena::CreateMaybeMessage<::raft_cmdpb::SplitRequest>(Arena*);
template<> ::raft_cmdpb::SplitResponse* Arena::CreateMaybeMessage<::raft_cmdpb::SplitResponse>(Arena*);
template<> ::raft_cmdpb::TransferLeaderRequest* Arena::CreateMaybeMessage<::raft_cmdpb::TransferLeaderRequest>(Arena*);
template<> ::raft_cmdpb::TransferLeaderResponse* Arena::CreateMaybeMessage<::raft_cmdpb::TransferLeaderResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft_cmdpb {

enum CmdType : int {
  Invalid = 0,
  Get = 1,
  Put = 3,
  Delete = 4,
  Snap = 5,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdType_IsValid(int value);
constexpr CmdType CmdType_MIN = Invalid;
constexpr CmdType CmdType_MAX = Snap;
constexpr int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor();
template<typename T>
inline const std::string& CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdType_descriptor(), enum_t_value);
}
inline bool CmdType_Parse(
    const std::string& name, CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum AdminCmdType : int {
  InvalidAdmin = 0,
  ChangePeer = 1,
  CompactLog = 3,
  TransferLeader = 4,
  Split = 10,
  AdminCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AdminCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AdminCmdType_IsValid(int value);
constexpr AdminCmdType AdminCmdType_MIN = InvalidAdmin;
constexpr AdminCmdType AdminCmdType_MAX = Split;
constexpr int AdminCmdType_ARRAYSIZE = AdminCmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdminCmdType_descriptor();
template<typename T>
inline const std::string& AdminCmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdminCmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdminCmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdminCmdType_descriptor(), enum_t_value);
}
inline bool AdminCmdType_Parse(
    const std::string& name, AdminCmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdminCmdType>(
    AdminCmdType_descriptor(), name, value);
}
// ===================================================================

class GetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.GetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const std::string& cf() const;
  void set_cf(const std::string& value);
  void set_cf(std::string&& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  std::string* mutable_cf();
  std::string* release_cf();
  void set_allocated_cf(std::string* cf);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.GetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class GetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(nullptr);
  }

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.GetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.GetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class PutRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(nullptr);
  }

  PutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.PutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const std::string& cf() const;
  void set_cf(const std::string& value);
  void set_cf(std::string&& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  std::string* mutable_cf();
  std::string* release_cf();
  void set_allocated_cf(std::string* cf);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PutRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class PutResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PutResponse* other);
  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const final {
    return CreateMaybeMessage<PutResponse>(nullptr);
  }

  PutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.PutResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PutResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeleteRequest* other);
  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(nullptr);
  }

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.DeleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const std::string& cf() const;
  void set_cf(const std::string& value);
  void set_cf(std::string&& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  std::string* mutable_cf();
  std::string* release_cf();
  void set_allocated_cf(std::string* cf);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.DeleteRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class DeleteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.DeleteResponse) */ {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteResponse* other);
  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const final {
    return CreateMaybeMessage<DeleteResponse>(nullptr);
  }

  DeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.DeleteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.DeleteResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class SnapRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SnapRequest) */ {
 public:
  SnapRequest();
  virtual ~SnapRequest();

  SnapRequest(const SnapRequest& from);
  SnapRequest(SnapRequest&& from) noexcept
    : SnapRequest() {
    *this = ::std::move(from);
  }

  inline SnapRequest& operator=(const SnapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapRequest& operator=(SnapRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapRequest* internal_default_instance() {
    return reinterpret_cast<const SnapRequest*>(
               &_SnapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SnapRequest* other);
  friend void swap(SnapRequest& a, SnapRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapRequest* New() const final {
    return CreateMaybeMessage<SnapRequest>(nullptr);
  }

  SnapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapRequest& from);
  void MergeFrom(const SnapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.SnapRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SnapRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class SnapResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SnapResponse) */ {
 public:
  SnapResponse();
  virtual ~SnapResponse();

  SnapResponse(const SnapResponse& from);
  SnapResponse(SnapResponse&& from) noexcept
    : SnapResponse() {
    *this = ::std::move(from);
  }

  inline SnapResponse& operator=(const SnapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapResponse& operator=(SnapResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapResponse* internal_default_instance() {
    return reinterpret_cast<const SnapResponse*>(
               &_SnapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SnapResponse* other);
  friend void swap(SnapResponse& a, SnapResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapResponse* New() const final {
    return CreateMaybeMessage<SnapResponse>(nullptr);
  }

  SnapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapResponse& from);
  void MergeFrom(const SnapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.SnapResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Region region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  const ::metapb::Region& region() const;
  ::metapb::Region* release_region();
  ::metapb::Region* mutable_region();
  void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SnapResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Region* region_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.GetRequest get = 2;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 2;
  const ::raft_cmdpb::GetRequest& get() const;
  ::raft_cmdpb::GetRequest* release_get();
  ::raft_cmdpb::GetRequest* mutable_get();
  void set_allocated_get(::raft_cmdpb::GetRequest* get);

  // .raft_cmdpb.PutRequest put = 4;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 4;
  const ::raft_cmdpb::PutRequest& put() const;
  ::raft_cmdpb::PutRequest* release_put();
  ::raft_cmdpb::PutRequest* mutable_put();
  void set_allocated_put(::raft_cmdpb::PutRequest* put);

  // .raft_cmdpb.DeleteRequest delete = 5;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  const ::raft_cmdpb::DeleteRequest& delete_() const;
  ::raft_cmdpb::DeleteRequest* release_delete_();
  ::raft_cmdpb::DeleteRequest* mutable_delete_();
  void set_allocated_delete_(::raft_cmdpb::DeleteRequest* delete_);

  // .raft_cmdpb.SnapRequest snap = 6;
  bool has_snap() const;
  void clear_snap();
  static const int kSnapFieldNumber = 6;
  const ::raft_cmdpb::SnapRequest& snap() const;
  ::raft_cmdpb::SnapRequest* release_snap();
  ::raft_cmdpb::SnapRequest* mutable_snap();
  void set_allocated_snap(::raft_cmdpb::SnapRequest* snap);

  // .raft_cmdpb.CmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::CmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::CmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.Request)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::GetRequest* get_;
  ::raft_cmdpb::PutRequest* put_;
  ::raft_cmdpb::DeleteRequest* delete__;
  ::raft_cmdpb::SnapRequest* snap_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.GetResponse get = 2;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 2;
  const ::raft_cmdpb::GetResponse& get() const;
  ::raft_cmdpb::GetResponse* release_get();
  ::raft_cmdpb::GetResponse* mutable_get();
  void set_allocated_get(::raft_cmdpb::GetResponse* get);

  // .raft_cmdpb.PutResponse put = 4;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 4;
  const ::raft_cmdpb::PutResponse& put() const;
  ::raft_cmdpb::PutResponse* release_put();
  ::raft_cmdpb::PutResponse* mutable_put();
  void set_allocated_put(::raft_cmdpb::PutResponse* put);

  // .raft_cmdpb.DeleteResponse delete = 5;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  const ::raft_cmdpb::DeleteResponse& delete_() const;
  ::raft_cmdpb::DeleteResponse* release_delete_();
  ::raft_cmdpb::DeleteResponse* mutable_delete_();
  void set_allocated_delete_(::raft_cmdpb::DeleteResponse* delete_);

  // .raft_cmdpb.SnapResponse snap = 6;
  bool has_snap() const;
  void clear_snap();
  static const int kSnapFieldNumber = 6;
  const ::raft_cmdpb::SnapResponse& snap() const;
  ::raft_cmdpb::SnapResponse* release_snap();
  ::raft_cmdpb::SnapResponse* mutable_snap();
  void set_allocated_snap(::raft_cmdpb::SnapResponse* snap);

  // .raft_cmdpb.CmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::CmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::CmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.Response)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::GetResponse* get_;
  ::raft_cmdpb::PutResponse* put_;
  ::raft_cmdpb::DeleteResponse* delete__;
  ::raft_cmdpb::SnapResponse* snap_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class ChangePeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.ChangePeerRequest) */ {
 public:
  ChangePeerRequest();
  virtual ~ChangePeerRequest();

  ChangePeerRequest(const ChangePeerRequest& from);
  ChangePeerRequest(ChangePeerRequest&& from) noexcept
    : ChangePeerRequest() {
    *this = ::std::move(from);
  }

  inline ChangePeerRequest& operator=(const ChangePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePeerRequest& operator=(ChangePeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePeerRequest* internal_default_instance() {
    return reinterpret_cast<const ChangePeerRequest*>(
               &_ChangePeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ChangePeerRequest* other);
  friend void swap(ChangePeerRequest& a, ChangePeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangePeerRequest* New() const final {
    return CreateMaybeMessage<ChangePeerRequest>(nullptr);
  }

  ChangePeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePeerRequest& from);
  void MergeFrom(const ChangePeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.ChangePeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* release_peer();
  ::metapb::Peer* mutable_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // .eraftpb.ConfChangeType change_type = 1;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  ::eraftpb::ConfChangeType change_type() const;
  void set_change_type(::eraftpb::ConfChangeType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.ChangePeerRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* peer_;
  int change_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class ChangePeerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.ChangePeerResponse) */ {
 public:
  ChangePeerResponse();
  virtual ~ChangePeerResponse();

  ChangePeerResponse(const ChangePeerResponse& from);
  ChangePeerResponse(ChangePeerResponse&& from) noexcept
    : ChangePeerResponse() {
    *this = ::std::move(from);
  }

  inline ChangePeerResponse& operator=(const ChangePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePeerResponse& operator=(ChangePeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePeerResponse* internal_default_instance() {
    return reinterpret_cast<const ChangePeerResponse*>(
               &_ChangePeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ChangePeerResponse* other);
  friend void swap(ChangePeerResponse& a, ChangePeerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangePeerResponse* New() const final {
    return CreateMaybeMessage<ChangePeerResponse>(nullptr);
  }

  ChangePeerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePeerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePeerResponse& from);
  void MergeFrom(const ChangePeerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePeerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.ChangePeerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Region region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  const ::metapb::Region& region() const;
  ::metapb::Region* release_region();
  ::metapb::Region* mutable_region();
  void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.ChangePeerResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Region* region_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class SplitRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SplitRequest) */ {
 public:
  SplitRequest();
  virtual ~SplitRequest();

  SplitRequest(const SplitRequest& from);
  SplitRequest(SplitRequest&& from) noexcept
    : SplitRequest() {
    *this = ::std::move(from);
  }

  inline SplitRequest& operator=(const SplitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitRequest& operator=(SplitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitRequest* internal_default_instance() {
    return reinterpret_cast<const SplitRequest*>(
               &_SplitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SplitRequest* other);
  friend void swap(SplitRequest& a, SplitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplitRequest* New() const final {
    return CreateMaybeMessage<SplitRequest>(nullptr);
  }

  SplitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitRequest& from);
  void MergeFrom(const SplitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.SplitRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 new_peer_ids = 3;
  int new_peer_ids_size() const;
  void clear_new_peer_ids();
  static const int kNewPeerIdsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_peer_ids(int index) const;
  void set_new_peer_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_new_peer_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      new_peer_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_new_peer_ids();

  // bytes split_key = 1;
  void clear_split_key();
  static const int kSplitKeyFieldNumber = 1;
  const std::string& split_key() const;
  void set_split_key(const std::string& value);
  void set_split_key(std::string&& value);
  void set_split_key(const char* value);
  void set_split_key(const void* value, size_t size);
  std::string* mutable_split_key();
  std::string* release_split_key();
  void set_allocated_split_key(std::string* split_key);

  // uint64 new_region_id = 2;
  void clear_new_region_id();
  static const int kNewRegionIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_region_id() const;
  void set_new_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SplitRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > new_peer_ids_;
  mutable std::atomic<int> _new_peer_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr split_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_region_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class SplitResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SplitResponse) */ {
 public:
  SplitResponse();
  virtual ~SplitResponse();

  SplitResponse(const SplitResponse& from);
  SplitResponse(SplitResponse&& from) noexcept
    : SplitResponse() {
    *this = ::std::move(from);
  }

  inline SplitResponse& operator=(const SplitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitResponse& operator=(SplitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitResponse* internal_default_instance() {
    return reinterpret_cast<const SplitResponse*>(
               &_SplitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SplitResponse* other);
  friend void swap(SplitResponse& a, SplitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplitResponse* New() const final {
    return CreateMaybeMessage<SplitResponse>(nullptr);
  }

  SplitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitResponse& from);
  void MergeFrom(const SplitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.SplitResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metapb.Region regions = 1;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 1;
  ::metapb::Region* mutable_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metapb::Region >*
      mutable_regions();
  const ::metapb::Region& regions(int index) const;
  ::metapb::Region* add_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metapb::Region >&
      regions() const;

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SplitResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metapb::Region > regions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class CompactLogRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.CompactLogRequest) */ {
 public:
  CompactLogRequest();
  virtual ~CompactLogRequest();

  CompactLogRequest(const CompactLogRequest& from);
  CompactLogRequest(CompactLogRequest&& from) noexcept
    : CompactLogRequest() {
    *this = ::std::move(from);
  }

  inline CompactLogRequest& operator=(const CompactLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactLogRequest& operator=(CompactLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompactLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactLogRequest* internal_default_instance() {
    return reinterpret_cast<const CompactLogRequest*>(
               &_CompactLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(CompactLogRequest* other);
  friend void swap(CompactLogRequest& a, CompactLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompactLogRequest* New() const final {
    return CreateMaybeMessage<CompactLogRequest>(nullptr);
  }

  CompactLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompactLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompactLogRequest& from);
  void MergeFrom(const CompactLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.CompactLogRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 compact_index = 1;
  void clear_compact_index();
  static const int kCompactIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 compact_index() const;
  void set_compact_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 compact_term = 2;
  void clear_compact_term();
  static const int kCompactTermFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 compact_term() const;
  void set_compact_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.CompactLogRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 compact_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 compact_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class CompactLogResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.CompactLogResponse) */ {
 public:
  CompactLogResponse();
  virtual ~CompactLogResponse();

  CompactLogResponse(const CompactLogResponse& from);
  CompactLogResponse(CompactLogResponse&& from) noexcept
    : CompactLogResponse() {
    *this = ::std::move(from);
  }

  inline CompactLogResponse& operator=(const CompactLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactLogResponse& operator=(CompactLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompactLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactLogResponse* internal_default_instance() {
    return reinterpret_cast<const CompactLogResponse*>(
               &_CompactLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CompactLogResponse* other);
  friend void swap(CompactLogResponse& a, CompactLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompactLogResponse* New() const final {
    return CreateMaybeMessage<CompactLogResponse>(nullptr);
  }

  CompactLogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompactLogResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompactLogResponse& from);
  void MergeFrom(const CompactLogResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactLogResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.CompactLogResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.CompactLogResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class TransferLeaderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.TransferLeaderRequest) */ {
 public:
  TransferLeaderRequest();
  virtual ~TransferLeaderRequest();

  TransferLeaderRequest(const TransferLeaderRequest& from);
  TransferLeaderRequest(TransferLeaderRequest&& from) noexcept
    : TransferLeaderRequest() {
    *this = ::std::move(from);
  }

  inline TransferLeaderRequest& operator=(const TransferLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferLeaderRequest& operator=(TransferLeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferLeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferLeaderRequest* internal_default_instance() {
    return reinterpret_cast<const TransferLeaderRequest*>(
               &_TransferLeaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TransferLeaderRequest* other);
  friend void swap(TransferLeaderRequest& a, TransferLeaderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferLeaderRequest* New() const final {
    return CreateMaybeMessage<TransferLeaderRequest>(nullptr);
  }

  TransferLeaderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferLeaderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferLeaderRequest& from);
  void MergeFrom(const TransferLeaderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferLeaderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.TransferLeaderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* release_peer();
  ::metapb::Peer* mutable_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.TransferLeaderRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* peer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class TransferLeaderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.TransferLeaderResponse) */ {
 public:
  TransferLeaderResponse();
  virtual ~TransferLeaderResponse();

  TransferLeaderResponse(const TransferLeaderResponse& from);
  TransferLeaderResponse(TransferLeaderResponse&& from) noexcept
    : TransferLeaderResponse() {
    *this = ::std::move(from);
  }

  inline TransferLeaderResponse& operator=(const TransferLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferLeaderResponse& operator=(TransferLeaderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferLeaderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferLeaderResponse* internal_default_instance() {
    return reinterpret_cast<const TransferLeaderResponse*>(
               &_TransferLeaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(TransferLeaderResponse* other);
  friend void swap(TransferLeaderResponse& a, TransferLeaderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferLeaderResponse* New() const final {
    return CreateMaybeMessage<TransferLeaderResponse>(nullptr);
  }

  TransferLeaderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferLeaderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferLeaderResponse& from);
  void MergeFrom(const TransferLeaderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferLeaderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.TransferLeaderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.TransferLeaderResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class AdminRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.AdminRequest) */ {
 public:
  AdminRequest();
  virtual ~AdminRequest();

  AdminRequest(const AdminRequest& from);
  AdminRequest(AdminRequest&& from) noexcept
    : AdminRequest() {
    *this = ::std::move(from);
  }

  inline AdminRequest& operator=(const AdminRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminRequest& operator=(AdminRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdminRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminRequest* internal_default_instance() {
    return reinterpret_cast<const AdminRequest*>(
               &_AdminRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(AdminRequest* other);
  friend void swap(AdminRequest& a, AdminRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminRequest* New() const final {
    return CreateMaybeMessage<AdminRequest>(nullptr);
  }

  AdminRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdminRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdminRequest& from);
  void MergeFrom(const AdminRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.AdminRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.ChangePeerRequest change_peer = 2;
  bool has_change_peer() const;
  void clear_change_peer();
  static const int kChangePeerFieldNumber = 2;
  const ::raft_cmdpb::ChangePeerRequest& change_peer() const;
  ::raft_cmdpb::ChangePeerRequest* release_change_peer();
  ::raft_cmdpb::ChangePeerRequest* mutable_change_peer();
  void set_allocated_change_peer(::raft_cmdpb::ChangePeerRequest* change_peer);

  // .raft_cmdpb.CompactLogRequest compact_log = 4;
  bool has_compact_log() const;
  void clear_compact_log();
  static const int kCompactLogFieldNumber = 4;
  const ::raft_cmdpb::CompactLogRequest& compact_log() const;
  ::raft_cmdpb::CompactLogRequest* release_compact_log();
  ::raft_cmdpb::CompactLogRequest* mutable_compact_log();
  void set_allocated_compact_log(::raft_cmdpb::CompactLogRequest* compact_log);

  // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  bool has_transfer_leader() const;
  void clear_transfer_leader();
  static const int kTransferLeaderFieldNumber = 5;
  const ::raft_cmdpb::TransferLeaderRequest& transfer_leader() const;
  ::raft_cmdpb::TransferLeaderRequest* release_transfer_leader();
  ::raft_cmdpb::TransferLeaderRequest* mutable_transfer_leader();
  void set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderRequest* transfer_leader);

  // .raft_cmdpb.SplitRequest split = 10;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 10;
  const ::raft_cmdpb::SplitRequest& split() const;
  ::raft_cmdpb::SplitRequest* release_split();
  ::raft_cmdpb::SplitRequest* mutable_split();
  void set_allocated_split(::raft_cmdpb::SplitRequest* split);

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::AdminCmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::AdminCmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.AdminRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::ChangePeerRequest* change_peer_;
  ::raft_cmdpb::CompactLogRequest* compact_log_;
  ::raft_cmdpb::TransferLeaderRequest* transfer_leader_;
  ::raft_cmdpb::SplitRequest* split_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class AdminResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.AdminResponse) */ {
 public:
  AdminResponse();
  virtual ~AdminResponse();

  AdminResponse(const AdminResponse& from);
  AdminResponse(AdminResponse&& from) noexcept
    : AdminResponse() {
    *this = ::std::move(from);
  }

  inline AdminResponse& operator=(const AdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminResponse& operator=(AdminResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdminResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminResponse* internal_default_instance() {
    return reinterpret_cast<const AdminResponse*>(
               &_AdminResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(AdminResponse* other);
  friend void swap(AdminResponse& a, AdminResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminResponse* New() const final {
    return CreateMaybeMessage<AdminResponse>(nullptr);
  }

  AdminResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdminResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdminResponse& from);
  void MergeFrom(const AdminResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.AdminResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.ChangePeerResponse change_peer = 2;
  bool has_change_peer() const;
  void clear_change_peer();
  static const int kChangePeerFieldNumber = 2;
  const ::raft_cmdpb::ChangePeerResponse& change_peer() const;
  ::raft_cmdpb::ChangePeerResponse* release_change_peer();
  ::raft_cmdpb::ChangePeerResponse* mutable_change_peer();
  void set_allocated_change_peer(::raft_cmdpb::ChangePeerResponse* change_peer);

  // .raft_cmdpb.CompactLogResponse compact_log = 4;
  bool has_compact_log() const;
  void clear_compact_log();
  static const int kCompactLogFieldNumber = 4;
  const ::raft_cmdpb::CompactLogResponse& compact_log() const;
  ::raft_cmdpb::CompactLogResponse* release_compact_log();
  ::raft_cmdpb::CompactLogResponse* mutable_compact_log();
  void set_allocated_compact_log(::raft_cmdpb::CompactLogResponse* compact_log);

  // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  bool has_transfer_leader() const;
  void clear_transfer_leader();
  static const int kTransferLeaderFieldNumber = 5;
  const ::raft_cmdpb::TransferLeaderResponse& transfer_leader() const;
  ::raft_cmdpb::TransferLeaderResponse* release_transfer_leader();
  ::raft_cmdpb::TransferLeaderResponse* mutable_transfer_leader();
  void set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderResponse* transfer_leader);

  // .raft_cmdpb.SplitResponse split = 10;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 10;
  const ::raft_cmdpb::SplitResponse& split() const;
  ::raft_cmdpb::SplitResponse* release_split();
  ::raft_cmdpb::SplitResponse* mutable_split();
  void set_allocated_split(::raft_cmdpb::SplitResponse* split);

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::AdminCmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::AdminCmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.AdminResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::ChangePeerResponse* change_peer_;
  ::raft_cmdpb::CompactLogResponse* compact_log_;
  ::raft_cmdpb::TransferLeaderResponse* transfer_leader_;
  ::raft_cmdpb::SplitResponse* split_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class RaftRequestHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RaftRequestHeader) */ {
 public:
  RaftRequestHeader();
  virtual ~RaftRequestHeader();

  RaftRequestHeader(const RaftRequestHeader& from);
  RaftRequestHeader(RaftRequestHeader&& from) noexcept
    : RaftRequestHeader() {
    *this = ::std::move(from);
  }

  inline RaftRequestHeader& operator=(const RaftRequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftRequestHeader& operator=(RaftRequestHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftRequestHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftRequestHeader* internal_default_instance() {
    return reinterpret_cast<const RaftRequestHeader*>(
               &_RaftRequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(RaftRequestHeader* other);
  friend void swap(RaftRequestHeader& a, RaftRequestHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftRequestHeader* New() const final {
    return CreateMaybeMessage<RaftRequestHeader>(nullptr);
  }

  RaftRequestHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftRequestHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftRequestHeader& from);
  void MergeFrom(const RaftRequestHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftRequestHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.RaftRequestHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* release_peer();
  ::metapb::Peer* mutable_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // .metapb.RegionEpoch region_epoch = 4;
  bool has_region_epoch() const;
  void clear_region_epoch();
  static const int kRegionEpochFieldNumber = 4;
  const ::metapb::RegionEpoch& region_epoch() const;
  ::metapb::RegionEpoch* release_region_epoch();
  ::metapb::RegionEpoch* mutable_region_epoch();
  void set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch);

  // uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 region_id() const;
  void set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 term = 5;
  void clear_term();
  static const int kTermFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftRequestHeader)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* peer_;
  ::metapb::RegionEpoch* region_epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 region_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class RaftResponseHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RaftResponseHeader) */ {
 public:
  RaftResponseHeader();
  virtual ~RaftResponseHeader();

  RaftResponseHeader(const RaftResponseHeader& from);
  RaftResponseHeader(RaftResponseHeader&& from) noexcept
    : RaftResponseHeader() {
    *this = ::std::move(from);
  }

  inline RaftResponseHeader& operator=(const RaftResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftResponseHeader& operator=(RaftResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftResponseHeader* internal_default_instance() {
    return reinterpret_cast<const RaftResponseHeader*>(
               &_RaftResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(RaftResponseHeader* other);
  friend void swap(RaftResponseHeader& a, RaftResponseHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftResponseHeader* New() const final {
    return CreateMaybeMessage<RaftResponseHeader>(nullptr);
  }

  RaftResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftResponseHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftResponseHeader& from);
  void MergeFrom(const RaftResponseHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftResponseHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.RaftResponseHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // .errorpb.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::errorpb::Error& error() const;
  ::errorpb::Error* release_error();
  ::errorpb::Error* mutable_error();
  void set_allocated_error(::errorpb::Error* error);

  // uint64 current_term = 3;
  void clear_current_term();
  static const int kCurrentTermFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_term() const;
  void set_current_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftResponseHeader)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::errorpb::Error* error_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class RaftCmdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RaftCmdRequest) */ {
 public:
  RaftCmdRequest();
  virtual ~RaftCmdRequest();

  RaftCmdRequest(const RaftCmdRequest& from);
  RaftCmdRequest(RaftCmdRequest&& from) noexcept
    : RaftCmdRequest() {
    *this = ::std::move(from);
  }

  inline RaftCmdRequest& operator=(const RaftCmdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftCmdRequest& operator=(RaftCmdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftCmdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftCmdRequest* internal_default_instance() {
    return reinterpret_cast<const RaftCmdRequest*>(
               &_RaftCmdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(RaftCmdRequest* other);
  friend void swap(RaftCmdRequest& a, RaftCmdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftCmdRequest* New() const final {
    return CreateMaybeMessage<RaftCmdRequest>(nullptr);
  }

  RaftCmdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftCmdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftCmdRequest& from);
  void MergeFrom(const RaftCmdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftCmdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.RaftCmdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft_cmdpb.Request requests = 2;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 2;
  ::raft_cmdpb::Request* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Request >*
      mutable_requests();
  const ::raft_cmdpb::Request& requests(int index) const;
  ::raft_cmdpb::Request* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Request >&
      requests() const;

  // .raft_cmdpb.RaftRequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::raft_cmdpb::RaftRequestHeader& header() const;
  ::raft_cmdpb::RaftRequestHeader* release_header();
  ::raft_cmdpb::RaftRequestHeader* mutable_header();
  void set_allocated_header(::raft_cmdpb::RaftRequestHeader* header);

  // .raft_cmdpb.AdminRequest admin_request = 3;
  bool has_admin_request() const;
  void clear_admin_request();
  static const int kAdminRequestFieldNumber = 3;
  const ::raft_cmdpb::AdminRequest& admin_request() const;
  ::raft_cmdpb::AdminRequest* release_admin_request();
  ::raft_cmdpb::AdminRequest* mutable_admin_request();
  void set_allocated_admin_request(::raft_cmdpb::AdminRequest* admin_request);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftCmdRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Request > requests_;
  ::raft_cmdpb::RaftRequestHeader* header_;
  ::raft_cmdpb::AdminRequest* admin_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// -------------------------------------------------------------------

class RaftCmdResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RaftCmdResponse) */ {
 public:
  RaftCmdResponse();
  virtual ~RaftCmdResponse();

  RaftCmdResponse(const RaftCmdResponse& from);
  RaftCmdResponse(RaftCmdResponse&& from) noexcept
    : RaftCmdResponse() {
    *this = ::std::move(from);
  }

  inline RaftCmdResponse& operator=(const RaftCmdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftCmdResponse& operator=(RaftCmdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftCmdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftCmdResponse* internal_default_instance() {
    return reinterpret_cast<const RaftCmdResponse*>(
               &_RaftCmdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(RaftCmdResponse* other);
  friend void swap(RaftCmdResponse& a, RaftCmdResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftCmdResponse* New() const final {
    return CreateMaybeMessage<RaftCmdResponse>(nullptr);
  }

  RaftCmdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftCmdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftCmdResponse& from);
  void MergeFrom(const RaftCmdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftCmdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_cmdpb.RaftCmdResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fcmdpb_2eproto);
    return ::descriptor_table_raft_5fcmdpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft_cmdpb.Response responses = 2;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 2;
  ::raft_cmdpb::Response* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Response >*
      mutable_responses();
  const ::raft_cmdpb::Response& responses(int index) const;
  ::raft_cmdpb::Response* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Response >&
      responses() const;

  // .raft_cmdpb.RaftResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::raft_cmdpb::RaftResponseHeader& header() const;
  ::raft_cmdpb::RaftResponseHeader* release_header();
  ::raft_cmdpb::RaftResponseHeader* mutable_header();
  void set_allocated_header(::raft_cmdpb::RaftResponseHeader* header);

  // .raft_cmdpb.AdminResponse admin_response = 3;
  bool has_admin_response() const;
  void clear_admin_response();
  static const int kAdminResponseFieldNumber = 3;
  const ::raft_cmdpb::AdminResponse& admin_response() const;
  ::raft_cmdpb::AdminResponse* release_admin_response();
  ::raft_cmdpb::AdminResponse* mutable_admin_response();
  void set_allocated_admin_response(::raft_cmdpb::AdminResponse* admin_response);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftCmdResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Response > responses_;
  ::raft_cmdpb::RaftResponseHeader* header_;
  ::raft_cmdpb::AdminResponse* admin_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fcmdpb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRequest

// string cf = 1;
inline void GetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.cf)
  return cf_.GetNoArena();
}
inline void GetRequest::set_cf(const std::string& value) {
  
  cf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.cf)
}
inline void GetRequest::set_cf(std::string&& value) {
  
  cf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.GetRequest.cf)
}
inline void GetRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetRequest.cf)
}
inline void GetRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetRequest.cf)
}
inline std::string* GetRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetRequest.cf)
  return cf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetRequest.cf)
  
  return cf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_cf(std::string* cf) {
  if (cf != nullptr) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetRequest.cf)
}

// bytes key = 2;
inline void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.key)
  return key_.GetNoArena();
}
inline void GetRequest::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.key)
}
inline void GetRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.GetRequest.key)
}
inline void GetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetRequest.key)
}
inline void GetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetRequest.key)
}
inline std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetRequest.key)
}

// -------------------------------------------------------------------

// GetResponse

// bytes value = 1;
inline void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetResponse.value)
  return value_.GetNoArena();
}
inline void GetResponse::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetResponse.value)
}
inline void GetResponse::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.GetResponse.value)
}
inline void GetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetResponse.value)
}
inline void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetResponse.value)
}
inline std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetResponse.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetResponse.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetResponse.value)
}

// -------------------------------------------------------------------

// PutRequest

// string cf = 1;
inline void PutRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PutRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.cf)
  return cf_.GetNoArena();
}
inline void PutRequest::set_cf(const std::string& value) {
  
  cf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.cf)
}
inline void PutRequest::set_cf(std::string&& value) {
  
  cf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.PutRequest.cf)
}
inline void PutRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.cf)
}
inline void PutRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.cf)
}
inline std::string* PutRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.cf)
  return cf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.cf)
  
  return cf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_cf(std::string* cf) {
  if (cf != nullptr) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.cf)
}

// bytes key = 2;
inline void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.key)
  return key_.GetNoArena();
}
inline void PutRequest::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.key)
}
inline void PutRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.PutRequest.key)
}
inline void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.key)
}
inline void PutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.key)
}
inline std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.key)
}

// bytes value = 3;
inline void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.value)
  return value_.GetNoArena();
}
inline void PutRequest::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.value)
}
inline void PutRequest::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.PutRequest.value)
}
inline void PutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.value)
}
inline std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.value)
}

// -------------------------------------------------------------------

// PutResponse

// -------------------------------------------------------------------

// DeleteRequest

// string cf = 1;
inline void DeleteRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.cf)
  return cf_.GetNoArena();
}
inline void DeleteRequest::set_cf(const std::string& value) {
  
  cf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.cf)
}
inline void DeleteRequest::set_cf(std::string&& value) {
  
  cf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.DeleteRequest.cf)
}
inline void DeleteRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRequest.cf)
}
inline void DeleteRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRequest.cf)
}
inline std::string* DeleteRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRequest.cf)
  return cf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRequest.cf)
  
  return cf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_cf(std::string* cf) {
  if (cf != nullptr) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRequest.cf)
}

// bytes key = 2;
inline void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.key)
  return key_.GetNoArena();
}
inline void DeleteRequest::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.key)
}
inline void DeleteRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.DeleteRequest.key)
}
inline void DeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRequest.key)
}
inline void DeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRequest.key)
}
inline std::string* DeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRequest.key)
}

// -------------------------------------------------------------------

// DeleteResponse

// -------------------------------------------------------------------

// SnapRequest

// -------------------------------------------------------------------

// SnapResponse

// .metapb.Region region = 1;
inline bool SnapResponse::has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline const ::metapb::Region& SnapResponse::region() const {
  const ::metapb::Region* p = region_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapResponse.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::metapb::Region*>(
      &::metapb::_Region_default_instance_);
}
inline ::metapb::Region* SnapResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::metapb::Region* SnapResponse::mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapResponse.region)
  return region_;
}
inline void SnapResponse::set_allocated_region(::metapb::Region* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapResponse.region)
}

// -------------------------------------------------------------------

// Request

// .raft_cmdpb.CmdType cmd_type = 1;
inline void Request::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::CmdType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
inline void Request::set_cmd_type(::raft_cmdpb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Request.cmd_type)
}

// .raft_cmdpb.GetRequest get = 2;
inline bool Request::has_get() const {
  return this != internal_default_instance() && get_ != nullptr;
}
inline void Request::clear_get() {
  if (GetArenaNoVirtual() == nullptr && get_ != nullptr) {
    delete get_;
  }
  get_ = nullptr;
}
inline const ::raft_cmdpb::GetRequest& Request::get() const {
  const ::raft_cmdpb::GetRequest* p = get_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.get)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::GetRequest*>(
      &::raft_cmdpb::_GetRequest_default_instance_);
}
inline ::raft_cmdpb::GetRequest* Request::release_get() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.get)
  
  ::raft_cmdpb::GetRequest* temp = get_;
  get_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::GetRequest* Request::mutable_get() {
  
  if (get_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::GetRequest>(GetArenaNoVirtual());
    get_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.get)
  return get_;
}
inline void Request::set_allocated_get(::raft_cmdpb::GetRequest* get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_;
  }
  if (get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    
  } else {
    
  }
  get_ = get;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.get)
}

// .raft_cmdpb.PutRequest put = 4;
inline bool Request::has_put() const {
  return this != internal_default_instance() && put_ != nullptr;
}
inline void Request::clear_put() {
  if (GetArenaNoVirtual() == nullptr && put_ != nullptr) {
    delete put_;
  }
  put_ = nullptr;
}
inline const ::raft_cmdpb::PutRequest& Request::put() const {
  const ::raft_cmdpb::PutRequest* p = put_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.put)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::PutRequest*>(
      &::raft_cmdpb::_PutRequest_default_instance_);
}
inline ::raft_cmdpb::PutRequest* Request::release_put() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.put)
  
  ::raft_cmdpb::PutRequest* temp = put_;
  put_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::PutRequest* Request::mutable_put() {
  
  if (put_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::PutRequest>(GetArenaNoVirtual());
    put_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.put)
  return put_;
}
inline void Request::set_allocated_put(::raft_cmdpb::PutRequest* put) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete put_;
  }
  if (put) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      put = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, put, submessage_arena);
    }
    
  } else {
    
  }
  put_ = put;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.put)
}

// .raft_cmdpb.DeleteRequest delete = 5;
inline bool Request::has_delete_() const {
  return this != internal_default_instance() && delete__ != nullptr;
}
inline void Request::clear_delete_() {
  if (GetArenaNoVirtual() == nullptr && delete__ != nullptr) {
    delete delete__;
  }
  delete__ = nullptr;
}
inline const ::raft_cmdpb::DeleteRequest& Request::delete_() const {
  const ::raft_cmdpb::DeleteRequest* p = delete__;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.delete)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::DeleteRequest*>(
      &::raft_cmdpb::_DeleteRequest_default_instance_);
}
inline ::raft_cmdpb::DeleteRequest* Request::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.delete)
  
  ::raft_cmdpb::DeleteRequest* temp = delete__;
  delete__ = nullptr;
  return temp;
}
inline ::raft_cmdpb::DeleteRequest* Request::mutable_delete_() {
  
  if (delete__ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::DeleteRequest>(GetArenaNoVirtual());
    delete__ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.delete)
  return delete__;
}
inline void Request::set_allocated_delete_(::raft_cmdpb::DeleteRequest* delete_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete delete__;
  }
  if (delete_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delete_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_, submessage_arena);
    }
    
  } else {
    
  }
  delete__ = delete_;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.delete)
}

// .raft_cmdpb.SnapRequest snap = 6;
inline bool Request::has_snap() const {
  return this != internal_default_instance() && snap_ != nullptr;
}
inline void Request::clear_snap() {
  if (GetArenaNoVirtual() == nullptr && snap_ != nullptr) {
    delete snap_;
  }
  snap_ = nullptr;
}
inline const ::raft_cmdpb::SnapRequest& Request::snap() const {
  const ::raft_cmdpb::SnapRequest* p = snap_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.snap)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::SnapRequest*>(
      &::raft_cmdpb::_SnapRequest_default_instance_);
}
inline ::raft_cmdpb::SnapRequest* Request::release_snap() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.snap)
  
  ::raft_cmdpb::SnapRequest* temp = snap_;
  snap_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::SnapRequest* Request::mutable_snap() {
  
  if (snap_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::SnapRequest>(GetArenaNoVirtual());
    snap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.snap)
  return snap_;
}
inline void Request::set_allocated_snap(::raft_cmdpb::SnapRequest* snap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete snap_;
  }
  if (snap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snap, submessage_arena);
    }
    
  } else {
    
  }
  snap_ = snap;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.snap)
}

// -------------------------------------------------------------------

// Response

// .raft_cmdpb.CmdType cmd_type = 1;
inline void Response::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::CmdType Response::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
inline void Response::set_cmd_type(::raft_cmdpb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Response.cmd_type)
}

// .raft_cmdpb.GetResponse get = 2;
inline bool Response::has_get() const {
  return this != internal_default_instance() && get_ != nullptr;
}
inline void Response::clear_get() {
  if (GetArenaNoVirtual() == nullptr && get_ != nullptr) {
    delete get_;
  }
  get_ = nullptr;
}
inline const ::raft_cmdpb::GetResponse& Response::get() const {
  const ::raft_cmdpb::GetResponse* p = get_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.get)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::GetResponse*>(
      &::raft_cmdpb::_GetResponse_default_instance_);
}
inline ::raft_cmdpb::GetResponse* Response::release_get() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.get)
  
  ::raft_cmdpb::GetResponse* temp = get_;
  get_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::GetResponse* Response::mutable_get() {
  
  if (get_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::GetResponse>(GetArenaNoVirtual());
    get_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.get)
  return get_;
}
inline void Response::set_allocated_get(::raft_cmdpb::GetResponse* get) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete get_;
  }
  if (get) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    
  } else {
    
  }
  get_ = get;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.get)
}

// .raft_cmdpb.PutResponse put = 4;
inline bool Response::has_put() const {
  return this != internal_default_instance() && put_ != nullptr;
}
inline void Response::clear_put() {
  if (GetArenaNoVirtual() == nullptr && put_ != nullptr) {
    delete put_;
  }
  put_ = nullptr;
}
inline const ::raft_cmdpb::PutResponse& Response::put() const {
  const ::raft_cmdpb::PutResponse* p = put_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.put)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::PutResponse*>(
      &::raft_cmdpb::_PutResponse_default_instance_);
}
inline ::raft_cmdpb::PutResponse* Response::release_put() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.put)
  
  ::raft_cmdpb::PutResponse* temp = put_;
  put_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::PutResponse* Response::mutable_put() {
  
  if (put_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::PutResponse>(GetArenaNoVirtual());
    put_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.put)
  return put_;
}
inline void Response::set_allocated_put(::raft_cmdpb::PutResponse* put) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete put_;
  }
  if (put) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      put = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, put, submessage_arena);
    }
    
  } else {
    
  }
  put_ = put;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.put)
}

// .raft_cmdpb.DeleteResponse delete = 5;
inline bool Response::has_delete_() const {
  return this != internal_default_instance() && delete__ != nullptr;
}
inline void Response::clear_delete_() {
  if (GetArenaNoVirtual() == nullptr && delete__ != nullptr) {
    delete delete__;
  }
  delete__ = nullptr;
}
inline const ::raft_cmdpb::DeleteResponse& Response::delete_() const {
  const ::raft_cmdpb::DeleteResponse* p = delete__;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.delete)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::DeleteResponse*>(
      &::raft_cmdpb::_DeleteResponse_default_instance_);
}
inline ::raft_cmdpb::DeleteResponse* Response::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.delete)
  
  ::raft_cmdpb::DeleteResponse* temp = delete__;
  delete__ = nullptr;
  return temp;
}
inline ::raft_cmdpb::DeleteResponse* Response::mutable_delete_() {
  
  if (delete__ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::DeleteResponse>(GetArenaNoVirtual());
    delete__ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.delete)
  return delete__;
}
inline void Response::set_allocated_delete_(::raft_cmdpb::DeleteResponse* delete_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete delete__;
  }
  if (delete_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delete_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_, submessage_arena);
    }
    
  } else {
    
  }
  delete__ = delete_;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.delete)
}

// .raft_cmdpb.SnapResponse snap = 6;
inline bool Response::has_snap() const {
  return this != internal_default_instance() && snap_ != nullptr;
}
inline void Response::clear_snap() {
  if (GetArenaNoVirtual() == nullptr && snap_ != nullptr) {
    delete snap_;
  }
  snap_ = nullptr;
}
inline const ::raft_cmdpb::SnapResponse& Response::snap() const {
  const ::raft_cmdpb::SnapResponse* p = snap_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.snap)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::SnapResponse*>(
      &::raft_cmdpb::_SnapResponse_default_instance_);
}
inline ::raft_cmdpb::SnapResponse* Response::release_snap() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.snap)
  
  ::raft_cmdpb::SnapResponse* temp = snap_;
  snap_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::SnapResponse* Response::mutable_snap() {
  
  if (snap_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::SnapResponse>(GetArenaNoVirtual());
    snap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.snap)
  return snap_;
}
inline void Response::set_allocated_snap(::raft_cmdpb::SnapResponse* snap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete snap_;
  }
  if (snap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snap, submessage_arena);
    }
    
  } else {
    
  }
  snap_ = snap;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.snap)
}

// -------------------------------------------------------------------

// ChangePeerRequest

// .eraftpb.ConfChangeType change_type = 1;
inline void ChangePeerRequest::clear_change_type() {
  change_type_ = 0;
}
inline ::eraftpb::ConfChangeType ChangePeerRequest::change_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
inline void ChangePeerRequest::set_change_type(::eraftpb::ConfChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.ChangePeerRequest.change_type)
}

// .metapb.Peer peer = 2;
inline bool ChangePeerRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline const ::metapb::Peer& ChangePeerRequest::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.peer)
  return p != nullptr ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* ChangePeerRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.ChangePeerRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::metapb::Peer* ChangePeerRequest::mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerRequest.peer)
  return peer_;
}
inline void ChangePeerRequest::set_allocated_peer(::metapb::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerRequest.peer)
}

// -------------------------------------------------------------------

// ChangePeerResponse

// .metapb.Region region = 1;
inline bool ChangePeerResponse::has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline const ::metapb::Region& ChangePeerResponse::region() const {
  const ::metapb::Region* p = region_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerResponse.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::metapb::Region*>(
      &::metapb::_Region_default_instance_);
}
inline ::metapb::Region* ChangePeerResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.ChangePeerResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::metapb::Region* ChangePeerResponse::mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerResponse.region)
  return region_;
}
inline void ChangePeerResponse::set_allocated_region(::metapb::Region* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerResponse.region)
}

// -------------------------------------------------------------------

// SplitRequest

// bytes split_key = 1;
inline void SplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.split_key)
  return split_key_.GetNoArena();
}
inline void SplitRequest::set_split_key(const std::string& value) {
  
  split_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.split_key)
}
inline void SplitRequest::set_split_key(std::string&& value) {
  
  split_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.SplitRequest.split_key)
}
inline void SplitRequest::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  split_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SplitRequest.split_key)
}
inline void SplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SplitRequest.split_key)
}
inline std::string* SplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.split_key)
  return split_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SplitRequest::set_allocated_split_key(std::string* split_key) {
  if (split_key != nullptr) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.split_key)
}

// uint64 new_region_id = 2;
inline void SplitRequest::clear_new_region_id() {
  new_region_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SplitRequest::new_region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_region_id)
  return new_region_id_;
}
inline void SplitRequest::set_new_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_region_id)
}

// repeated uint64 new_peer_ids = 3;
inline int SplitRequest::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
inline void SplitRequest::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SplitRequest::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_.Get(index);
}
inline void SplitRequest::set_new_peer_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_peer_ids)
}
inline void SplitRequest::add_new_peer_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:raft_cmdpb.SplitRequest.new_peer_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
SplitRequest::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
SplitRequest::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return &new_peer_ids_;
}

// -------------------------------------------------------------------

// SplitResponse

// repeated .metapb.Region regions = 1;
inline int SplitResponse::regions_size() const {
  return regions_.size();
}
inline ::metapb::Region* SplitResponse::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitResponse.regions)
  return regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metapb::Region >*
SplitResponse::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.SplitResponse.regions)
  return &regions_;
}
inline const ::metapb::Region& SplitResponse::regions(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitResponse.regions)
  return regions_.Get(index);
}
inline ::metapb::Region* SplitResponse::add_regions() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.SplitResponse.regions)
  return regions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metapb::Region >&
SplitResponse::regions() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.SplitResponse.regions)
  return regions_;
}

// -------------------------------------------------------------------

// CompactLogRequest

// uint64 compact_index = 1;
inline void CompactLogRequest::clear_compact_index() {
  compact_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompactLogRequest::compact_index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompactLogRequest.compact_index)
  return compact_index_;
}
inline void CompactLogRequest::set_compact_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  compact_index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompactLogRequest.compact_index)
}

// uint64 compact_term = 2;
inline void CompactLogRequest::clear_compact_term() {
  compact_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CompactLogRequest::compact_term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompactLogRequest.compact_term)
  return compact_term_;
}
inline void CompactLogRequest::set_compact_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  compact_term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompactLogRequest.compact_term)
}

// -------------------------------------------------------------------

// CompactLogResponse

// -------------------------------------------------------------------

// TransferLeaderRequest

// .metapb.Peer peer = 1;
inline bool TransferLeaderRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline const ::metapb::Peer& TransferLeaderRequest::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.TransferLeaderRequest.peer)
  return p != nullptr ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* TransferLeaderRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.TransferLeaderRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::metapb::Peer* TransferLeaderRequest::mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.TransferLeaderRequest.peer)
  return peer_;
}
inline void TransferLeaderRequest::set_allocated_peer(::metapb::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.TransferLeaderRequest.peer)
}

// -------------------------------------------------------------------

// TransferLeaderResponse

// -------------------------------------------------------------------

// AdminRequest

// .raft_cmdpb.AdminCmdType cmd_type = 1;
inline void AdminRequest::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::AdminCmdType AdminRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
inline void AdminRequest::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminRequest.cmd_type)
}

// .raft_cmdpb.ChangePeerRequest change_peer = 2;
inline bool AdminRequest::has_change_peer() const {
  return this != internal_default_instance() && change_peer_ != nullptr;
}
inline void AdminRequest::clear_change_peer() {
  if (GetArenaNoVirtual() == nullptr && change_peer_ != nullptr) {
    delete change_peer_;
  }
  change_peer_ = nullptr;
}
inline const ::raft_cmdpb::ChangePeerRequest& AdminRequest::change_peer() const {
  const ::raft_cmdpb::ChangePeerRequest* p = change_peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.change_peer)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::ChangePeerRequest*>(
      &::raft_cmdpb::_ChangePeerRequest_default_instance_);
}
inline ::raft_cmdpb::ChangePeerRequest* AdminRequest::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.change_peer)
  
  ::raft_cmdpb::ChangePeerRequest* temp = change_peer_;
  change_peer_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::ChangePeerRequest* AdminRequest::mutable_change_peer() {
  
  if (change_peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::ChangePeerRequest>(GetArenaNoVirtual());
    change_peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.change_peer)
  return change_peer_;
}
inline void AdminRequest::set_allocated_change_peer(::raft_cmdpb::ChangePeerRequest* change_peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete change_peer_;
  }
  if (change_peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_peer, submessage_arena);
    }
    
  } else {
    
  }
  change_peer_ = change_peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.change_peer)
}

// .raft_cmdpb.CompactLogRequest compact_log = 4;
inline bool AdminRequest::has_compact_log() const {
  return this != internal_default_instance() && compact_log_ != nullptr;
}
inline void AdminRequest::clear_compact_log() {
  if (GetArenaNoVirtual() == nullptr && compact_log_ != nullptr) {
    delete compact_log_;
  }
  compact_log_ = nullptr;
}
inline const ::raft_cmdpb::CompactLogRequest& AdminRequest::compact_log() const {
  const ::raft_cmdpb::CompactLogRequest* p = compact_log_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.compact_log)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::CompactLogRequest*>(
      &::raft_cmdpb::_CompactLogRequest_default_instance_);
}
inline ::raft_cmdpb::CompactLogRequest* AdminRequest::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.compact_log)
  
  ::raft_cmdpb::CompactLogRequest* temp = compact_log_;
  compact_log_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::CompactLogRequest* AdminRequest::mutable_compact_log() {
  
  if (compact_log_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::CompactLogRequest>(GetArenaNoVirtual());
    compact_log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.compact_log)
  return compact_log_;
}
inline void AdminRequest::set_allocated_compact_log(::raft_cmdpb::CompactLogRequest* compact_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete compact_log_;
  }
  if (compact_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compact_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compact_log, submessage_arena);
    }
    
  } else {
    
  }
  compact_log_ = compact_log;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.compact_log)
}

// .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
inline bool AdminRequest::has_transfer_leader() const {
  return this != internal_default_instance() && transfer_leader_ != nullptr;
}
inline void AdminRequest::clear_transfer_leader() {
  if (GetArenaNoVirtual() == nullptr && transfer_leader_ != nullptr) {
    delete transfer_leader_;
  }
  transfer_leader_ = nullptr;
}
inline const ::raft_cmdpb::TransferLeaderRequest& AdminRequest::transfer_leader() const {
  const ::raft_cmdpb::TransferLeaderRequest* p = transfer_leader_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.transfer_leader)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::TransferLeaderRequest*>(
      &::raft_cmdpb::_TransferLeaderRequest_default_instance_);
}
inline ::raft_cmdpb::TransferLeaderRequest* AdminRequest::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.transfer_leader)
  
  ::raft_cmdpb::TransferLeaderRequest* temp = transfer_leader_;
  transfer_leader_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::TransferLeaderRequest* AdminRequest::mutable_transfer_leader() {
  
  if (transfer_leader_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::TransferLeaderRequest>(GetArenaNoVirtual());
    transfer_leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.transfer_leader)
  return transfer_leader_;
}
inline void AdminRequest::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderRequest* transfer_leader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transfer_leader_;
  }
  if (transfer_leader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transfer_leader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_leader, submessage_arena);
    }
    
  } else {
    
  }
  transfer_leader_ = transfer_leader;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.transfer_leader)
}

// .raft_cmdpb.SplitRequest split = 10;
inline bool AdminRequest::has_split() const {
  return this != internal_default_instance() && split_ != nullptr;
}
inline void AdminRequest::clear_split() {
  if (GetArenaNoVirtual() == nullptr && split_ != nullptr) {
    delete split_;
  }
  split_ = nullptr;
}
inline const ::raft_cmdpb::SplitRequest& AdminRequest::split() const {
  const ::raft_cmdpb::SplitRequest* p = split_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.split)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::SplitRequest*>(
      &::raft_cmdpb::_SplitRequest_default_instance_);
}
inline ::raft_cmdpb::SplitRequest* AdminRequest::release_split() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.split)
  
  ::raft_cmdpb::SplitRequest* temp = split_;
  split_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::SplitRequest* AdminRequest::mutable_split() {
  
  if (split_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::SplitRequest>(GetArenaNoVirtual());
    split_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.split)
  return split_;
}
inline void AdminRequest::set_allocated_split(::raft_cmdpb::SplitRequest* split) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete split_;
  }
  if (split) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      split = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, split, submessage_arena);
    }
    
  } else {
    
  }
  split_ = split;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.split)
}

// -------------------------------------------------------------------

// AdminResponse

// .raft_cmdpb.AdminCmdType cmd_type = 1;
inline void AdminResponse::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::AdminCmdType AdminResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
inline void AdminResponse::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminResponse.cmd_type)
}

// .raft_cmdpb.ChangePeerResponse change_peer = 2;
inline bool AdminResponse::has_change_peer() const {
  return this != internal_default_instance() && change_peer_ != nullptr;
}
inline void AdminResponse::clear_change_peer() {
  if (GetArenaNoVirtual() == nullptr && change_peer_ != nullptr) {
    delete change_peer_;
  }
  change_peer_ = nullptr;
}
inline const ::raft_cmdpb::ChangePeerResponse& AdminResponse::change_peer() const {
  const ::raft_cmdpb::ChangePeerResponse* p = change_peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.change_peer)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::ChangePeerResponse*>(
      &::raft_cmdpb::_ChangePeerResponse_default_instance_);
}
inline ::raft_cmdpb::ChangePeerResponse* AdminResponse::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.change_peer)
  
  ::raft_cmdpb::ChangePeerResponse* temp = change_peer_;
  change_peer_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::ChangePeerResponse* AdminResponse::mutable_change_peer() {
  
  if (change_peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::ChangePeerResponse>(GetArenaNoVirtual());
    change_peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.change_peer)
  return change_peer_;
}
inline void AdminResponse::set_allocated_change_peer(::raft_cmdpb::ChangePeerResponse* change_peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete change_peer_;
  }
  if (change_peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_peer, submessage_arena);
    }
    
  } else {
    
  }
  change_peer_ = change_peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.change_peer)
}

// .raft_cmdpb.CompactLogResponse compact_log = 4;
inline bool AdminResponse::has_compact_log() const {
  return this != internal_default_instance() && compact_log_ != nullptr;
}
inline void AdminResponse::clear_compact_log() {
  if (GetArenaNoVirtual() == nullptr && compact_log_ != nullptr) {
    delete compact_log_;
  }
  compact_log_ = nullptr;
}
inline const ::raft_cmdpb::CompactLogResponse& AdminResponse::compact_log() const {
  const ::raft_cmdpb::CompactLogResponse* p = compact_log_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.compact_log)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::CompactLogResponse*>(
      &::raft_cmdpb::_CompactLogResponse_default_instance_);
}
inline ::raft_cmdpb::CompactLogResponse* AdminResponse::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.compact_log)
  
  ::raft_cmdpb::CompactLogResponse* temp = compact_log_;
  compact_log_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::CompactLogResponse* AdminResponse::mutable_compact_log() {
  
  if (compact_log_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::CompactLogResponse>(GetArenaNoVirtual());
    compact_log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.compact_log)
  return compact_log_;
}
inline void AdminResponse::set_allocated_compact_log(::raft_cmdpb::CompactLogResponse* compact_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete compact_log_;
  }
  if (compact_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compact_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compact_log, submessage_arena);
    }
    
  } else {
    
  }
  compact_log_ = compact_log;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.compact_log)
}

// .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
inline bool AdminResponse::has_transfer_leader() const {
  return this != internal_default_instance() && transfer_leader_ != nullptr;
}
inline void AdminResponse::clear_transfer_leader() {
  if (GetArenaNoVirtual() == nullptr && transfer_leader_ != nullptr) {
    delete transfer_leader_;
  }
  transfer_leader_ = nullptr;
}
inline const ::raft_cmdpb::TransferLeaderResponse& AdminResponse::transfer_leader() const {
  const ::raft_cmdpb::TransferLeaderResponse* p = transfer_leader_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.transfer_leader)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::TransferLeaderResponse*>(
      &::raft_cmdpb::_TransferLeaderResponse_default_instance_);
}
inline ::raft_cmdpb::TransferLeaderResponse* AdminResponse::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.transfer_leader)
  
  ::raft_cmdpb::TransferLeaderResponse* temp = transfer_leader_;
  transfer_leader_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::TransferLeaderResponse* AdminResponse::mutable_transfer_leader() {
  
  if (transfer_leader_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::TransferLeaderResponse>(GetArenaNoVirtual());
    transfer_leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.transfer_leader)
  return transfer_leader_;
}
inline void AdminResponse::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderResponse* transfer_leader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transfer_leader_;
  }
  if (transfer_leader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transfer_leader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer_leader, submessage_arena);
    }
    
  } else {
    
  }
  transfer_leader_ = transfer_leader;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.transfer_leader)
}

// .raft_cmdpb.SplitResponse split = 10;
inline bool AdminResponse::has_split() const {
  return this != internal_default_instance() && split_ != nullptr;
}
inline void AdminResponse::clear_split() {
  if (GetArenaNoVirtual() == nullptr && split_ != nullptr) {
    delete split_;
  }
  split_ = nullptr;
}
inline const ::raft_cmdpb::SplitResponse& AdminResponse::split() const {
  const ::raft_cmdpb::SplitResponse* p = split_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.split)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::SplitResponse*>(
      &::raft_cmdpb::_SplitResponse_default_instance_);
}
inline ::raft_cmdpb::SplitResponse* AdminResponse::release_split() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.split)
  
  ::raft_cmdpb::SplitResponse* temp = split_;
  split_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::SplitResponse* AdminResponse::mutable_split() {
  
  if (split_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::SplitResponse>(GetArenaNoVirtual());
    split_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.split)
  return split_;
}
inline void AdminResponse::set_allocated_split(::raft_cmdpb::SplitResponse* split) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete split_;
  }
  if (split) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      split = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, split, submessage_arena);
    }
    
  } else {
    
  }
  split_ = split;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.split)
}

// -------------------------------------------------------------------

// RaftRequestHeader

// uint64 region_id = 1;
inline void RaftRequestHeader::clear_region_id() {
  region_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftRequestHeader::region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_id)
  return region_id_;
}
inline void RaftRequestHeader::set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.region_id)
}

// .metapb.Peer peer = 2;
inline bool RaftRequestHeader::has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline const ::metapb::Peer& RaftRequestHeader::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.peer)
  return p != nullptr ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* RaftRequestHeader::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::metapb::Peer* RaftRequestHeader::mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.peer)
  return peer_;
}
inline void RaftRequestHeader::set_allocated_peer(::metapb::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.peer)
}

// .metapb.RegionEpoch region_epoch = 4;
inline bool RaftRequestHeader::has_region_epoch() const {
  return this != internal_default_instance() && region_epoch_ != nullptr;
}
inline const ::metapb::RegionEpoch& RaftRequestHeader::region_epoch() const {
  const ::metapb::RegionEpoch* p = region_epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_epoch)
  return p != nullptr ? *p : *reinterpret_cast<const ::metapb::RegionEpoch*>(
      &::metapb::_RegionEpoch_default_instance_);
}
inline ::metapb::RegionEpoch* RaftRequestHeader::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = nullptr;
  return temp;
}
inline ::metapb::RegionEpoch* RaftRequestHeader::mutable_region_epoch() {
  
  if (region_epoch_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::RegionEpoch>(GetArenaNoVirtual());
    region_epoch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.region_epoch)
  return region_epoch_;
}
inline void RaftRequestHeader::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_epoch_);
  }
  if (region_epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region_epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_epoch, submessage_arena);
    }
    
  } else {
    
  }
  region_epoch_ = region_epoch;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.region_epoch)
}

// uint64 term = 5;
inline void RaftRequestHeader::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftRequestHeader::term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.term)
  return term_;
}
inline void RaftRequestHeader::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.term)
}

// -------------------------------------------------------------------

// RaftResponseHeader

// .errorpb.Error error = 1;
inline bool RaftResponseHeader::has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline const ::errorpb::Error& RaftResponseHeader::error() const {
  const ::errorpb::Error* p = error_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.error)
  return p != nullptr ? *p : *reinterpret_cast<const ::errorpb::Error*>(
      &::errorpb::_Error_default_instance_);
}
inline ::errorpb::Error* RaftResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftResponseHeader.error)
  
  ::errorpb::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* RaftResponseHeader::mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.error)
  return error_;
}
inline void RaftResponseHeader::set_allocated_error(::errorpb::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.error)
}

// bytes uuid = 2;
inline void RaftResponseHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RaftResponseHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.uuid)
  return uuid_.GetNoArena();
}
inline void RaftResponseHeader::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.uuid)
}
inline void RaftResponseHeader::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.RaftResponseHeader.uuid)
}
inline void RaftResponseHeader::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.RaftResponseHeader.uuid)
}
inline void RaftResponseHeader::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.RaftResponseHeader.uuid)
}
inline std::string* RaftResponseHeader::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RaftResponseHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftResponseHeader.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RaftResponseHeader::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.uuid)
}

// uint64 current_term = 3;
inline void RaftResponseHeader::clear_current_term() {
  current_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftResponseHeader::current_term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.current_term)
  return current_term_;
}
inline void RaftResponseHeader::set_current_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.current_term)
}

// -------------------------------------------------------------------

// RaftCmdRequest

// .raft_cmdpb.RaftRequestHeader header = 1;
inline bool RaftCmdRequest::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void RaftCmdRequest::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::raft_cmdpb::RaftRequestHeader& RaftCmdRequest::header() const {
  const ::raft_cmdpb::RaftRequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::RaftRequestHeader*>(
      &::raft_cmdpb::_RaftRequestHeader_default_instance_);
}
inline ::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::release_header() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.header)
  
  ::raft_cmdpb::RaftRequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RaftRequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.header)
  return header_;
}
inline void RaftCmdRequest::set_allocated_header(::raft_cmdpb::RaftRequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.header)
}

// repeated .raft_cmdpb.Request requests = 2;
inline int RaftCmdRequest::requests_size() const {
  return requests_.size();
}
inline void RaftCmdRequest::clear_requests() {
  requests_.Clear();
}
inline ::raft_cmdpb::Request* RaftCmdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Request >*
RaftCmdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdRequest.requests)
  return &requests_;
}
inline const ::raft_cmdpb::Request& RaftCmdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Get(index);
}
inline ::raft_cmdpb::Request* RaftCmdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Request >&
RaftCmdRequest::requests() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdRequest.requests)
  return requests_;
}

// .raft_cmdpb.AdminRequest admin_request = 3;
inline bool RaftCmdRequest::has_admin_request() const {
  return this != internal_default_instance() && admin_request_ != nullptr;
}
inline void RaftCmdRequest::clear_admin_request() {
  if (GetArenaNoVirtual() == nullptr && admin_request_ != nullptr) {
    delete admin_request_;
  }
  admin_request_ = nullptr;
}
inline const ::raft_cmdpb::AdminRequest& RaftCmdRequest::admin_request() const {
  const ::raft_cmdpb::AdminRequest* p = admin_request_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.admin_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::AdminRequest*>(
      &::raft_cmdpb::_AdminRequest_default_instance_);
}
inline ::raft_cmdpb::AdminRequest* RaftCmdRequest::release_admin_request() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.admin_request)
  
  ::raft_cmdpb::AdminRequest* temp = admin_request_;
  admin_request_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::AdminRequest* RaftCmdRequest::mutable_admin_request() {
  
  if (admin_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::AdminRequest>(GetArenaNoVirtual());
    admin_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.admin_request)
  return admin_request_;
}
inline void RaftCmdRequest::set_allocated_admin_request(::raft_cmdpb::AdminRequest* admin_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete admin_request_;
  }
  if (admin_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      admin_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admin_request, submessage_arena);
    }
    
  } else {
    
  }
  admin_request_ = admin_request;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.admin_request)
}

// -------------------------------------------------------------------

// RaftCmdResponse

// .raft_cmdpb.RaftResponseHeader header = 1;
inline bool RaftCmdResponse::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void RaftCmdResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::raft_cmdpb::RaftResponseHeader& RaftCmdResponse::header() const {
  const ::raft_cmdpb::RaftResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::RaftResponseHeader*>(
      &::raft_cmdpb::_RaftResponseHeader_default_instance_);
}
inline ::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::release_header() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.header)
  
  ::raft_cmdpb::RaftResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RaftResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.header)
  return header_;
}
inline void RaftCmdResponse::set_allocated_header(::raft_cmdpb::RaftResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.header)
}

// repeated .raft_cmdpb.Response responses = 2;
inline int RaftCmdResponse::responses_size() const {
  return responses_.size();
}
inline void RaftCmdResponse::clear_responses() {
  responses_.Clear();
}
inline ::raft_cmdpb::Response* RaftCmdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Response >*
RaftCmdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdResponse.responses)
  return &responses_;
}
inline const ::raft_cmdpb::Response& RaftCmdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Get(index);
}
inline ::raft_cmdpb::Response* RaftCmdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_cmdpb::Response >&
RaftCmdResponse::responses() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdResponse.responses)
  return responses_;
}

// .raft_cmdpb.AdminResponse admin_response = 3;
inline bool RaftCmdResponse::has_admin_response() const {
  return this != internal_default_instance() && admin_response_ != nullptr;
}
inline void RaftCmdResponse::clear_admin_response() {
  if (GetArenaNoVirtual() == nullptr && admin_response_ != nullptr) {
    delete admin_response_;
  }
  admin_response_ = nullptr;
}
inline const ::raft_cmdpb::AdminResponse& RaftCmdResponse::admin_response() const {
  const ::raft_cmdpb::AdminResponse* p = admin_response_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.admin_response)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_cmdpb::AdminResponse*>(
      &::raft_cmdpb::_AdminResponse_default_instance_);
}
inline ::raft_cmdpb::AdminResponse* RaftCmdResponse::release_admin_response() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.admin_response)
  
  ::raft_cmdpb::AdminResponse* temp = admin_response_;
  admin_response_ = nullptr;
  return temp;
}
inline ::raft_cmdpb::AdminResponse* RaftCmdResponse::mutable_admin_response() {
  
  if (admin_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::AdminResponse>(GetArenaNoVirtual());
    admin_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.admin_response)
  return admin_response_;
}
inline void RaftCmdResponse::set_allocated_admin_response(::raft_cmdpb::AdminResponse* admin_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete admin_response_;
  }
  if (admin_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      admin_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admin_response, submessage_arena);
    }
    
  } else {
    
  }
  admin_response_ = admin_response;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.admin_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_cmdpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raft_cmdpb::CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_cmdpb::CmdType>() {
  return ::raft_cmdpb::CmdType_descriptor();
}
template <> struct is_proto_enum< ::raft_cmdpb::AdminCmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_cmdpb::AdminCmdType>() {
  return ::raft_cmdpb::AdminCmdType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_5fcmdpb_2eproto
