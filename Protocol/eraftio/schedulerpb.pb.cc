// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schedulerpb.proto

#include "schedulerpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cluster_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Peer_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Region_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionEpoch_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Store_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangePeer_schedulerpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_schedulerpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Member_schedulerpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordPair_schedulerpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestHeader_schedulerpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseHeader_schedulerpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoreStats_schedulerpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeInterval_schedulerpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_schedulerpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schedulerpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferLeader_schedulerpb_2eproto;
namespace schedulerpb {
class RequestHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestHeader> _instance;
} _RequestHeader_default_instance_;
class ResponseHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseHeader> _instance;
} _ResponseHeader_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
class TsoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TsoRequest> _instance;
} _TsoRequest_default_instance_;
class TimestampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timestamp> _instance;
} _Timestamp_default_instance_;
class TsoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TsoResponse> _instance;
} _TsoResponse_default_instance_;
class BootstrapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BootstrapRequest> _instance;
} _BootstrapRequest_default_instance_;
class BootstrapResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BootstrapResponse> _instance;
} _BootstrapResponse_default_instance_;
class IsBootstrappedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsBootstrappedRequest> _instance;
} _IsBootstrappedRequest_default_instance_;
class IsBootstrappedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsBootstrappedResponse> _instance;
} _IsBootstrappedResponse_default_instance_;
class AllocIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocIDRequest> _instance;
} _AllocIDRequest_default_instance_;
class AllocIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocIDResponse> _instance;
} _AllocIDResponse_default_instance_;
class GetStoreRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStoreRequest> _instance;
} _GetStoreRequest_default_instance_;
class GetStoreResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStoreResponse> _instance;
} _GetStoreResponse_default_instance_;
class PutStoreRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutStoreRequest> _instance;
} _PutStoreRequest_default_instance_;
class PutStoreResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutStoreResponse> _instance;
} _PutStoreResponse_default_instance_;
class GetAllStoresRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllStoresRequest> _instance;
} _GetAllStoresRequest_default_instance_;
class GetAllStoresResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllStoresResponse> _instance;
} _GetAllStoresResponse_default_instance_;
class GetRegionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRegionRequest> _instance;
} _GetRegionRequest_default_instance_;
class GetRegionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRegionResponse> _instance;
} _GetRegionResponse_default_instance_;
class GetRegionByIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRegionByIDRequest> _instance;
} _GetRegionByIDRequest_default_instance_;
class ScanRegionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanRegionsRequest> _instance;
} _ScanRegionsRequest_default_instance_;
class ScanRegionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanRegionsResponse> _instance;
} _ScanRegionsResponse_default_instance_;
class GetClusterConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetClusterConfigRequest> _instance;
} _GetClusterConfigRequest_default_instance_;
class GetClusterConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetClusterConfigResponse> _instance;
} _GetClusterConfigResponse_default_instance_;
class PutClusterConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutClusterConfigRequest> _instance;
} _PutClusterConfigRequest_default_instance_;
class PutClusterConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutClusterConfigResponse> _instance;
} _PutClusterConfigResponse_default_instance_;
class MemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Member> _instance;
} _Member_default_instance_;
class GetMembersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMembersRequest> _instance;
} _GetMembersRequest_default_instance_;
class GetMembersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMembersResponse> _instance;
} _GetMembersResponse_default_instance_;
class RegionHeartbeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionHeartbeatRequest> _instance;
} _RegionHeartbeatRequest_default_instance_;
class ChangePeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangePeer> _instance;
} _ChangePeer_default_instance_;
class TransferLeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferLeader> _instance;
} _TransferLeader_default_instance_;
class RegionHeartbeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionHeartbeatResponse> _instance;
} _RegionHeartbeatResponse_default_instance_;
class AskSplitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AskSplitRequest> _instance;
} _AskSplitRequest_default_instance_;
class AskSplitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AskSplitResponse> _instance;
} _AskSplitResponse_default_instance_;
class ReportSplitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportSplitRequest> _instance;
} _ReportSplitRequest_default_instance_;
class ReportSplitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportSplitResponse> _instance;
} _ReportSplitResponse_default_instance_;
class SplitIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitID> _instance;
} _SplitID_default_instance_;
class TimeIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeInterval> _instance;
} _TimeInterval_default_instance_;
class RecordPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordPair> _instance;
} _RecordPair_default_instance_;
class StoreStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreStats> _instance;
} _StoreStats_default_instance_;
class StoreHeartbeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreHeartbeatRequest> _instance;
} _StoreHeartbeatRequest_default_instance_;
class StoreHeartbeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreHeartbeatResponse> _instance;
} _StoreHeartbeatResponse_default_instance_;
class ScatterRegionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScatterRegionRequest> _instance;
} _ScatterRegionRequest_default_instance_;
class ScatterRegionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScatterRegionResponse> _instance;
} _ScatterRegionResponse_default_instance_;
class GetGCSafePointRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGCSafePointRequest> _instance;
} _GetGCSafePointRequest_default_instance_;
class GetGCSafePointResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetGCSafePointResponse> _instance;
} _GetGCSafePointResponse_default_instance_;
class UpdateGCSafePointRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateGCSafePointRequest> _instance;
} _UpdateGCSafePointRequest_default_instance_;
class UpdateGCSafePointResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateGCSafePointResponse> _instance;
} _UpdateGCSafePointResponse_default_instance_;
class GetOperatorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOperatorRequest> _instance;
} _GetOperatorRequest_default_instance_;
class GetOperatorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOperatorResponse> _instance;
} _GetOperatorResponse_default_instance_;
}  // namespace schedulerpb
static void InitDefaultsscc_info_AllocIDRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_AllocIDRequest_default_instance_;
    new (ptr) ::schedulerpb::AllocIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::AllocIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllocIDRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AllocIDRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_AllocIDResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_AllocIDResponse_default_instance_;
    new (ptr) ::schedulerpb::AllocIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::AllocIDResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllocIDResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AllocIDResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_AskSplitRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_AskSplitRequest_default_instance_;
    new (ptr) ::schedulerpb::AskSplitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::AskSplitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AskSplitRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AskSplitRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsscc_info_AskSplitResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_AskSplitResponse_default_instance_;
    new (ptr) ::schedulerpb::AskSplitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::AskSplitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AskSplitResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AskSplitResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_BootstrapRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_BootstrapRequest_default_instance_;
    new (ptr) ::schedulerpb::BootstrapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::BootstrapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BootstrapRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BootstrapRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,
      &scc_info_Store_metapb_2eproto.base,}};

static void InitDefaultsscc_info_BootstrapResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_BootstrapResponse_default_instance_;
    new (ptr) ::schedulerpb::BootstrapResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::BootstrapResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BootstrapResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BootstrapResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_ChangePeer_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_ChangePeer_default_instance_;
    new (ptr) ::schedulerpb::ChangePeer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::ChangePeer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangePeer_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChangePeer_schedulerpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_Error_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_Error_default_instance_;
    new (ptr) ::schedulerpb::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::Error::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Error_schedulerpb_2eproto}, {}};

static void InitDefaultsscc_info_GetAllStoresRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetAllStoresRequest_default_instance_;
    new (ptr) ::schedulerpb::GetAllStoresRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetAllStoresRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAllStoresRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetAllStoresRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetAllStoresResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetAllStoresResponse_default_instance_;
    new (ptr) ::schedulerpb::GetAllStoresResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetAllStoresResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetAllStoresResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetAllStoresResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,
      &scc_info_Store_metapb_2eproto.base,}};

static void InitDefaultsscc_info_GetClusterConfigRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetClusterConfigRequest_default_instance_;
    new (ptr) ::schedulerpb::GetClusterConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetClusterConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetClusterConfigRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetClusterConfigRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetClusterConfigResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetClusterConfigResponse_default_instance_;
    new (ptr) ::schedulerpb::GetClusterConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetClusterConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetClusterConfigResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetClusterConfigResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,
      &scc_info_Cluster_metapb_2eproto.base,}};

static void InitDefaultsscc_info_GetGCSafePointRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetGCSafePointRequest_default_instance_;
    new (ptr) ::schedulerpb::GetGCSafePointRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetGCSafePointRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGCSafePointRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetGCSafePointRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetGCSafePointResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetGCSafePointResponse_default_instance_;
    new (ptr) ::schedulerpb::GetGCSafePointResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetGCSafePointResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetGCSafePointResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetGCSafePointResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetMembersRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetMembersRequest_default_instance_;
    new (ptr) ::schedulerpb::GetMembersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetMembersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMembersRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetMembersRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetMembersResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetMembersResponse_default_instance_;
    new (ptr) ::schedulerpb::GetMembersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetMembersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetMembersResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetMembersResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,
      &scc_info_Member_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetOperatorRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetOperatorRequest_default_instance_;
    new (ptr) ::schedulerpb::GetOperatorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetOperatorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOperatorRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetOperatorRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetOperatorResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetOperatorResponse_default_instance_;
    new (ptr) ::schedulerpb::GetOperatorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetOperatorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOperatorResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetOperatorResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetRegionByIDRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetRegionByIDRequest_default_instance_;
    new (ptr) ::schedulerpb::GetRegionByIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetRegionByIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRegionByIDRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetRegionByIDRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetRegionRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetRegionRequest_default_instance_;
    new (ptr) ::schedulerpb::GetRegionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetRegionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRegionRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetRegionRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetRegionResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetRegionResponse_default_instance_;
    new (ptr) ::schedulerpb::GetRegionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetRegionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetRegionResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GetRegionResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_GetStoreRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetStoreRequest_default_instance_;
    new (ptr) ::schedulerpb::GetStoreRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetStoreRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStoreRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetStoreRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_GetStoreResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_GetStoreResponse_default_instance_;
    new (ptr) ::schedulerpb::GetStoreResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::GetStoreResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetStoreResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GetStoreResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,
      &scc_info_Store_metapb_2eproto.base,
      &scc_info_StoreStats_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_IsBootstrappedRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_IsBootstrappedRequest_default_instance_;
    new (ptr) ::schedulerpb::IsBootstrappedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::IsBootstrappedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IsBootstrappedRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IsBootstrappedRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_IsBootstrappedResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_IsBootstrappedResponse_default_instance_;
    new (ptr) ::schedulerpb::IsBootstrappedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::IsBootstrappedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IsBootstrappedResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IsBootstrappedResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_Member_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_Member_default_instance_;
    new (ptr) ::schedulerpb::Member();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::Member::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Member_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Member_schedulerpb_2eproto}, {}};

static void InitDefaultsscc_info_PutClusterConfigRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_PutClusterConfigRequest_default_instance_;
    new (ptr) ::schedulerpb::PutClusterConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::PutClusterConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PutClusterConfigRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PutClusterConfigRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,
      &scc_info_Cluster_metapb_2eproto.base,}};

static void InitDefaultsscc_info_PutClusterConfigResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_PutClusterConfigResponse_default_instance_;
    new (ptr) ::schedulerpb::PutClusterConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::PutClusterConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutClusterConfigResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PutClusterConfigResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_PutStoreRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_PutStoreRequest_default_instance_;
    new (ptr) ::schedulerpb::PutStoreRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::PutStoreRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PutStoreRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PutStoreRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,
      &scc_info_Store_metapb_2eproto.base,}};

static void InitDefaultsscc_info_PutStoreResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_PutStoreResponse_default_instance_;
    new (ptr) ::schedulerpb::PutStoreResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::PutStoreResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PutStoreResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PutStoreResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_RecordPair_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_RecordPair_default_instance_;
    new (ptr) ::schedulerpb::RecordPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::RecordPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordPair_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RecordPair_schedulerpb_2eproto}, {}};

static void InitDefaultsscc_info_RegionHeartbeatRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_RegionHeartbeatRequest_default_instance_;
    new (ptr) ::schedulerpb::RegionHeartbeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::RegionHeartbeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RegionHeartbeatRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RegionHeartbeatRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_RegionHeartbeatResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_RegionHeartbeatResponse_default_instance_;
    new (ptr) ::schedulerpb::RegionHeartbeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::RegionHeartbeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RegionHeartbeatResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_RegionHeartbeatResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,
      &scc_info_ChangePeer_schedulerpb_2eproto.base,
      &scc_info_TransferLeader_schedulerpb_2eproto.base,
      &scc_info_RegionEpoch_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_ReportSplitRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_ReportSplitRequest_default_instance_;
    new (ptr) ::schedulerpb::ReportSplitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::ReportSplitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReportSplitRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ReportSplitRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsscc_info_ReportSplitResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_ReportSplitResponse_default_instance_;
    new (ptr) ::schedulerpb::ReportSplitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::ReportSplitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportSplitResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReportSplitResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_RequestHeader_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_RequestHeader_default_instance_;
    new (ptr) ::schedulerpb::RequestHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::RequestHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestHeader_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestHeader_schedulerpb_2eproto}, {}};

static void InitDefaultsscc_info_ResponseHeader_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_ResponseHeader_default_instance_;
    new (ptr) ::schedulerpb::ResponseHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::ResponseHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseHeader_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResponseHeader_schedulerpb_2eproto}, {
      &scc_info_Error_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_ScanRegionsRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_ScanRegionsRequest_default_instance_;
    new (ptr) ::schedulerpb::ScanRegionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::ScanRegionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanRegionsRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScanRegionsRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_ScanRegionsResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_ScanRegionsResponse_default_instance_;
    new (ptr) ::schedulerpb::ScanRegionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::ScanRegionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ScanRegionsResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ScanRegionsResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_ScatterRegionRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_ScatterRegionRequest_default_instance_;
    new (ptr) ::schedulerpb::ScatterRegionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::ScatterRegionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ScatterRegionRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ScatterRegionRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_ScatterRegionResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_ScatterRegionResponse_default_instance_;
    new (ptr) ::schedulerpb::ScatterRegionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::ScatterRegionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScatterRegionResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScatterRegionResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_SplitID_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_SplitID_default_instance_;
    new (ptr) ::schedulerpb::SplitID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::SplitID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitID_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SplitID_schedulerpb_2eproto}, {}};

static void InitDefaultsscc_info_StoreHeartbeatRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_StoreHeartbeatRequest_default_instance_;
    new (ptr) ::schedulerpb::StoreHeartbeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::StoreHeartbeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoreHeartbeatRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StoreHeartbeatRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,
      &scc_info_StoreStats_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_StoreHeartbeatResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_StoreHeartbeatResponse_default_instance_;
    new (ptr) ::schedulerpb::StoreHeartbeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::StoreHeartbeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StoreHeartbeatResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StoreHeartbeatResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_StoreStats_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_StoreStats_default_instance_;
    new (ptr) ::schedulerpb::StoreStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::StoreStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoreStats_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StoreStats_schedulerpb_2eproto}, {
      &scc_info_TimeInterval_schedulerpb_2eproto.base,
      &scc_info_RecordPair_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_TimeInterval_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_TimeInterval_default_instance_;
    new (ptr) ::schedulerpb::TimeInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::TimeInterval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeInterval_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TimeInterval_schedulerpb_2eproto}, {}};

static void InitDefaultsscc_info_Timestamp_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_Timestamp_default_instance_;
    new (ptr) ::schedulerpb::Timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::Timestamp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Timestamp_schedulerpb_2eproto}, {}};

static void InitDefaultsscc_info_TransferLeader_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_TransferLeader_default_instance_;
    new (ptr) ::schedulerpb::TransferLeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::TransferLeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferLeader_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransferLeader_schedulerpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_TsoRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_TsoRequest_default_instance_;
    new (ptr) ::schedulerpb::TsoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::TsoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TsoRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TsoRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_TsoResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_TsoResponse_default_instance_;
    new (ptr) ::schedulerpb::TsoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::TsoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TsoResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TsoResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,
      &scc_info_Timestamp_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_UpdateGCSafePointRequest_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_UpdateGCSafePointRequest_default_instance_;
    new (ptr) ::schedulerpb::UpdateGCSafePointRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::UpdateGCSafePointRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateGCSafePointRequest_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateGCSafePointRequest_schedulerpb_2eproto}, {
      &scc_info_RequestHeader_schedulerpb_2eproto.base,}};

static void InitDefaultsscc_info_UpdateGCSafePointResponse_schedulerpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schedulerpb::_UpdateGCSafePointResponse_default_instance_;
    new (ptr) ::schedulerpb::UpdateGCSafePointResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schedulerpb::UpdateGCSafePointResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateGCSafePointResponse_schedulerpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateGCSafePointResponse_schedulerpb_2eproto}, {
      &scc_info_ResponseHeader_schedulerpb_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_schedulerpb_2eproto[52];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_schedulerpb_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_schedulerpb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_schedulerpb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RequestHeader, cluster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ResponseHeader, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ResponseHeader, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Error, type_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Error, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TsoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TsoRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TsoRequest, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Timestamp, physical_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Timestamp, logical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TsoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TsoResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TsoResponse, count_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TsoResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::BootstrapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::BootstrapRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::BootstrapRequest, store_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::BootstrapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::BootstrapResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::IsBootstrappedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::IsBootstrappedRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::IsBootstrappedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::IsBootstrappedResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::IsBootstrappedResponse, bootstrapped_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AllocIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AllocIDRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AllocIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AllocIDResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AllocIDResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetStoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetStoreRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetStoreRequest, store_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetStoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetStoreResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetStoreResponse, store_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetStoreResponse, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutStoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutStoreRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutStoreRequest, store_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutStoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutStoreResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetAllStoresRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetAllStoresRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetAllStoresRequest, exclude_tombstone_stores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetAllStoresResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetAllStoresResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetAllStoresResponse, stores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionRequest, region_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionResponse, region_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionResponse, leader_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionResponse, slaves_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionByIDRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetRegionByIDRequest, region_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScanRegionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScanRegionsRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScanRegionsRequest, start_key_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScanRegionsRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScanRegionsRequest, end_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScanRegionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScanRegionsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScanRegionsResponse, regions_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScanRegionsResponse, leaders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetClusterConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetClusterConfigRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetClusterConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetClusterConfigResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetClusterConfigResponse, cluster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutClusterConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutClusterConfigRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutClusterConfigRequest, cluster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutClusterConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::PutClusterConfigResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Member, name_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Member, member_id_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Member, peer_urls_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Member, client_urls_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::Member, leader_priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetMembersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetMembersRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetMembersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetMembersResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetMembersResponse, members_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetMembersResponse, leader_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetMembersResponse, etcd_leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatRequest, region_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatRequest, leader_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatRequest, pending_peers_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatRequest, approximate_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ChangePeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ChangePeer, peer_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ChangePeer, change_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TransferLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TransferLeader, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatResponse, change_peer_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatResponse, transfer_leader_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatResponse, region_id_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatResponse, region_epoch_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RegionHeartbeatResponse, target_peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AskSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AskSplitRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AskSplitRequest, region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AskSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AskSplitResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AskSplitResponse, new_region_id_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::AskSplitResponse, new_peer_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ReportSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ReportSplitRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ReportSplitRequest, left_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ReportSplitRequest, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ReportSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ReportSplitResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::SplitID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::SplitID, new_region_id_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::SplitID, new_peer_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TimeInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TimeInterval, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::TimeInterval, end_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RecordPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RecordPair, key_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::RecordPair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, store_id_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, capacity_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, available_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, region_count_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, sending_snap_count_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, receiving_snap_count_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, start_time_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, applying_snap_count_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, is_busy_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, used_size_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, interval_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, cpu_usages_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, read_io_rates_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, write_io_rates_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreStats, op_latencies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreHeartbeatRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreHeartbeatRequest, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::StoreHeartbeatResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScatterRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScatterRegionRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScatterRegionRequest, region_id_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScatterRegionRequest, region_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScatterRegionRequest, leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScatterRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::ScatterRegionResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetGCSafePointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetGCSafePointRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetGCSafePointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetGCSafePointResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetGCSafePointResponse, safe_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::UpdateGCSafePointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::UpdateGCSafePointRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::UpdateGCSafePointRequest, safe_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::UpdateGCSafePointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::UpdateGCSafePointResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::UpdateGCSafePointResponse, new_safe_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetOperatorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetOperatorRequest, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetOperatorRequest, region_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetOperatorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetOperatorResponse, header_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetOperatorResponse, region_id_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetOperatorResponse, desc_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetOperatorResponse, status_),
  PROTOBUF_FIELD_OFFSET(::schedulerpb::GetOperatorResponse, kind_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::schedulerpb::RequestHeader)},
  { 6, -1, sizeof(::schedulerpb::ResponseHeader)},
  { 13, -1, sizeof(::schedulerpb::Error)},
  { 20, -1, sizeof(::schedulerpb::TsoRequest)},
  { 27, -1, sizeof(::schedulerpb::Timestamp)},
  { 34, -1, sizeof(::schedulerpb::TsoResponse)},
  { 42, -1, sizeof(::schedulerpb::BootstrapRequest)},
  { 49, -1, sizeof(::schedulerpb::BootstrapResponse)},
  { 55, -1, sizeof(::schedulerpb::IsBootstrappedRequest)},
  { 61, -1, sizeof(::schedulerpb::IsBootstrappedResponse)},
  { 68, -1, sizeof(::schedulerpb::AllocIDRequest)},
  { 74, -1, sizeof(::schedulerpb::AllocIDResponse)},
  { 81, -1, sizeof(::schedulerpb::GetStoreRequest)},
  { 88, -1, sizeof(::schedulerpb::GetStoreResponse)},
  { 96, -1, sizeof(::schedulerpb::PutStoreRequest)},
  { 103, -1, sizeof(::schedulerpb::PutStoreResponse)},
  { 109, -1, sizeof(::schedulerpb::GetAllStoresRequest)},
  { 116, -1, sizeof(::schedulerpb::GetAllStoresResponse)},
  { 123, -1, sizeof(::schedulerpb::GetRegionRequest)},
  { 130, -1, sizeof(::schedulerpb::GetRegionResponse)},
  { 139, -1, sizeof(::schedulerpb::GetRegionByIDRequest)},
  { 146, -1, sizeof(::schedulerpb::ScanRegionsRequest)},
  { 155, -1, sizeof(::schedulerpb::ScanRegionsResponse)},
  { 163, -1, sizeof(::schedulerpb::GetClusterConfigRequest)},
  { 169, -1, sizeof(::schedulerpb::GetClusterConfigResponse)},
  { 176, -1, sizeof(::schedulerpb::PutClusterConfigRequest)},
  { 183, -1, sizeof(::schedulerpb::PutClusterConfigResponse)},
  { 189, -1, sizeof(::schedulerpb::Member)},
  { 199, -1, sizeof(::schedulerpb::GetMembersRequest)},
  { 205, -1, sizeof(::schedulerpb::GetMembersResponse)},
  { 214, -1, sizeof(::schedulerpb::RegionHeartbeatRequest)},
  { 224, -1, sizeof(::schedulerpb::ChangePeer)},
  { 231, -1, sizeof(::schedulerpb::TransferLeader)},
  { 237, -1, sizeof(::schedulerpb::RegionHeartbeatResponse)},
  { 248, -1, sizeof(::schedulerpb::AskSplitRequest)},
  { 255, -1, sizeof(::schedulerpb::AskSplitResponse)},
  { 263, -1, sizeof(::schedulerpb::ReportSplitRequest)},
  { 271, -1, sizeof(::schedulerpb::ReportSplitResponse)},
  { 277, -1, sizeof(::schedulerpb::SplitID)},
  { 284, -1, sizeof(::schedulerpb::TimeInterval)},
  { 291, -1, sizeof(::schedulerpb::RecordPair)},
  { 298, -1, sizeof(::schedulerpb::StoreStats)},
  { 318, -1, sizeof(::schedulerpb::StoreHeartbeatRequest)},
  { 325, -1, sizeof(::schedulerpb::StoreHeartbeatResponse)},
  { 331, -1, sizeof(::schedulerpb::ScatterRegionRequest)},
  { 340, -1, sizeof(::schedulerpb::ScatterRegionResponse)},
  { 346, -1, sizeof(::schedulerpb::GetGCSafePointRequest)},
  { 352, -1, sizeof(::schedulerpb::GetGCSafePointResponse)},
  { 359, -1, sizeof(::schedulerpb::UpdateGCSafePointRequest)},
  { 366, -1, sizeof(::schedulerpb::UpdateGCSafePointResponse)},
  { 373, -1, sizeof(::schedulerpb::GetOperatorRequest)},
  { 380, -1, sizeof(::schedulerpb::GetOperatorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_RequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_ResponseHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_TsoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_TsoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_BootstrapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_BootstrapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_IsBootstrappedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_IsBootstrappedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_AllocIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_AllocIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetStoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetStoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_PutStoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_PutStoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetAllStoresRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetAllStoresResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetRegionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetRegionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetRegionByIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_ScanRegionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_ScanRegionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetClusterConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetClusterConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_PutClusterConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_PutClusterConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetMembersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetMembersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_RegionHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_ChangePeer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_TransferLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_RegionHeartbeatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_AskSplitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_AskSplitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_ReportSplitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_ReportSplitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_SplitID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_TimeInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_RecordPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_StoreStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_StoreHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_StoreHeartbeatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_ScatterRegionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_ScatterRegionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetGCSafePointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetGCSafePointResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_UpdateGCSafePointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_UpdateGCSafePointResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetOperatorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::schedulerpb::_GetOperatorResponse_default_instance_),
};

const char descriptor_table_protodef_schedulerpb_2eproto[] =
  "\n\021schedulerpb.proto\022\013schedulerpb\032\014metapb"
  ".proto\032\reraftpb.proto\"#\n\rRequestHeader\022\022"
  "\n\ncluster_id\030\001 \001(\004\"G\n\016ResponseHeader\022\022\n\n"
  "cluster_id\030\001 \001(\004\022!\n\005error\030\002 \001(\0132\022.schedu"
  "lerpb.Error\">\n\005Error\022$\n\004type\030\001 \001(\0162\026.sch"
  "edulerpb.ErrorType\022\017\n\007message\030\002 \001(\t\"G\n\nT"
  "soRequest\022*\n\006header\030\001 \001(\0132\032.schedulerpb."
  "RequestHeader\022\r\n\005count\030\002 \001(\r\".\n\tTimestam"
  "p\022\020\n\010physical\030\001 \001(\003\022\017\n\007logical\030\002 \001(\003\"t\n\013"
  "TsoResponse\022+\n\006header\030\001 \001(\0132\033.schedulerp"
  "b.ResponseHeader\022\r\n\005count\030\002 \001(\r\022)\n\ttimes"
  "tamp\030\003 \001(\0132\026.schedulerpb.Timestamp\"\\\n\020Bo"
  "otstrapRequest\022*\n\006header\030\001 \001(\0132\032.schedul"
  "erpb.RequestHeader\022\034\n\005store\030\002 \001(\0132\r.meta"
  "pb.Store\"@\n\021BootstrapResponse\022+\n\006header\030"
  "\001 \001(\0132\033.schedulerpb.ResponseHeader\"C\n\025Is"
  "BootstrappedRequest\022*\n\006header\030\001 \001(\0132\032.sc"
  "hedulerpb.RequestHeader\"[\n\026IsBootstrappe"
  "dResponse\022+\n\006header\030\001 \001(\0132\033.schedulerpb."
  "ResponseHeader\022\024\n\014bootstrapped\030\002 \001(\010\"<\n\016"
  "AllocIDRequest\022*\n\006header\030\001 \001(\0132\032.schedul"
  "erpb.RequestHeader\"J\n\017AllocIDResponse\022+\n"
  "\006header\030\001 \001(\0132\033.schedulerpb.ResponseHead"
  "er\022\n\n\002id\030\002 \001(\004\"O\n\017GetStoreRequest\022*\n\006hea"
  "der\030\001 \001(\0132\032.schedulerpb.RequestHeader\022\020\n"
  "\010store_id\030\002 \001(\004\"\205\001\n\020GetStoreResponse\022+\n\006"
  "header\030\001 \001(\0132\033.schedulerpb.ResponseHeade"
  "r\022\034\n\005store\030\002 \001(\0132\r.metapb.Store\022&\n\005stats"
  "\030\003 \001(\0132\027.schedulerpb.StoreStats\"[\n\017PutSt"
  "oreRequest\022*\n\006header\030\001 \001(\0132\032.schedulerpb"
  ".RequestHeader\022\034\n\005store\030\002 \001(\0132\r.metapb.S"
  "tore\"\?\n\020PutStoreResponse\022+\n\006header\030\001 \001(\013"
  "2\033.schedulerpb.ResponseHeader\"c\n\023GetAllS"
  "toresRequest\022*\n\006header\030\001 \001(\0132\032.scheduler"
  "pb.RequestHeader\022 \n\030exclude_tombstone_st"
  "ores\030\002 \001(\010\"b\n\024GetAllStoresResponse\022+\n\006he"
  "ader\030\001 \001(\0132\033.schedulerpb.ResponseHeader\022"
  "\035\n\006stores\030\002 \003(\0132\r.metapb.Store\"R\n\020GetReg"
  "ionRequest\022*\n\006header\030\001 \001(\0132\032.schedulerpb"
  ".RequestHeader\022\022\n\nregion_key\030\002 \001(\014\"\234\001\n\021G"
  "etRegionResponse\022+\n\006header\030\001 \001(\0132\033.sched"
  "ulerpb.ResponseHeader\022\036\n\006region\030\002 \001(\0132\016."
  "metapb.Region\022\034\n\006leader\030\003 \001(\0132\014.metapb.P"
  "eer\022\034\n\006slaves\030\004 \003(\0132\014.metapb.Peer\"U\n\024Get"
  "RegionByIDRequest\022*\n\006header\030\001 \001(\0132\032.sche"
  "dulerpb.RequestHeader\022\021\n\tregion_id\030\002 \001(\004"
  "\"s\n\022ScanRegionsRequest\022*\n\006header\030\001 \001(\0132\032"
  ".schedulerpb.RequestHeader\022\021\n\tstart_key\030"
  "\002 \001(\014\022\r\n\005limit\030\003 \001(\005\022\017\n\007end_key\030\004 \001(\014\"\202\001"
  "\n\023ScanRegionsResponse\022+\n\006header\030\001 \001(\0132\033."
  "schedulerpb.ResponseHeader\022\037\n\007regions\030\002 "
  "\003(\0132\016.metapb.Region\022\035\n\007leaders\030\003 \003(\0132\014.m"
  "etapb.Peer\"E\n\027GetClusterConfigRequest\022*\n"
  "\006header\030\001 \001(\0132\032.schedulerpb.RequestHeade"
  "r\"i\n\030GetClusterConfigResponse\022+\n\006header\030"
  "\001 \001(\0132\033.schedulerpb.ResponseHeader\022 \n\007cl"
  "uster\030\002 \001(\0132\017.metapb.Cluster\"g\n\027PutClust"
  "erConfigRequest\022*\n\006header\030\001 \001(\0132\032.schedu"
  "lerpb.RequestHeader\022 \n\007cluster\030\002 \001(\0132\017.m"
  "etapb.Cluster\"G\n\030PutClusterConfigRespons"
  "e\022+\n\006header\030\001 \001(\0132\033.schedulerpb.Response"
  "Header\"j\n\006Member\022\014\n\004name\030\001 \001(\t\022\021\n\tmember"
  "_id\030\002 \001(\004\022\021\n\tpeer_urls\030\003 \003(\t\022\023\n\013client_u"
  "rls\030\004 \003(\t\022\027\n\017leader_priority\030\005 \001(\005\"\?\n\021Ge"
  "tMembersRequest\022*\n\006header\030\001 \001(\0132\032.schedu"
  "lerpb.RequestHeader\"\266\001\n\022GetMembersRespon"
  "se\022+\n\006header\030\001 \001(\0132\033.schedulerpb.Respons"
  "eHeader\022$\n\007members\030\002 \003(\0132\023.schedulerpb.M"
  "ember\022#\n\006leader\030\003 \001(\0132\023.schedulerpb.Memb"
  "er\022(\n\013etcd_leader\030\004 \001(\0132\023.schedulerpb.Me"
  "mber\"\301\001\n\026RegionHeartbeatRequest\022*\n\006heade"
  "r\030\001 \001(\0132\032.schedulerpb.RequestHeader\022\036\n\006r"
  "egion\030\002 \001(\0132\016.metapb.Region\022\034\n\006leader\030\003 "
  "\001(\0132\014.metapb.Peer\022#\n\rpending_peers\030\005 \003(\013"
  "2\014.metapb.Peer\022\030\n\020approximate_size\030\n \001(\004"
  "\"V\n\nChangePeer\022\032\n\004peer\030\001 \001(\0132\014.metapb.Pe"
  "er\022,\n\013change_type\030\002 \001(\0162\027.eraftpb.ConfCh"
  "angeType\",\n\016TransferLeader\022\032\n\004peer\030\001 \001(\013"
  "2\014.metapb.Peer\"\213\002\n\027RegionHeartbeatRespon"
  "se\022+\n\006header\030\001 \001(\0132\033.schedulerpb.Respons"
  "eHeader\022,\n\013change_peer\030\002 \001(\0132\027.scheduler"
  "pb.ChangePeer\0224\n\017transfer_leader\030\003 \001(\0132\033"
  ".schedulerpb.TransferLeader\022\021\n\tregion_id"
  "\030\004 \001(\004\022)\n\014region_epoch\030\005 \001(\0132\023.metapb.Re"
  "gionEpoch\022!\n\013target_peer\030\006 \001(\0132\014.metapb."
  "Peer\"]\n\017AskSplitRequest\022*\n\006header\030\001 \001(\0132"
  "\032.schedulerpb.RequestHeader\022\036\n\006region\030\002 "
  "\001(\0132\016.metapb.Region\"l\n\020AskSplitResponse\022"
  "+\n\006header\030\001 \001(\0132\033.schedulerpb.ResponseHe"
  "ader\022\025\n\rnew_region_id\030\002 \001(\004\022\024\n\014new_peer_"
  "ids\030\003 \003(\004\"}\n\022ReportSplitRequest\022*\n\006heade"
  "r\030\001 \001(\0132\032.schedulerpb.RequestHeader\022\034\n\004l"
  "eft\030\002 \001(\0132\016.metapb.Region\022\035\n\005right\030\003 \001(\013"
  "2\016.metapb.Region\"B\n\023ReportSplitResponse\022"
  "+\n\006header\030\001 \001(\0132\033.schedulerpb.ResponseHe"
  "ader\"6\n\007SplitID\022\025\n\rnew_region_id\030\001 \001(\004\022\024"
  "\n\014new_peer_ids\030\002 \003(\004\">\n\014TimeInterval\022\027\n\017"
  "start_timestamp\030\001 \001(\004\022\025\n\rend_timestamp\030\002"
  " \001(\004\"(\n\nRecordPair\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\004\"\322\003\n\nStoreStats\022\020\n\010store_id\030\001 \001(\004\022"
  "\020\n\010capacity\030\002 \001(\004\022\021\n\tavailable\030\003 \001(\004\022\024\n\014"
  "region_count\030\004 \001(\r\022\032\n\022sending_snap_count"
  "\030\005 \001(\r\022\034\n\024receiving_snap_count\030\006 \001(\r\022\022\n\n"
  "start_time\030\007 \001(\r\022\033\n\023applying_snap_count\030"
  "\010 \001(\r\022\017\n\007is_busy\030\t \001(\010\022\021\n\tused_size\030\n \001("
  "\004\022+\n\010interval\030\017 \001(\0132\031.schedulerpb.TimeIn"
  "terval\022+\n\ncpu_usages\030\020 \003(\0132\027.schedulerpb"
  ".RecordPair\022.\n\rread_io_rates\030\021 \003(\0132\027.sch"
  "edulerpb.RecordPair\022/\n\016write_io_rates\030\022 "
  "\003(\0132\027.schedulerpb.RecordPair\022-\n\014op_laten"
  "cies\030\023 \003(\0132\027.schedulerpb.RecordPair\"k\n\025S"
  "toreHeartbeatRequest\022*\n\006header\030\001 \001(\0132\032.s"
  "chedulerpb.RequestHeader\022&\n\005stats\030\002 \001(\0132"
  "\027.schedulerpb.StoreStats\"E\n\026StoreHeartbe"
  "atResponse\022+\n\006header\030\001 \001(\0132\033.schedulerpb"
  ".ResponseHeader\"\223\001\n\024ScatterRegionRequest"
  "\022*\n\006header\030\001 \001(\0132\032.schedulerpb.RequestHe"
  "ader\022\021\n\tregion_id\030\002 \001(\004\022\036\n\006region\030\003 \001(\0132"
  "\016.metapb.Region\022\034\n\006leader\030\004 \001(\0132\014.metapb"
  ".Peer\"D\n\025ScatterRegionResponse\022+\n\006header"
  "\030\001 \001(\0132\033.schedulerpb.ResponseHeader\"C\n\025G"
  "etGCSafePointRequest\022*\n\006header\030\001 \001(\0132\032.s"
  "chedulerpb.RequestHeader\"Y\n\026GetGCSafePoi"
  "ntResponse\022+\n\006header\030\001 \001(\0132\033.schedulerpb"
  ".ResponseHeader\022\022\n\nsafe_point\030\002 \001(\004\"Z\n\030U"
  "pdateGCSafePointRequest\022*\n\006header\030\001 \001(\0132"
  "\032.schedulerpb.RequestHeader\022\022\n\nsafe_poin"
  "t\030\002 \001(\004\"`\n\031UpdateGCSafePointResponse\022+\n\006"
  "header\030\001 \001(\0132\033.schedulerpb.ResponseHeade"
  "r\022\026\n\016new_safe_point\030\002 \001(\004\"S\n\022GetOperator"
  "Request\022*\n\006header\030\001 \001(\0132\032.schedulerpb.Re"
  "questHeader\022\021\n\tregion_id\030\002 \001(\004\"\236\001\n\023GetOp"
  "eratorResponse\022+\n\006header\030\001 \001(\0132\033.schedul"
  "erpb.ResponseHeader\022\021\n\tregion_id\030\002 \001(\004\022\014"
  "\n\004desc\030\003 \001(\014\022+\n\006status\030\004 \001(\0162\033.scheduler"
  "pb.OperatorStatus\022\014\n\004kind\030\005 \001(\014*\225\001\n\tErro"
  "rType\022\006\n\002OK\020\000\022\013\n\007UNKNOWN\020\001\022\024\n\020NOT_BOOTST"
  "RAPPED\020\002\022\023\n\017STORE_TOMBSTONE\020\003\022\030\n\024ALREADY"
  "_BOOTSTRAPPED\020\004\022\030\n\024INCOMPATIBLE_VERSION\020"
  "\005\022\024\n\020REGION_NOT_FOUND\020\006*P\n\016OperatorStatu"
  "s\022\013\n\007SUCCESS\020\000\022\013\n\007TIMEOUT\020\001\022\n\n\006CANCEL\020\002\022"
  "\013\n\007REPLACE\020\003\022\013\n\007RUNNING\020\0042\211\016\n\tScheduler\022"
  "O\n\nGetMembers\022\036.schedulerpb.GetMembersRe"
  "quest\032\037.schedulerpb.GetMembersResponse\"\000"
  "\022>\n\003Tso\022\027.schedulerpb.TsoRequest\032\030.sched"
  "ulerpb.TsoResponse\"\000(\0010\001\022L\n\tBootstrap\022\035."
  "schedulerpb.BootstrapRequest\032\036.scheduler"
  "pb.BootstrapResponse\"\000\022[\n\016IsBootstrapped"
  "\022\".schedulerpb.IsBootstrappedRequest\032#.s"
  "chedulerpb.IsBootstrappedResponse\"\000\022F\n\007A"
  "llocID\022\033.schedulerpb.AllocIDRequest\032\034.sc"
  "hedulerpb.AllocIDResponse\"\000\022I\n\010GetStore\022"
  "\034.schedulerpb.GetStoreRequest\032\035.schedule"
  "rpb.GetStoreResponse\"\000\022I\n\010PutStore\022\034.sch"
  "edulerpb.PutStoreRequest\032\035.schedulerpb.P"
  "utStoreResponse\"\000\022U\n\014GetAllStores\022 .sche"
  "dulerpb.GetAllStoresRequest\032!.schedulerp"
  "b.GetAllStoresResponse\"\000\022[\n\016StoreHeartbe"
  "at\022\".schedulerpb.StoreHeartbeatRequest\032#"
  ".schedulerpb.StoreHeartbeatResponse\"\000\022b\n"
  "\017RegionHeartbeat\022#.schedulerpb.RegionHea"
  "rtbeatRequest\032$.schedulerpb.RegionHeartb"
  "eatResponse\"\000(\0010\001\022L\n\tGetRegion\022\035.schedul"
  "erpb.GetRegionRequest\032\036.schedulerpb.GetR"
  "egionResponse\"\000\022P\n\rGetPrevRegion\022\035.sched"
  "ulerpb.GetRegionRequest\032\036.schedulerpb.Ge"
  "tRegionResponse\"\000\022T\n\rGetRegionByID\022!.sch"
  "edulerpb.GetRegionByIDRequest\032\036.schedule"
  "rpb.GetRegionResponse\"\000\022R\n\013ScanRegions\022\037"
  ".schedulerpb.ScanRegionsRequest\032 .schedu"
  "lerpb.ScanRegionsResponse\"\000\022I\n\010AskSplit\022"
  "\034.schedulerpb.AskSplitRequest\032\035.schedule"
  "rpb.AskSplitResponse\"\000\022a\n\020GetClusterConf"
  "ig\022$.schedulerpb.GetClusterConfigRequest"
  "\032%.schedulerpb.GetClusterConfigResponse\""
  "\000\022a\n\020PutClusterConfig\022$.schedulerpb.PutC"
  "lusterConfigRequest\032%.schedulerpb.PutClu"
  "sterConfigResponse\"\000\022X\n\rScatterRegion\022!."
  "schedulerpb.ScatterRegionRequest\032\".sched"
  "ulerpb.ScatterRegionResponse\"\000\022[\n\016GetGCS"
  "afePoint\022\".schedulerpb.GetGCSafePointReq"
  "uest\032#.schedulerpb.GetGCSafePointRespons"
  "e\"\000\022d\n\021UpdateGCSafePoint\022%.schedulerpb.U"
  "pdateGCSafePointRequest\032&.schedulerpb.Up"
  "dateGCSafePointResponse\"\000\022R\n\013GetOperator"
  "\022\037.schedulerpb.GetOperatorRequest\032 .sche"
  "dulerpb.GetOperatorResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_schedulerpb_2eproto_deps[2] = {
  &::descriptor_table_eraftpb_2eproto,
  &::descriptor_table_metapb_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_schedulerpb_2eproto_sccs[52] = {
  &scc_info_AllocIDRequest_schedulerpb_2eproto.base,
  &scc_info_AllocIDResponse_schedulerpb_2eproto.base,
  &scc_info_AskSplitRequest_schedulerpb_2eproto.base,
  &scc_info_AskSplitResponse_schedulerpb_2eproto.base,
  &scc_info_BootstrapRequest_schedulerpb_2eproto.base,
  &scc_info_BootstrapResponse_schedulerpb_2eproto.base,
  &scc_info_ChangePeer_schedulerpb_2eproto.base,
  &scc_info_Error_schedulerpb_2eproto.base,
  &scc_info_GetAllStoresRequest_schedulerpb_2eproto.base,
  &scc_info_GetAllStoresResponse_schedulerpb_2eproto.base,
  &scc_info_GetClusterConfigRequest_schedulerpb_2eproto.base,
  &scc_info_GetClusterConfigResponse_schedulerpb_2eproto.base,
  &scc_info_GetGCSafePointRequest_schedulerpb_2eproto.base,
  &scc_info_GetGCSafePointResponse_schedulerpb_2eproto.base,
  &scc_info_GetMembersRequest_schedulerpb_2eproto.base,
  &scc_info_GetMembersResponse_schedulerpb_2eproto.base,
  &scc_info_GetOperatorRequest_schedulerpb_2eproto.base,
  &scc_info_GetOperatorResponse_schedulerpb_2eproto.base,
  &scc_info_GetRegionByIDRequest_schedulerpb_2eproto.base,
  &scc_info_GetRegionRequest_schedulerpb_2eproto.base,
  &scc_info_GetRegionResponse_schedulerpb_2eproto.base,
  &scc_info_GetStoreRequest_schedulerpb_2eproto.base,
  &scc_info_GetStoreResponse_schedulerpb_2eproto.base,
  &scc_info_IsBootstrappedRequest_schedulerpb_2eproto.base,
  &scc_info_IsBootstrappedResponse_schedulerpb_2eproto.base,
  &scc_info_Member_schedulerpb_2eproto.base,
  &scc_info_PutClusterConfigRequest_schedulerpb_2eproto.base,
  &scc_info_PutClusterConfigResponse_schedulerpb_2eproto.base,
  &scc_info_PutStoreRequest_schedulerpb_2eproto.base,
  &scc_info_PutStoreResponse_schedulerpb_2eproto.base,
  &scc_info_RecordPair_schedulerpb_2eproto.base,
  &scc_info_RegionHeartbeatRequest_schedulerpb_2eproto.base,
  &scc_info_RegionHeartbeatResponse_schedulerpb_2eproto.base,
  &scc_info_ReportSplitRequest_schedulerpb_2eproto.base,
  &scc_info_ReportSplitResponse_schedulerpb_2eproto.base,
  &scc_info_RequestHeader_schedulerpb_2eproto.base,
  &scc_info_ResponseHeader_schedulerpb_2eproto.base,
  &scc_info_ScanRegionsRequest_schedulerpb_2eproto.base,
  &scc_info_ScanRegionsResponse_schedulerpb_2eproto.base,
  &scc_info_ScatterRegionRequest_schedulerpb_2eproto.base,
  &scc_info_ScatterRegionResponse_schedulerpb_2eproto.base,
  &scc_info_SplitID_schedulerpb_2eproto.base,
  &scc_info_StoreHeartbeatRequest_schedulerpb_2eproto.base,
  &scc_info_StoreHeartbeatResponse_schedulerpb_2eproto.base,
  &scc_info_StoreStats_schedulerpb_2eproto.base,
  &scc_info_TimeInterval_schedulerpb_2eproto.base,
  &scc_info_Timestamp_schedulerpb_2eproto.base,
  &scc_info_TransferLeader_schedulerpb_2eproto.base,
  &scc_info_TsoRequest_schedulerpb_2eproto.base,
  &scc_info_TsoResponse_schedulerpb_2eproto.base,
  &scc_info_UpdateGCSafePointRequest_schedulerpb_2eproto.base,
  &scc_info_UpdateGCSafePointResponse_schedulerpb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_schedulerpb_2eproto_once;
static bool descriptor_table_schedulerpb_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schedulerpb_2eproto = {
  &descriptor_table_schedulerpb_2eproto_initialized, descriptor_table_protodef_schedulerpb_2eproto, "schedulerpb.proto", 7477,
  &descriptor_table_schedulerpb_2eproto_once, descriptor_table_schedulerpb_2eproto_sccs, descriptor_table_schedulerpb_2eproto_deps, 52, 2,
  schemas, file_default_instances, TableStruct_schedulerpb_2eproto::offsets,
  file_level_metadata_schedulerpb_2eproto, 52, file_level_enum_descriptors_schedulerpb_2eproto, file_level_service_descriptors_schedulerpb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_schedulerpb_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_schedulerpb_2eproto), true);
namespace schedulerpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schedulerpb_2eproto);
  return file_level_enum_descriptors_schedulerpb_2eproto[0];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatorStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schedulerpb_2eproto);
  return file_level_enum_descriptors_schedulerpb_2eproto[1];
}
bool OperatorStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RequestHeader::InitAsDefaultInstance() {
}
class RequestHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  cluster_id_ = PROTOBUF_ULONGLONG(0);
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:schedulerpb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
}

void RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestHeader& RequestHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestHeader_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 cluster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.RequestHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.RequestHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.RequestHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.RequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.RequestHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.RequestHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void RequestHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cluster_id_, other->cluster_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseHeader::InitAsDefaultInstance() {
  ::schedulerpb::_ResponseHeader_default_instance_._instance.get_mutable()->error_ = const_cast< ::schedulerpb::Error*>(
      ::schedulerpb::Error::internal_default_instance());
}
class ResponseHeader::HasBitSetters {
 public:
  static const ::schedulerpb::Error& error(const ResponseHeader* msg);
};

const ::schedulerpb::Error&
ResponseHeader::HasBitSetters::error(const ResponseHeader* msg) {
  return *msg->error_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kClusterIdFieldNumber;
const int ResponseHeader::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::schedulerpb::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseHeader_schedulerpb_2eproto.base);
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(cluster_id_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:schedulerpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseHeader& ResponseHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseHeader_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  cluster_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 cluster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.ResponseHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.Error error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.ResponseHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // .schedulerpb.Error error = 2;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.ResponseHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // .schedulerpb.Error error = 2;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.ResponseHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.ResponseHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::schedulerpb::Error::MergeFrom(from.error());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void ResponseHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
  swap(cluster_id_, other->cluster_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Error::InitAsDefaultInstance() {
}
class Error::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kTypeFieldNumber;
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_schedulerpb_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:schedulerpb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ErrorType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::schedulerpb::ErrorType>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message(), ptr, ctx, "schedulerpb.Error.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Error::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.Error)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ErrorType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::schedulerpb::ErrorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "schedulerpb.Error.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.Error)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Error::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ErrorType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.Error.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.Error)
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ErrorType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.Error.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.Error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .schedulerpb.ErrorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.Error)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TsoRequest::InitAsDefaultInstance() {
  ::schedulerpb::_TsoRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class TsoRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const TsoRequest* msg);
};

const ::schedulerpb::RequestHeader&
TsoRequest::HasBitSetters::header(const TsoRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TsoRequest::kHeaderFieldNumber;
const int TsoRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TsoRequest::TsoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.TsoRequest)
}
TsoRequest::TsoRequest(const TsoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.TsoRequest)
}

void TsoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TsoRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&header_)) + sizeof(count_));
}

TsoRequest::~TsoRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.TsoRequest)
  SharedDtor();
}

void TsoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TsoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TsoRequest& TsoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TsoRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void TsoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.TsoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  count_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TsoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TsoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.TsoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.TsoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.TsoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TsoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.TsoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.TsoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TsoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.TsoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.TsoRequest)
  return target;
}

size_t TsoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.TsoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TsoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.TsoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TsoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TsoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.TsoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.TsoRequest)
    MergeFrom(*source);
  }
}

void TsoRequest::MergeFrom(const TsoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.TsoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void TsoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.TsoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsoRequest::CopyFrom(const TsoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.TsoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsoRequest::IsInitialized() const {
  return true;
}

void TsoRequest::Swap(TsoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TsoRequest::InternalSwap(TsoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TsoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Timestamp::InitAsDefaultInstance() {
}
class Timestamp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kPhysicalFieldNumber;
const int Timestamp::kLogicalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&physical_, &from.physical_,
    static_cast<size_t>(reinterpret_cast<char*>(&logical_) -
    reinterpret_cast<char*>(&physical_)) + sizeof(logical_));
  // @@protoc_insertion_point(copy_constructor:schedulerpb.Timestamp)
}

void Timestamp::SharedCtor() {
  ::memset(&physical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logical_) -
      reinterpret_cast<char*>(&physical_)) + sizeof(logical_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:schedulerpb.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
}

void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timestamp& Timestamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timestamp_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&physical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logical_) -
      reinterpret_cast<char*>(&physical_)) + sizeof(logical_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 physical = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          physical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 logical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          logical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Timestamp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.Timestamp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 physical = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &physical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 logical = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &logical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.Timestamp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Timestamp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 physical = 1;
  if (this->physical() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->physical(), output);
  }

  // int64 logical = 2;
  if (this->logical() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->logical(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.Timestamp)
}

::PROTOBUF_NAMESPACE_ID::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 physical = 1;
  if (this->physical() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->physical(), target);
  }

  // int64 logical = 2;
  if (this->logical() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->logical(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.Timestamp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 physical = 1;
  if (this->physical() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->physical());
  }

  // int64 logical = 2;
  if (this->logical() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->logical());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.physical() != 0) {
    set_physical(from.physical());
  }
  if (from.logical() != 0) {
    set_logical(from.logical());
  }
}

void Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(physical_, other->physical_);
  swap(logical_, other->logical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TsoResponse::InitAsDefaultInstance() {
  ::schedulerpb::_TsoResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
  ::schedulerpb::_TsoResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::schedulerpb::Timestamp*>(
      ::schedulerpb::Timestamp::internal_default_instance());
}
class TsoResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const TsoResponse* msg);
  static const ::schedulerpb::Timestamp& timestamp(const TsoResponse* msg);
};

const ::schedulerpb::ResponseHeader&
TsoResponse::HasBitSetters::header(const TsoResponse* msg) {
  return *msg->header_;
}
const ::schedulerpb::Timestamp&
TsoResponse::HasBitSetters::timestamp(const TsoResponse* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TsoResponse::kHeaderFieldNumber;
const int TsoResponse::kCountFieldNumber;
const int TsoResponse::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TsoResponse::TsoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.TsoResponse)
}
TsoResponse::TsoResponse(const TsoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::schedulerpb::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.TsoResponse)
}

void TsoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TsoResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&header_)) + sizeof(count_));
}

TsoResponse::~TsoResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.TsoResponse)
  SharedDtor();
}

void TsoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete timestamp_;
}

void TsoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TsoResponse& TsoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TsoResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void TsoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.TsoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  count_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TsoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TsoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.TsoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.TsoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.TsoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TsoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.TsoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // .schedulerpb.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.TsoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* TsoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.TsoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // .schedulerpb.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::timestamp(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.TsoResponse)
  return target;
}

size_t TsoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.TsoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .schedulerpb.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TsoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.TsoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TsoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TsoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.TsoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.TsoResponse)
    MergeFrom(*source);
  }
}

void TsoResponse::MergeFrom(const TsoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.TsoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::schedulerpb::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void TsoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.TsoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsoResponse::CopyFrom(const TsoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.TsoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsoResponse::IsInitialized() const {
  return true;
}

void TsoResponse::Swap(TsoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TsoResponse::InternalSwap(TsoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(timestamp_, other->timestamp_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TsoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BootstrapRequest::InitAsDefaultInstance() {
  ::schedulerpb::_BootstrapRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
  ::schedulerpb::_BootstrapRequest_default_instance_._instance.get_mutable()->store_ = const_cast< ::metapb::Store*>(
      ::metapb::Store::internal_default_instance());
}
class BootstrapRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const BootstrapRequest* msg);
  static const ::metapb::Store& store(const BootstrapRequest* msg);
};

const ::schedulerpb::RequestHeader&
BootstrapRequest::HasBitSetters::header(const BootstrapRequest* msg) {
  return *msg->header_;
}
const ::metapb::Store&
BootstrapRequest::HasBitSetters::store(const BootstrapRequest* msg) {
  return *msg->store_;
}
void BootstrapRequest::clear_store() {
  if (GetArenaNoVirtual() == nullptr && store_ != nullptr) {
    delete store_;
  }
  store_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BootstrapRequest::kHeaderFieldNumber;
const int BootstrapRequest::kStoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BootstrapRequest::BootstrapRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.BootstrapRequest)
}
BootstrapRequest::BootstrapRequest(const BootstrapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_store()) {
    store_ = new ::metapb::Store(*from.store_);
  } else {
    store_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.BootstrapRequest)
}

void BootstrapRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BootstrapRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_) -
      reinterpret_cast<char*>(&header_)) + sizeof(store_));
}

BootstrapRequest::~BootstrapRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.BootstrapRequest)
  SharedDtor();
}

void BootstrapRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete store_;
}

void BootstrapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootstrapRequest& BootstrapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BootstrapRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void BootstrapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.BootstrapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && store_ != nullptr) {
    delete store_;
  }
  store_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BootstrapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Store store = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_store(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BootstrapRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.BootstrapRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Store store = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.BootstrapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.BootstrapRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BootstrapRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.BootstrapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::store(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.BootstrapRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* BootstrapRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.BootstrapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::store(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.BootstrapRequest)
  return target;
}

size_t BootstrapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.BootstrapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *store_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootstrapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.BootstrapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BootstrapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.BootstrapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.BootstrapRequest)
    MergeFrom(*source);
  }
}

void BootstrapRequest::MergeFrom(const BootstrapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.BootstrapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_store()) {
    mutable_store()->::metapb::Store::MergeFrom(from.store());
  }
}

void BootstrapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.BootstrapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapRequest::CopyFrom(const BootstrapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.BootstrapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrapRequest::IsInitialized() const {
  return true;
}

void BootstrapRequest::Swap(BootstrapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BootstrapRequest::InternalSwap(BootstrapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(store_, other->store_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BootstrapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BootstrapResponse::InitAsDefaultInstance() {
  ::schedulerpb::_BootstrapResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class BootstrapResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const BootstrapResponse* msg);
};

const ::schedulerpb::ResponseHeader&
BootstrapResponse::HasBitSetters::header(const BootstrapResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BootstrapResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BootstrapResponse::BootstrapResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.BootstrapResponse)
}
BootstrapResponse::BootstrapResponse(const BootstrapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.BootstrapResponse)
}

void BootstrapResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BootstrapResponse_schedulerpb_2eproto.base);
  header_ = nullptr;
}

BootstrapResponse::~BootstrapResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.BootstrapResponse)
  SharedDtor();
}

void BootstrapResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void BootstrapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootstrapResponse& BootstrapResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BootstrapResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void BootstrapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.BootstrapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BootstrapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BootstrapResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.BootstrapResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.BootstrapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.BootstrapResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BootstrapResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.BootstrapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.BootstrapResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* BootstrapResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.BootstrapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.BootstrapResponse)
  return target;
}

size_t BootstrapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.BootstrapResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootstrapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.BootstrapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BootstrapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.BootstrapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.BootstrapResponse)
    MergeFrom(*source);
  }
}

void BootstrapResponse::MergeFrom(const BootstrapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.BootstrapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
}

void BootstrapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.BootstrapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapResponse::CopyFrom(const BootstrapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.BootstrapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrapResponse::IsInitialized() const {
  return true;
}

void BootstrapResponse::Swap(BootstrapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BootstrapResponse::InternalSwap(BootstrapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BootstrapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsBootstrappedRequest::InitAsDefaultInstance() {
  ::schedulerpb::_IsBootstrappedRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class IsBootstrappedRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const IsBootstrappedRequest* msg);
};

const ::schedulerpb::RequestHeader&
IsBootstrappedRequest::HasBitSetters::header(const IsBootstrappedRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsBootstrappedRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsBootstrappedRequest::IsBootstrappedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.IsBootstrappedRequest)
}
IsBootstrappedRequest::IsBootstrappedRequest(const IsBootstrappedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.IsBootstrappedRequest)
}

void IsBootstrappedRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsBootstrappedRequest_schedulerpb_2eproto.base);
  header_ = nullptr;
}

IsBootstrappedRequest::~IsBootstrappedRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.IsBootstrappedRequest)
  SharedDtor();
}

void IsBootstrappedRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void IsBootstrappedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsBootstrappedRequest& IsBootstrappedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsBootstrappedRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void IsBootstrappedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.IsBootstrappedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IsBootstrappedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IsBootstrappedRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.IsBootstrappedRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.IsBootstrappedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.IsBootstrappedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IsBootstrappedRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.IsBootstrappedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.IsBootstrappedRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* IsBootstrappedRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.IsBootstrappedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.IsBootstrappedRequest)
  return target;
}

size_t IsBootstrappedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.IsBootstrappedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsBootstrappedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.IsBootstrappedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsBootstrappedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsBootstrappedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.IsBootstrappedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.IsBootstrappedRequest)
    MergeFrom(*source);
  }
}

void IsBootstrappedRequest::MergeFrom(const IsBootstrappedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.IsBootstrappedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
}

void IsBootstrappedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.IsBootstrappedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBootstrappedRequest::CopyFrom(const IsBootstrappedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.IsBootstrappedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsBootstrappedRequest::IsInitialized() const {
  return true;
}

void IsBootstrappedRequest::Swap(IsBootstrappedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsBootstrappedRequest::InternalSwap(IsBootstrappedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsBootstrappedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsBootstrappedResponse::InitAsDefaultInstance() {
  ::schedulerpb::_IsBootstrappedResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class IsBootstrappedResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const IsBootstrappedResponse* msg);
};

const ::schedulerpb::ResponseHeader&
IsBootstrappedResponse::HasBitSetters::header(const IsBootstrappedResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsBootstrappedResponse::kHeaderFieldNumber;
const int IsBootstrappedResponse::kBootstrappedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsBootstrappedResponse::IsBootstrappedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.IsBootstrappedResponse)
}
IsBootstrappedResponse::IsBootstrappedResponse(const IsBootstrappedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  bootstrapped_ = from.bootstrapped_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.IsBootstrappedResponse)
}

void IsBootstrappedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsBootstrappedResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bootstrapped_) -
      reinterpret_cast<char*>(&header_)) + sizeof(bootstrapped_));
}

IsBootstrappedResponse::~IsBootstrappedResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.IsBootstrappedResponse)
  SharedDtor();
}

void IsBootstrappedResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void IsBootstrappedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsBootstrappedResponse& IsBootstrappedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsBootstrappedResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void IsBootstrappedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.IsBootstrappedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  bootstrapped_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IsBootstrappedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bootstrapped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bootstrapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IsBootstrappedResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.IsBootstrappedResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bootstrapped = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bootstrapped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.IsBootstrappedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.IsBootstrappedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IsBootstrappedResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.IsBootstrappedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // bool bootstrapped = 2;
  if (this->bootstrapped() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->bootstrapped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.IsBootstrappedResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* IsBootstrappedResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.IsBootstrappedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // bool bootstrapped = 2;
  if (this->bootstrapped() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->bootstrapped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.IsBootstrappedResponse)
  return target;
}

size_t IsBootstrappedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.IsBootstrappedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool bootstrapped = 2;
  if (this->bootstrapped() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsBootstrappedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.IsBootstrappedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsBootstrappedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsBootstrappedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.IsBootstrappedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.IsBootstrappedResponse)
    MergeFrom(*source);
  }
}

void IsBootstrappedResponse::MergeFrom(const IsBootstrappedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.IsBootstrappedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.bootstrapped() != 0) {
    set_bootstrapped(from.bootstrapped());
  }
}

void IsBootstrappedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.IsBootstrappedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBootstrappedResponse::CopyFrom(const IsBootstrappedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.IsBootstrappedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsBootstrappedResponse::IsInitialized() const {
  return true;
}

void IsBootstrappedResponse::Swap(IsBootstrappedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsBootstrappedResponse::InternalSwap(IsBootstrappedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(bootstrapped_, other->bootstrapped_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsBootstrappedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllocIDRequest::InitAsDefaultInstance() {
  ::schedulerpb::_AllocIDRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class AllocIDRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const AllocIDRequest* msg);
};

const ::schedulerpb::RequestHeader&
AllocIDRequest::HasBitSetters::header(const AllocIDRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocIDRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocIDRequest::AllocIDRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.AllocIDRequest)
}
AllocIDRequest::AllocIDRequest(const AllocIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.AllocIDRequest)
}

void AllocIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocIDRequest_schedulerpb_2eproto.base);
  header_ = nullptr;
}

AllocIDRequest::~AllocIDRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.AllocIDRequest)
  SharedDtor();
}

void AllocIDRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AllocIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocIDRequest& AllocIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocIDRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void AllocIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.AllocIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllocIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllocIDRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.AllocIDRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.AllocIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.AllocIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllocIDRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.AllocIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.AllocIDRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocIDRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.AllocIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.AllocIDRequest)
  return target;
}

size_t AllocIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.AllocIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.AllocIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.AllocIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.AllocIDRequest)
    MergeFrom(*source);
  }
}

void AllocIDRequest::MergeFrom(const AllocIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.AllocIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
}

void AllocIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.AllocIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocIDRequest::CopyFrom(const AllocIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.AllocIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocIDRequest::IsInitialized() const {
  return true;
}

void AllocIDRequest::Swap(AllocIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocIDRequest::InternalSwap(AllocIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllocIDResponse::InitAsDefaultInstance() {
  ::schedulerpb::_AllocIDResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class AllocIDResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const AllocIDResponse* msg);
};

const ::schedulerpb::ResponseHeader&
AllocIDResponse::HasBitSetters::header(const AllocIDResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocIDResponse::kHeaderFieldNumber;
const int AllocIDResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocIDResponse::AllocIDResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.AllocIDResponse)
}
AllocIDResponse::AllocIDResponse(const AllocIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.AllocIDResponse)
}

void AllocIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocIDResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
}

AllocIDResponse::~AllocIDResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.AllocIDResponse)
  SharedDtor();
}

void AllocIDResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AllocIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocIDResponse& AllocIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocIDResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void AllocIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.AllocIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllocIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllocIDResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.AllocIDResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.AllocIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.AllocIDResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllocIDResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.AllocIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.AllocIDResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocIDResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.AllocIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.AllocIDResponse)
  return target;
}

size_t AllocIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.AllocIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.AllocIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.AllocIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.AllocIDResponse)
    MergeFrom(*source);
  }
}

void AllocIDResponse::MergeFrom(const AllocIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.AllocIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void AllocIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.AllocIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocIDResponse::CopyFrom(const AllocIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.AllocIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocIDResponse::IsInitialized() const {
  return true;
}

void AllocIDResponse::Swap(AllocIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocIDResponse::InternalSwap(AllocIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStoreRequest::InitAsDefaultInstance() {
  ::schedulerpb::_GetStoreRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class GetStoreRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const GetStoreRequest* msg);
};

const ::schedulerpb::RequestHeader&
GetStoreRequest::HasBitSetters::header(const GetStoreRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStoreRequest::kHeaderFieldNumber;
const int GetStoreRequest::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStoreRequest::GetStoreRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetStoreRequest)
}
GetStoreRequest::GetStoreRequest(const GetStoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  store_id_ = from.store_id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetStoreRequest)
}

void GetStoreRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStoreRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(store_id_));
}

GetStoreRequest::~GetStoreRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetStoreRequest)
  SharedDtor();
}

void GetStoreRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetStoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStoreRequest& GetStoreRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStoreRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetStoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetStoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  store_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 store_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          store_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStoreRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetStoreRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 store_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetStoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetStoreRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStoreRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetStoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 store_id = 2;
  if (this->store_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->store_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetStoreRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStoreRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetStoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 store_id = 2;
  if (this->store_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->store_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetStoreRequest)
  return target;
}

size_t GetStoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetStoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 store_id = 2;
  if (this->store_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->store_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetStoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetStoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetStoreRequest)
    MergeFrom(*source);
  }
}

void GetStoreRequest::MergeFrom(const GetStoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetStoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
}

void GetStoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreRequest::CopyFrom(const GetStoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreRequest::IsInitialized() const {
  return true;
}

void GetStoreRequest::Swap(GetStoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStoreRequest::InternalSwap(GetStoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(store_id_, other->store_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStoreResponse::InitAsDefaultInstance() {
  ::schedulerpb::_GetStoreResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
  ::schedulerpb::_GetStoreResponse_default_instance_._instance.get_mutable()->store_ = const_cast< ::metapb::Store*>(
      ::metapb::Store::internal_default_instance());
  ::schedulerpb::_GetStoreResponse_default_instance_._instance.get_mutable()->stats_ = const_cast< ::schedulerpb::StoreStats*>(
      ::schedulerpb::StoreStats::internal_default_instance());
}
class GetStoreResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const GetStoreResponse* msg);
  static const ::metapb::Store& store(const GetStoreResponse* msg);
  static const ::schedulerpb::StoreStats& stats(const GetStoreResponse* msg);
};

const ::schedulerpb::ResponseHeader&
GetStoreResponse::HasBitSetters::header(const GetStoreResponse* msg) {
  return *msg->header_;
}
const ::metapb::Store&
GetStoreResponse::HasBitSetters::store(const GetStoreResponse* msg) {
  return *msg->store_;
}
const ::schedulerpb::StoreStats&
GetStoreResponse::HasBitSetters::stats(const GetStoreResponse* msg) {
  return *msg->stats_;
}
void GetStoreResponse::clear_store() {
  if (GetArenaNoVirtual() == nullptr && store_ != nullptr) {
    delete store_;
  }
  store_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStoreResponse::kHeaderFieldNumber;
const int GetStoreResponse::kStoreFieldNumber;
const int GetStoreResponse::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStoreResponse::GetStoreResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetStoreResponse)
}
GetStoreResponse::GetStoreResponse(const GetStoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_store()) {
    store_ = new ::metapb::Store(*from.store_);
  } else {
    store_ = nullptr;
  }
  if (from.has_stats()) {
    stats_ = new ::schedulerpb::StoreStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetStoreResponse)
}

void GetStoreResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStoreResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stats_) -
      reinterpret_cast<char*>(&header_)) + sizeof(stats_));
}

GetStoreResponse::~GetStoreResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetStoreResponse)
  SharedDtor();
}

void GetStoreResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete store_;
  if (this != internal_default_instance()) delete stats_;
}

void GetStoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStoreResponse& GetStoreResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStoreResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetStoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetStoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && store_ != nullptr) {
    delete store_;
  }
  store_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Store store = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_store(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.StoreStats stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStoreResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetStoreResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Store store = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.StoreStats stats = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetStoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetStoreResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStoreResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetStoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::store(this), output);
  }

  // .schedulerpb.StoreStats stats = 3;
  if (this->has_stats()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::stats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetStoreResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStoreResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetStoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::store(this), target);
  }

  // .schedulerpb.StoreStats stats = 3;
  if (this->has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::stats(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetStoreResponse)
  return target;
}

size_t GetStoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetStoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *store_);
  }

  // .schedulerpb.StoreStats stats = 3;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetStoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetStoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetStoreResponse)
    MergeFrom(*source);
  }
}

void GetStoreResponse::MergeFrom(const GetStoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetStoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_store()) {
    mutable_store()->::metapb::Store::MergeFrom(from.store());
  }
  if (from.has_stats()) {
    mutable_stats()->::schedulerpb::StoreStats::MergeFrom(from.stats());
  }
}

void GetStoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreResponse::CopyFrom(const GetStoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreResponse::IsInitialized() const {
  return true;
}

void GetStoreResponse::Swap(GetStoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStoreResponse::InternalSwap(GetStoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(store_, other->store_);
  swap(stats_, other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutStoreRequest::InitAsDefaultInstance() {
  ::schedulerpb::_PutStoreRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
  ::schedulerpb::_PutStoreRequest_default_instance_._instance.get_mutable()->store_ = const_cast< ::metapb::Store*>(
      ::metapb::Store::internal_default_instance());
}
class PutStoreRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const PutStoreRequest* msg);
  static const ::metapb::Store& store(const PutStoreRequest* msg);
};

const ::schedulerpb::RequestHeader&
PutStoreRequest::HasBitSetters::header(const PutStoreRequest* msg) {
  return *msg->header_;
}
const ::metapb::Store&
PutStoreRequest::HasBitSetters::store(const PutStoreRequest* msg) {
  return *msg->store_;
}
void PutStoreRequest::clear_store() {
  if (GetArenaNoVirtual() == nullptr && store_ != nullptr) {
    delete store_;
  }
  store_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutStoreRequest::kHeaderFieldNumber;
const int PutStoreRequest::kStoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutStoreRequest::PutStoreRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.PutStoreRequest)
}
PutStoreRequest::PutStoreRequest(const PutStoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_store()) {
    store_ = new ::metapb::Store(*from.store_);
  } else {
    store_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.PutStoreRequest)
}

void PutStoreRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutStoreRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_) -
      reinterpret_cast<char*>(&header_)) + sizeof(store_));
}

PutStoreRequest::~PutStoreRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.PutStoreRequest)
  SharedDtor();
}

void PutStoreRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete store_;
}

void PutStoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutStoreRequest& PutStoreRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutStoreRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void PutStoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.PutStoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && store_ != nullptr) {
    delete store_;
  }
  store_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutStoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Store store = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_store(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutStoreRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.PutStoreRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Store store = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.PutStoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.PutStoreRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutStoreRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.PutStoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::store(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.PutStoreRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PutStoreRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.PutStoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::store(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.PutStoreRequest)
  return target;
}

size_t PutStoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.PutStoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *store_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutStoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.PutStoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutStoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutStoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.PutStoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.PutStoreRequest)
    MergeFrom(*source);
  }
}

void PutStoreRequest::MergeFrom(const PutStoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.PutStoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_store()) {
    mutable_store()->::metapb::Store::MergeFrom(from.store());
  }
}

void PutStoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.PutStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutStoreRequest::CopyFrom(const PutStoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.PutStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutStoreRequest::IsInitialized() const {
  return true;
}

void PutStoreRequest::Swap(PutStoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutStoreRequest::InternalSwap(PutStoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(store_, other->store_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutStoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutStoreResponse::InitAsDefaultInstance() {
  ::schedulerpb::_PutStoreResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class PutStoreResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const PutStoreResponse* msg);
};

const ::schedulerpb::ResponseHeader&
PutStoreResponse::HasBitSetters::header(const PutStoreResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutStoreResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutStoreResponse::PutStoreResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.PutStoreResponse)
}
PutStoreResponse::PutStoreResponse(const PutStoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.PutStoreResponse)
}

void PutStoreResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutStoreResponse_schedulerpb_2eproto.base);
  header_ = nullptr;
}

PutStoreResponse::~PutStoreResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.PutStoreResponse)
  SharedDtor();
}

void PutStoreResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void PutStoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutStoreResponse& PutStoreResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutStoreResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void PutStoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.PutStoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutStoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutStoreResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.PutStoreResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.PutStoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.PutStoreResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutStoreResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.PutStoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.PutStoreResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PutStoreResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.PutStoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.PutStoreResponse)
  return target;
}

size_t PutStoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.PutStoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutStoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.PutStoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutStoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutStoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.PutStoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.PutStoreResponse)
    MergeFrom(*source);
  }
}

void PutStoreResponse::MergeFrom(const PutStoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.PutStoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
}

void PutStoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.PutStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutStoreResponse::CopyFrom(const PutStoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.PutStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutStoreResponse::IsInitialized() const {
  return true;
}

void PutStoreResponse::Swap(PutStoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutStoreResponse::InternalSwap(PutStoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutStoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAllStoresRequest::InitAsDefaultInstance() {
  ::schedulerpb::_GetAllStoresRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class GetAllStoresRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const GetAllStoresRequest* msg);
};

const ::schedulerpb::RequestHeader&
GetAllStoresRequest::HasBitSetters::header(const GetAllStoresRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllStoresRequest::kHeaderFieldNumber;
const int GetAllStoresRequest::kExcludeTombstoneStoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllStoresRequest::GetAllStoresRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetAllStoresRequest)
}
GetAllStoresRequest::GetAllStoresRequest(const GetAllStoresRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  exclude_tombstone_stores_ = from.exclude_tombstone_stores_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetAllStoresRequest)
}

void GetAllStoresRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllStoresRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclude_tombstone_stores_) -
      reinterpret_cast<char*>(&header_)) + sizeof(exclude_tombstone_stores_));
}

GetAllStoresRequest::~GetAllStoresRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetAllStoresRequest)
  SharedDtor();
}

void GetAllStoresRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetAllStoresRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllStoresRequest& GetAllStoresRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllStoresRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetAllStoresRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetAllStoresRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  exclude_tombstone_stores_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAllStoresRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exclude_tombstone_stores = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exclude_tombstone_stores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAllStoresRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetAllStoresRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool exclude_tombstone_stores = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_tombstone_stores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetAllStoresRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetAllStoresRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAllStoresRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetAllStoresRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // bool exclude_tombstone_stores = 2;
  if (this->exclude_tombstone_stores() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->exclude_tombstone_stores(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetAllStoresRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllStoresRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetAllStoresRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // bool exclude_tombstone_stores = 2;
  if (this->exclude_tombstone_stores() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->exclude_tombstone_stores(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetAllStoresRequest)
  return target;
}

size_t GetAllStoresRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetAllStoresRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool exclude_tombstone_stores = 2;
  if (this->exclude_tombstone_stores() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllStoresRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetAllStoresRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllStoresRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAllStoresRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetAllStoresRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetAllStoresRequest)
    MergeFrom(*source);
  }
}

void GetAllStoresRequest::MergeFrom(const GetAllStoresRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetAllStoresRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.exclude_tombstone_stores() != 0) {
    set_exclude_tombstone_stores(from.exclude_tombstone_stores());
  }
}

void GetAllStoresRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetAllStoresRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllStoresRequest::CopyFrom(const GetAllStoresRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetAllStoresRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllStoresRequest::IsInitialized() const {
  return true;
}

void GetAllStoresRequest::Swap(GetAllStoresRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllStoresRequest::InternalSwap(GetAllStoresRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(exclude_tombstone_stores_, other->exclude_tombstone_stores_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllStoresRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAllStoresResponse::InitAsDefaultInstance() {
  ::schedulerpb::_GetAllStoresResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class GetAllStoresResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const GetAllStoresResponse* msg);
};

const ::schedulerpb::ResponseHeader&
GetAllStoresResponse::HasBitSetters::header(const GetAllStoresResponse* msg) {
  return *msg->header_;
}
void GetAllStoresResponse::clear_stores() {
  stores_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllStoresResponse::kHeaderFieldNumber;
const int GetAllStoresResponse::kStoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllStoresResponse::GetAllStoresResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetAllStoresResponse)
}
GetAllStoresResponse::GetAllStoresResponse(const GetAllStoresResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stores_(from.stores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetAllStoresResponse)
}

void GetAllStoresResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllStoresResponse_schedulerpb_2eproto.base);
  header_ = nullptr;
}

GetAllStoresResponse::~GetAllStoresResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetAllStoresResponse)
  SharedDtor();
}

void GetAllStoresResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetAllStoresResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllStoresResponse& GetAllStoresResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllStoresResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetAllStoresResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetAllStoresResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stores_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAllStoresResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metapb.Store stores = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAllStoresResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetAllStoresResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Store stores = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetAllStoresResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetAllStoresResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAllStoresResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetAllStoresResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .metapb.Store stores = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stores_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stores(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetAllStoresResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllStoresResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetAllStoresResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // repeated .metapb.Store stores = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stores_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stores(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetAllStoresResponse)
  return target;
}

size_t GetAllStoresResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetAllStoresResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Store stores = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stores(static_cast<int>(i)));
    }
  }

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllStoresResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetAllStoresResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllStoresResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAllStoresResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetAllStoresResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetAllStoresResponse)
    MergeFrom(*source);
  }
}

void GetAllStoresResponse::MergeFrom(const GetAllStoresResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetAllStoresResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stores_.MergeFrom(from.stores_);
  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetAllStoresResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetAllStoresResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllStoresResponse::CopyFrom(const GetAllStoresResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetAllStoresResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllStoresResponse::IsInitialized() const {
  return true;
}

void GetAllStoresResponse::Swap(GetAllStoresResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllStoresResponse::InternalSwap(GetAllStoresResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&stores_)->InternalSwap(CastToBase(&other->stores_));
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllStoresResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRegionRequest::InitAsDefaultInstance() {
  ::schedulerpb::_GetRegionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class GetRegionRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const GetRegionRequest* msg);
};

const ::schedulerpb::RequestHeader&
GetRegionRequest::HasBitSetters::header(const GetRegionRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionRequest::kHeaderFieldNumber;
const int GetRegionRequest::kRegionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionRequest::GetRegionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetRegionRequest)
}
GetRegionRequest::GetRegionRequest(const GetRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.region_key().size() > 0) {
    region_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_key_);
  }
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetRegionRequest)
}

void GetRegionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRegionRequest_schedulerpb_2eproto.base);
  region_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

GetRegionRequest::~GetRegionRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetRegionRequest)
  SharedDtor();
}

void GetRegionRequest::SharedDtor() {
  region_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRegionRequest& GetRegionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRegionRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRegionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes region_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_region_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRegionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetRegionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes region_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRegionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // bytes region_key = 2;
  if (this->region_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->region_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetRegionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRegionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // bytes region_key = 2;
  if (this->region_key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->region_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetRegionRequest)
  return target;
}

size_t GetRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes region_key = 2;
  if (this->region_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->region_key());
  }

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRegionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRegionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetRegionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetRegionRequest)
    MergeFrom(*source);
  }
}

void GetRegionRequest::MergeFrom(const GetRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.region_key().size() > 0) {

    region_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_key_);
  }
  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetRegionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionRequest::CopyFrom(const GetRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionRequest::IsInitialized() const {
  return true;
}

void GetRegionRequest::Swap(GetRegionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionRequest::InternalSwap(GetRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  region_key_.Swap(&other->region_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRegionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRegionResponse::InitAsDefaultInstance() {
  ::schedulerpb::_GetRegionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
  ::schedulerpb::_GetRegionResponse_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::schedulerpb::_GetRegionResponse_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class GetRegionResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const GetRegionResponse* msg);
  static const ::metapb::Region& region(const GetRegionResponse* msg);
  static const ::metapb::Peer& leader(const GetRegionResponse* msg);
};

const ::schedulerpb::ResponseHeader&
GetRegionResponse::HasBitSetters::header(const GetRegionResponse* msg) {
  return *msg->header_;
}
const ::metapb::Region&
GetRegionResponse::HasBitSetters::region(const GetRegionResponse* msg) {
  return *msg->region_;
}
const ::metapb::Peer&
GetRegionResponse::HasBitSetters::leader(const GetRegionResponse* msg) {
  return *msg->leader_;
}
void GetRegionResponse::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
void GetRegionResponse::clear_leader() {
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
}
void GetRegionResponse::clear_slaves() {
  slaves_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionResponse::kHeaderFieldNumber;
const int GetRegionResponse::kRegionFieldNumber;
const int GetRegionResponse::kLeaderFieldNumber;
const int GetRegionResponse::kSlavesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionResponse::GetRegionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetRegionResponse)
}
GetRegionResponse::GetRegionResponse(const GetRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      slaves_(from.slaves_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetRegionResponse)
}

void GetRegionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRegionResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) -
      reinterpret_cast<char*>(&header_)) + sizeof(leader_));
}

GetRegionResponse::~GetRegionResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetRegionResponse)
  SharedDtor();
}

void GetRegionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete leader_;
}

void GetRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRegionResponse& GetRegionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRegionResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slaves_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRegionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Region region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Peer leader = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metapb.Peer slaves = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_slaves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRegionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetRegionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer leader = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Peer slaves = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_slaves()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRegionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region(this), output);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::leader(this), output);
  }

  // repeated .metapb.Peer slaves = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slaves_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->slaves(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetRegionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRegionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region(this), target);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::leader(this), target);
  }

  // repeated .metapb.Peer slaves = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slaves_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->slaves(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetRegionResponse)
  return target;
}

size_t GetRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Peer slaves = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->slaves_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->slaves(static_cast<int>(i)));
    }
  }

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRegionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRegionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetRegionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetRegionResponse)
    MergeFrom(*source);
  }
}

void GetRegionResponse::MergeFrom(const GetRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slaves_.MergeFrom(from.slaves_);
  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
}

void GetRegionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionResponse::CopyFrom(const GetRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionResponse::IsInitialized() const {
  return true;
}

void GetRegionResponse::Swap(GetRegionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionResponse::InternalSwap(GetRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&slaves_)->InternalSwap(CastToBase(&other->slaves_));
  swap(header_, other->header_);
  swap(region_, other->region_);
  swap(leader_, other->leader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRegionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRegionByIDRequest::InitAsDefaultInstance() {
  ::schedulerpb::_GetRegionByIDRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class GetRegionByIDRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const GetRegionByIDRequest* msg);
};

const ::schedulerpb::RequestHeader&
GetRegionByIDRequest::HasBitSetters::header(const GetRegionByIDRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionByIDRequest::kHeaderFieldNumber;
const int GetRegionByIDRequest::kRegionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionByIDRequest::GetRegionByIDRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetRegionByIDRequest)
}
GetRegionByIDRequest::GetRegionByIDRequest(const GetRegionByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetRegionByIDRequest)
}

void GetRegionByIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRegionByIDRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_id_));
}

GetRegionByIDRequest::~GetRegionByIDRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetRegionByIDRequest)
  SharedDtor();
}

void GetRegionByIDRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetRegionByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRegionByIDRequest& GetRegionByIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRegionByIDRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetRegionByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetRegionByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRegionByIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRegionByIDRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetRegionByIDRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 region_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetRegionByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetRegionByIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRegionByIDRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetRegionByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetRegionByIDRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRegionByIDRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetRegionByIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetRegionByIDRequest)
  return target;
}

size_t GetRegionByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetRegionByIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRegionByIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetRegionByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionByIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRegionByIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetRegionByIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetRegionByIDRequest)
    MergeFrom(*source);
  }
}

void GetRegionByIDRequest::MergeFrom(const GetRegionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetRegionByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void GetRegionByIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetRegionByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionByIDRequest::CopyFrom(const GetRegionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetRegionByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionByIDRequest::IsInitialized() const {
  return true;
}

void GetRegionByIDRequest::Swap(GetRegionByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionByIDRequest::InternalSwap(GetRegionByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(region_id_, other->region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRegionByIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScanRegionsRequest::InitAsDefaultInstance() {
  ::schedulerpb::_ScanRegionsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class ScanRegionsRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const ScanRegionsRequest* msg);
};

const ::schedulerpb::RequestHeader&
ScanRegionsRequest::HasBitSetters::header(const ScanRegionsRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanRegionsRequest::kHeaderFieldNumber;
const int ScanRegionsRequest::kStartKeyFieldNumber;
const int ScanRegionsRequest::kLimitFieldNumber;
const int ScanRegionsRequest::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanRegionsRequest::ScanRegionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.ScanRegionsRequest)
}
ScanRegionsRequest::ScanRegionsRequest(const ScanRegionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.ScanRegionsRequest)
}

void ScanRegionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanRegionsRequest_schedulerpb_2eproto.base);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&header_)) + sizeof(limit_));
}

ScanRegionsRequest::~ScanRegionsRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.ScanRegionsRequest)
  SharedDtor();
}

void ScanRegionsRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ScanRegionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanRegionsRequest& ScanRegionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanRegionsRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void ScanRegionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.ScanRegionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  limit_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScanRegionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes start_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_start_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes end_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_end_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScanRegionsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.ScanRegionsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes start_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes end_key = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.ScanRegionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.ScanRegionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScanRegionsRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.ScanRegionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.ScanRegionsRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanRegionsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.ScanRegionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.ScanRegionsRequest)
  return target;
}

size_t ScanRegionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.ScanRegionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanRegionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.ScanRegionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanRegionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanRegionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.ScanRegionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.ScanRegionsRequest)
    MergeFrom(*source);
  }
}

void ScanRegionsRequest::MergeFrom(const ScanRegionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.ScanRegionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void ScanRegionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.ScanRegionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRegionsRequest::CopyFrom(const ScanRegionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.ScanRegionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRegionsRequest::IsInitialized() const {
  return true;
}

void ScanRegionsRequest::Swap(ScanRegionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanRegionsRequest::InternalSwap(ScanRegionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_key_.Swap(&other->start_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_key_.Swap(&other->end_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanRegionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScanRegionsResponse::InitAsDefaultInstance() {
  ::schedulerpb::_ScanRegionsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class ScanRegionsResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const ScanRegionsResponse* msg);
};

const ::schedulerpb::ResponseHeader&
ScanRegionsResponse::HasBitSetters::header(const ScanRegionsResponse* msg) {
  return *msg->header_;
}
void ScanRegionsResponse::clear_regions() {
  regions_.Clear();
}
void ScanRegionsResponse::clear_leaders() {
  leaders_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanRegionsResponse::kHeaderFieldNumber;
const int ScanRegionsResponse::kRegionsFieldNumber;
const int ScanRegionsResponse::kLeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanRegionsResponse::ScanRegionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.ScanRegionsResponse)
}
ScanRegionsResponse::ScanRegionsResponse(const ScanRegionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      regions_(from.regions_),
      leaders_(from.leaders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.ScanRegionsResponse)
}

void ScanRegionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanRegionsResponse_schedulerpb_2eproto.base);
  header_ = nullptr;
}

ScanRegionsResponse::~ScanRegionsResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.ScanRegionsResponse)
  SharedDtor();
}

void ScanRegionsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ScanRegionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanRegionsResponse& ScanRegionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanRegionsResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void ScanRegionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.ScanRegionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  leaders_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScanRegionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metapb.Region regions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .metapb.Peer leaders = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_leaders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScanRegionsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.ScanRegionsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Region regions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Peer leaders = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_leaders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.ScanRegionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.ScanRegionsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScanRegionsResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.ScanRegionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->regions(static_cast<int>(i)),
      output);
  }

  // repeated .metapb.Peer leaders = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leaders_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->leaders(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.ScanRegionsResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanRegionsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.ScanRegionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->regions(static_cast<int>(i)), target);
  }

  // repeated .metapb.Peer leaders = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leaders_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->leaders(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.ScanRegionsResponse)
  return target;
}

size_t ScanRegionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.ScanRegionsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Region regions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->regions(static_cast<int>(i)));
    }
  }

  // repeated .metapb.Peer leaders = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->leaders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->leaders(static_cast<int>(i)));
    }
  }

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanRegionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.ScanRegionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanRegionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanRegionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.ScanRegionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.ScanRegionsResponse)
    MergeFrom(*source);
  }
}

void ScanRegionsResponse::MergeFrom(const ScanRegionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.ScanRegionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  leaders_.MergeFrom(from.leaders_);
  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ScanRegionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.ScanRegionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRegionsResponse::CopyFrom(const ScanRegionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.ScanRegionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRegionsResponse::IsInitialized() const {
  return true;
}

void ScanRegionsResponse::Swap(ScanRegionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanRegionsResponse::InternalSwap(ScanRegionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&regions_)->InternalSwap(CastToBase(&other->regions_));
  CastToBase(&leaders_)->InternalSwap(CastToBase(&other->leaders_));
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanRegionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetClusterConfigRequest::InitAsDefaultInstance() {
  ::schedulerpb::_GetClusterConfigRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class GetClusterConfigRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const GetClusterConfigRequest* msg);
};

const ::schedulerpb::RequestHeader&
GetClusterConfigRequest::HasBitSetters::header(const GetClusterConfigRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterConfigRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterConfigRequest::GetClusterConfigRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetClusterConfigRequest)
}
GetClusterConfigRequest::GetClusterConfigRequest(const GetClusterConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetClusterConfigRequest)
}

void GetClusterConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetClusterConfigRequest_schedulerpb_2eproto.base);
  header_ = nullptr;
}

GetClusterConfigRequest::~GetClusterConfigRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetClusterConfigRequest)
  SharedDtor();
}

void GetClusterConfigRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetClusterConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClusterConfigRequest& GetClusterConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetClusterConfigRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetClusterConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetClusterConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetClusterConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetClusterConfigRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetClusterConfigRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetClusterConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetClusterConfigRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetClusterConfigRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetClusterConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetClusterConfigRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetClusterConfigRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetClusterConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetClusterConfigRequest)
  return target;
}

size_t GetClusterConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetClusterConfigRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClusterConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetClusterConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetClusterConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetClusterConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetClusterConfigRequest)
    MergeFrom(*source);
  }
}

void GetClusterConfigRequest::MergeFrom(const GetClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetClusterConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetClusterConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterConfigRequest::CopyFrom(const GetClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterConfigRequest::IsInitialized() const {
  return true;
}

void GetClusterConfigRequest::Swap(GetClusterConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterConfigRequest::InternalSwap(GetClusterConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClusterConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetClusterConfigResponse::InitAsDefaultInstance() {
  ::schedulerpb::_GetClusterConfigResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
  ::schedulerpb::_GetClusterConfigResponse_default_instance_._instance.get_mutable()->cluster_ = const_cast< ::metapb::Cluster*>(
      ::metapb::Cluster::internal_default_instance());
}
class GetClusterConfigResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const GetClusterConfigResponse* msg);
  static const ::metapb::Cluster& cluster(const GetClusterConfigResponse* msg);
};

const ::schedulerpb::ResponseHeader&
GetClusterConfigResponse::HasBitSetters::header(const GetClusterConfigResponse* msg) {
  return *msg->header_;
}
const ::metapb::Cluster&
GetClusterConfigResponse::HasBitSetters::cluster(const GetClusterConfigResponse* msg) {
  return *msg->cluster_;
}
void GetClusterConfigResponse::clear_cluster() {
  if (GetArenaNoVirtual() == nullptr && cluster_ != nullptr) {
    delete cluster_;
  }
  cluster_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterConfigResponse::kHeaderFieldNumber;
const int GetClusterConfigResponse::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterConfigResponse::GetClusterConfigResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetClusterConfigResponse)
}
GetClusterConfigResponse::GetClusterConfigResponse(const GetClusterConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_cluster()) {
    cluster_ = new ::metapb::Cluster(*from.cluster_);
  } else {
    cluster_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetClusterConfigResponse)
}

void GetClusterConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetClusterConfigResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_) -
      reinterpret_cast<char*>(&header_)) + sizeof(cluster_));
}

GetClusterConfigResponse::~GetClusterConfigResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetClusterConfigResponse)
  SharedDtor();
}

void GetClusterConfigResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete cluster_;
}

void GetClusterConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClusterConfigResponse& GetClusterConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetClusterConfigResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetClusterConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetClusterConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cluster_ != nullptr) {
    delete cluster_;
  }
  cluster_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetClusterConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Cluster cluster = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_cluster(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetClusterConfigResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetClusterConfigResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Cluster cluster = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetClusterConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetClusterConfigResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetClusterConfigResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetClusterConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cluster(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetClusterConfigResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetClusterConfigResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetClusterConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cluster(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetClusterConfigResponse)
  return target;
}

size_t GetClusterConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetClusterConfigResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cluster_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClusterConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetClusterConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetClusterConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetClusterConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetClusterConfigResponse)
    MergeFrom(*source);
  }
}

void GetClusterConfigResponse::MergeFrom(const GetClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetClusterConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_cluster()) {
    mutable_cluster()->::metapb::Cluster::MergeFrom(from.cluster());
  }
}

void GetClusterConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterConfigResponse::CopyFrom(const GetClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterConfigResponse::IsInitialized() const {
  return true;
}

void GetClusterConfigResponse::Swap(GetClusterConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterConfigResponse::InternalSwap(GetClusterConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(cluster_, other->cluster_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClusterConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutClusterConfigRequest::InitAsDefaultInstance() {
  ::schedulerpb::_PutClusterConfigRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
  ::schedulerpb::_PutClusterConfigRequest_default_instance_._instance.get_mutable()->cluster_ = const_cast< ::metapb::Cluster*>(
      ::metapb::Cluster::internal_default_instance());
}
class PutClusterConfigRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const PutClusterConfigRequest* msg);
  static const ::metapb::Cluster& cluster(const PutClusterConfigRequest* msg);
};

const ::schedulerpb::RequestHeader&
PutClusterConfigRequest::HasBitSetters::header(const PutClusterConfigRequest* msg) {
  return *msg->header_;
}
const ::metapb::Cluster&
PutClusterConfigRequest::HasBitSetters::cluster(const PutClusterConfigRequest* msg) {
  return *msg->cluster_;
}
void PutClusterConfigRequest::clear_cluster() {
  if (GetArenaNoVirtual() == nullptr && cluster_ != nullptr) {
    delete cluster_;
  }
  cluster_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutClusterConfigRequest::kHeaderFieldNumber;
const int PutClusterConfigRequest::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutClusterConfigRequest::PutClusterConfigRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.PutClusterConfigRequest)
}
PutClusterConfigRequest::PutClusterConfigRequest(const PutClusterConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_cluster()) {
    cluster_ = new ::metapb::Cluster(*from.cluster_);
  } else {
    cluster_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.PutClusterConfigRequest)
}

void PutClusterConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutClusterConfigRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_) -
      reinterpret_cast<char*>(&header_)) + sizeof(cluster_));
}

PutClusterConfigRequest::~PutClusterConfigRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.PutClusterConfigRequest)
  SharedDtor();
}

void PutClusterConfigRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete cluster_;
}

void PutClusterConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutClusterConfigRequest& PutClusterConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutClusterConfigRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void PutClusterConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.PutClusterConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cluster_ != nullptr) {
    delete cluster_;
  }
  cluster_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutClusterConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Cluster cluster = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_cluster(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutClusterConfigRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.PutClusterConfigRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Cluster cluster = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.PutClusterConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.PutClusterConfigRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutClusterConfigRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.PutClusterConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cluster(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.PutClusterConfigRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PutClusterConfigRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.PutClusterConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cluster(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.PutClusterConfigRequest)
  return target;
}

size_t PutClusterConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.PutClusterConfigRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cluster_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutClusterConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.PutClusterConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutClusterConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutClusterConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.PutClusterConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.PutClusterConfigRequest)
    MergeFrom(*source);
  }
}

void PutClusterConfigRequest::MergeFrom(const PutClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.PutClusterConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_cluster()) {
    mutable_cluster()->::metapb::Cluster::MergeFrom(from.cluster());
  }
}

void PutClusterConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.PutClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutClusterConfigRequest::CopyFrom(const PutClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.PutClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutClusterConfigRequest::IsInitialized() const {
  return true;
}

void PutClusterConfigRequest::Swap(PutClusterConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutClusterConfigRequest::InternalSwap(PutClusterConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(cluster_, other->cluster_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutClusterConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutClusterConfigResponse::InitAsDefaultInstance() {
  ::schedulerpb::_PutClusterConfigResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class PutClusterConfigResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const PutClusterConfigResponse* msg);
};

const ::schedulerpb::ResponseHeader&
PutClusterConfigResponse::HasBitSetters::header(const PutClusterConfigResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutClusterConfigResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutClusterConfigResponse::PutClusterConfigResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.PutClusterConfigResponse)
}
PutClusterConfigResponse::PutClusterConfigResponse(const PutClusterConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.PutClusterConfigResponse)
}

void PutClusterConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutClusterConfigResponse_schedulerpb_2eproto.base);
  header_ = nullptr;
}

PutClusterConfigResponse::~PutClusterConfigResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.PutClusterConfigResponse)
  SharedDtor();
}

void PutClusterConfigResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void PutClusterConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutClusterConfigResponse& PutClusterConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutClusterConfigResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void PutClusterConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.PutClusterConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutClusterConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutClusterConfigResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.PutClusterConfigResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.PutClusterConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.PutClusterConfigResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutClusterConfigResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.PutClusterConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.PutClusterConfigResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PutClusterConfigResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.PutClusterConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.PutClusterConfigResponse)
  return target;
}

size_t PutClusterConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.PutClusterConfigResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutClusterConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.PutClusterConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutClusterConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutClusterConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.PutClusterConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.PutClusterConfigResponse)
    MergeFrom(*source);
  }
}

void PutClusterConfigResponse::MergeFrom(const PutClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.PutClusterConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
}

void PutClusterConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.PutClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutClusterConfigResponse::CopyFrom(const PutClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.PutClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutClusterConfigResponse::IsInitialized() const {
  return true;
}

void PutClusterConfigResponse::Swap(PutClusterConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutClusterConfigResponse::InternalSwap(PutClusterConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutClusterConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Member::InitAsDefaultInstance() {
}
class Member::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Member::kNameFieldNumber;
const int Member::kMemberIdFieldNumber;
const int Member::kPeerUrlsFieldNumber;
const int Member::kClientUrlsFieldNumber;
const int Member::kLeaderPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Member::Member()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.Member)
}
Member::Member(const Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peer_urls_(from.peer_urls_),
      client_urls_(from.client_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&member_id_, &from.member_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_priority_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(leader_priority_));
  // @@protoc_insertion_point(copy_constructor:schedulerpb.Member)
}

void Member::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Member_schedulerpb_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_priority_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(leader_priority_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:schedulerpb.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Member& Member::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Member_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_urls_.Clear();
  client_urls_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_priority_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(leader_priority_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "schedulerpb.Member.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string peer_urls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_peer_urls(), ptr, ctx, "schedulerpb.Member.peer_urls");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated string client_urls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_client_urls(), ptr, ctx, "schedulerpb.Member.client_urls");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // int32 leader_priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          leader_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Member::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.Member)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "schedulerpb.Member.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 member_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string peer_urls = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_peer_urls()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->peer_urls(this->peer_urls_size() - 1).data(),
            static_cast<int>(this->peer_urls(this->peer_urls_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "schedulerpb.Member.peer_urls"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string client_urls = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_client_urls()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_urls(this->client_urls_size() - 1).data(),
            static_cast<int>(this->client_urls(this->client_urls_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "schedulerpb.Member.client_urls"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 leader_priority = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Member::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.Member.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->member_id(), output);
  }

  // repeated string peer_urls = 3;
  for (int i = 0, n = this->peer_urls_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->peer_urls(i).data(), static_cast<int>(this->peer_urls(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.Member.peer_urls");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->peer_urls(i), output);
  }

  // repeated string client_urls = 4;
  for (int i = 0, n = this->client_urls_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_urls(i).data(), static_cast<int>(this->client_urls(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.Member.client_urls");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->client_urls(i), output);
  }

  // int32 leader_priority = 5;
  if (this->leader_priority() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->leader_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.Member)
}

::PROTOBUF_NAMESPACE_ID::uint8* Member::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.Member.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->member_id(), target);
  }

  // repeated string peer_urls = 3;
  for (int i = 0, n = this->peer_urls_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->peer_urls(i).data(), static_cast<int>(this->peer_urls(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.Member.peer_urls");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->peer_urls(i), target);
  }

  // repeated string client_urls = 4;
  for (int i = 0, n = this->client_urls_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_urls(i).data(), static_cast<int>(this->client_urls(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.Member.client_urls");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->client_urls(i), target);
  }

  // int32 leader_priority = 5;
  if (this->leader_priority() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->leader_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.Member)
  return target;
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string peer_urls = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->peer_urls_size());
  for (int i = 0, n = this->peer_urls_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->peer_urls(i));
  }

  // repeated string client_urls = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->client_urls_size());
  for (int i = 0, n = this->client_urls_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->client_urls(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->member_id());
  }

  // int32 leader_priority = 5;
  if (this->leader_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->leader_priority());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.Member)
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peer_urls_.MergeFrom(from.peer_urls_);
  client_urls_.MergeFrom(from.client_urls_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.member_id() != 0) {
    set_member_id(from.member_id());
  }
  if (from.leader_priority() != 0) {
    set_leader_priority(from.leader_priority());
  }
}

void Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  return true;
}

void Member::Swap(Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Member::InternalSwap(Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peer_urls_.InternalSwap(CastToBase(&other->peer_urls_));
  client_urls_.InternalSwap(CastToBase(&other->client_urls_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(member_id_, other->member_id_);
  swap(leader_priority_, other->leader_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMembersRequest::InitAsDefaultInstance() {
  ::schedulerpb::_GetMembersRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class GetMembersRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const GetMembersRequest* msg);
};

const ::schedulerpb::RequestHeader&
GetMembersRequest::HasBitSetters::header(const GetMembersRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMembersRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMembersRequest::GetMembersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetMembersRequest)
}
GetMembersRequest::GetMembersRequest(const GetMembersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetMembersRequest)
}

void GetMembersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMembersRequest_schedulerpb_2eproto.base);
  header_ = nullptr;
}

GetMembersRequest::~GetMembersRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetMembersRequest)
  SharedDtor();
}

void GetMembersRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetMembersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMembersRequest& GetMembersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMembersRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetMembersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetMembersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMembersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMembersRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetMembersRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetMembersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetMembersRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMembersRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetMembersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetMembersRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMembersRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetMembersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetMembersRequest)
  return target;
}

size_t GetMembersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetMembersRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMembersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetMembersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMembersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMembersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetMembersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetMembersRequest)
    MergeFrom(*source);
  }
}

void GetMembersRequest::MergeFrom(const GetMembersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetMembersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetMembersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMembersRequest::CopyFrom(const GetMembersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMembersRequest::IsInitialized() const {
  return true;
}

void GetMembersRequest::Swap(GetMembersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMembersRequest::InternalSwap(GetMembersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMembersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMembersResponse::InitAsDefaultInstance() {
  ::schedulerpb::_GetMembersResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
  ::schedulerpb::_GetMembersResponse_default_instance_._instance.get_mutable()->leader_ = const_cast< ::schedulerpb::Member*>(
      ::schedulerpb::Member::internal_default_instance());
  ::schedulerpb::_GetMembersResponse_default_instance_._instance.get_mutable()->etcd_leader_ = const_cast< ::schedulerpb::Member*>(
      ::schedulerpb::Member::internal_default_instance());
}
class GetMembersResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const GetMembersResponse* msg);
  static const ::schedulerpb::Member& leader(const GetMembersResponse* msg);
  static const ::schedulerpb::Member& etcd_leader(const GetMembersResponse* msg);
};

const ::schedulerpb::ResponseHeader&
GetMembersResponse::HasBitSetters::header(const GetMembersResponse* msg) {
  return *msg->header_;
}
const ::schedulerpb::Member&
GetMembersResponse::HasBitSetters::leader(const GetMembersResponse* msg) {
  return *msg->leader_;
}
const ::schedulerpb::Member&
GetMembersResponse::HasBitSetters::etcd_leader(const GetMembersResponse* msg) {
  return *msg->etcd_leader_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMembersResponse::kHeaderFieldNumber;
const int GetMembersResponse::kMembersFieldNumber;
const int GetMembersResponse::kLeaderFieldNumber;
const int GetMembersResponse::kEtcdLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMembersResponse::GetMembersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetMembersResponse)
}
GetMembersResponse::GetMembersResponse(const GetMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_leader()) {
    leader_ = new ::schedulerpb::Member(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  if (from.has_etcd_leader()) {
    etcd_leader_ = new ::schedulerpb::Member(*from.etcd_leader_);
  } else {
    etcd_leader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetMembersResponse)
}

void GetMembersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMembersResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&etcd_leader_) -
      reinterpret_cast<char*>(&header_)) + sizeof(etcd_leader_));
}

GetMembersResponse::~GetMembersResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetMembersResponse)
  SharedDtor();
}

void GetMembersResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete leader_;
  if (this != internal_default_instance()) delete etcd_leader_;
}

void GetMembersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMembersResponse& GetMembersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMembersResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetMembersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && etcd_leader_ != nullptr) {
    delete etcd_leader_;
  }
  etcd_leader_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMembersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .schedulerpb.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.Member leader = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.Member etcd_leader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_etcd_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMembersResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetMembersResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schedulerpb.Member members = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.Member leader = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.Member etcd_leader = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_etcd_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetMembersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetMembersResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMembersResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetMembersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .schedulerpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->members(static_cast<int>(i)),
      output);
  }

  // .schedulerpb.Member leader = 3;
  if (this->has_leader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::leader(this), output);
  }

  // .schedulerpb.Member etcd_leader = 4;
  if (this->has_etcd_leader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::etcd_leader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetMembersResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMembersResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetMembersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // repeated .schedulerpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->members(static_cast<int>(i)), target);
  }

  // .schedulerpb.Member leader = 3;
  if (this->has_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::leader(this), target);
  }

  // .schedulerpb.Member etcd_leader = 4;
  if (this->has_etcd_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::etcd_leader(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetMembersResponse)
  return target;
}

size_t GetMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetMembersResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .schedulerpb.Member members = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .schedulerpb.Member leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // .schedulerpb.Member etcd_leader = 4;
  if (this->has_etcd_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *etcd_leader_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMembersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMembersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMembersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetMembersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetMembersResponse)
    MergeFrom(*source);
  }
}

void GetMembersResponse::MergeFrom(const GetMembersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_leader()) {
    mutable_leader()->::schedulerpb::Member::MergeFrom(from.leader());
  }
  if (from.has_etcd_leader()) {
    mutable_etcd_leader()->::schedulerpb::Member::MergeFrom(from.etcd_leader());
  }
}

void GetMembersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMembersResponse::CopyFrom(const GetMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMembersResponse::IsInitialized() const {
  return true;
}

void GetMembersResponse::Swap(GetMembersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMembersResponse::InternalSwap(GetMembersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  swap(header_, other->header_);
  swap(leader_, other->leader_);
  swap(etcd_leader_, other->etcd_leader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMembersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionHeartbeatRequest::InitAsDefaultInstance() {
  ::schedulerpb::_RegionHeartbeatRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
  ::schedulerpb::_RegionHeartbeatRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::schedulerpb::_RegionHeartbeatRequest_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class RegionHeartbeatRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const RegionHeartbeatRequest* msg);
  static const ::metapb::Region& region(const RegionHeartbeatRequest* msg);
  static const ::metapb::Peer& leader(const RegionHeartbeatRequest* msg);
};

const ::schedulerpb::RequestHeader&
RegionHeartbeatRequest::HasBitSetters::header(const RegionHeartbeatRequest* msg) {
  return *msg->header_;
}
const ::metapb::Region&
RegionHeartbeatRequest::HasBitSetters::region(const RegionHeartbeatRequest* msg) {
  return *msg->region_;
}
const ::metapb::Peer&
RegionHeartbeatRequest::HasBitSetters::leader(const RegionHeartbeatRequest* msg) {
  return *msg->leader_;
}
void RegionHeartbeatRequest::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
void RegionHeartbeatRequest::clear_leader() {
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
}
void RegionHeartbeatRequest::clear_pending_peers() {
  pending_peers_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionHeartbeatRequest::kHeaderFieldNumber;
const int RegionHeartbeatRequest::kRegionFieldNumber;
const int RegionHeartbeatRequest::kLeaderFieldNumber;
const int RegionHeartbeatRequest::kPendingPeersFieldNumber;
const int RegionHeartbeatRequest::kApproximateSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionHeartbeatRequest::RegionHeartbeatRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.RegionHeartbeatRequest)
}
RegionHeartbeatRequest::RegionHeartbeatRequest(const RegionHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pending_peers_(from.pending_peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  approximate_size_ = from.approximate_size_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.RegionHeartbeatRequest)
}

void RegionHeartbeatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionHeartbeatRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approximate_size_) -
      reinterpret_cast<char*>(&header_)) + sizeof(approximate_size_));
}

RegionHeartbeatRequest::~RegionHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.RegionHeartbeatRequest)
  SharedDtor();
}

void RegionHeartbeatRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete leader_;
}

void RegionHeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionHeartbeatRequest& RegionHeartbeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionHeartbeatRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void RegionHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.RegionHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_peers_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  approximate_size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionHeartbeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Region region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Peer leader = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metapb.Peer pending_peers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pending_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // uint64 approximate_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          approximate_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionHeartbeatRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.RegionHeartbeatRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer leader = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Peer pending_peers = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pending_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 approximate_size = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &approximate_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.RegionHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.RegionHeartbeatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionHeartbeatRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.RegionHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region(this), output);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::leader(this), output);
  }

  // repeated .metapb.Peer pending_peers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_peers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->pending_peers(static_cast<int>(i)),
      output);
  }

  // uint64 approximate_size = 10;
  if (this->approximate_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->approximate_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.RegionHeartbeatRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.RegionHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region(this), target);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::leader(this), target);
  }

  // repeated .metapb.Peer pending_peers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_peers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->pending_peers(static_cast<int>(i)), target);
  }

  // uint64 approximate_size = 10;
  if (this->approximate_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->approximate_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.RegionHeartbeatRequest)
  return target;
}

size_t RegionHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.RegionHeartbeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Peer pending_peers = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pending_peers(static_cast<int>(i)));
    }
  }

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // uint64 approximate_size = 10;
  if (this->approximate_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->approximate_size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionHeartbeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.RegionHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionHeartbeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionHeartbeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.RegionHeartbeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.RegionHeartbeatRequest)
    MergeFrom(*source);
  }
}

void RegionHeartbeatRequest::MergeFrom(const RegionHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.RegionHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_peers_.MergeFrom(from.pending_peers_);
  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
  if (from.approximate_size() != 0) {
    set_approximate_size(from.approximate_size());
  }
}

void RegionHeartbeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.RegionHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionHeartbeatRequest::CopyFrom(const RegionHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.RegionHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionHeartbeatRequest::IsInitialized() const {
  return true;
}

void RegionHeartbeatRequest::Swap(RegionHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionHeartbeatRequest::InternalSwap(RegionHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pending_peers_)->InternalSwap(CastToBase(&other->pending_peers_));
  swap(header_, other->header_);
  swap(region_, other->region_);
  swap(leader_, other->leader_);
  swap(approximate_size_, other->approximate_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionHeartbeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangePeer::InitAsDefaultInstance() {
  ::schedulerpb::_ChangePeer_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class ChangePeer::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const ChangePeer* msg);
};

const ::metapb::Peer&
ChangePeer::HasBitSetters::peer(const ChangePeer* msg) {
  return *msg->peer_;
}
void ChangePeer::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeer::kPeerFieldNumber;
const int ChangePeer::kChangeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeer::ChangePeer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.ChangePeer)
}
ChangePeer::ChangePeer(const ChangePeer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  change_type_ = from.change_type_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.ChangePeer)
}

void ChangePeer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangePeer_schedulerpb_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_type_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(change_type_));
}

ChangePeer::~ChangePeer() {
  // @@protoc_insertion_point(destructor:schedulerpb.ChangePeer)
  SharedDtor();
}

void ChangePeer::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void ChangePeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePeer& ChangePeer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangePeer_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void ChangePeer::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.ChangePeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  change_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangePeer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .metapb.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .eraftpb.ConfChangeType change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_change_type(static_cast<::eraftpb::ConfChangeType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangePeer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.ChangePeer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eraftpb.ConfChangeType change_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.ChangePeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.ChangePeer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangePeer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.ChangePeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::peer(this), output);
  }

  // .eraftpb.ConfChangeType change_type = 2;
  if (this->change_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.ChangePeer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePeer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.ChangePeer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::peer(this), target);
  }

  // .eraftpb.ConfChangeType change_type = 2;
  if (this->change_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->change_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.ChangePeer)
  return target;
}

size_t ChangePeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.ChangePeer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .eraftpb.ConfChangeType change_type = 2;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->change_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePeer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.ChangePeer)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePeer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangePeer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.ChangePeer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.ChangePeer)
    MergeFrom(*source);
  }
}

void ChangePeer::MergeFrom(const ChangePeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.ChangePeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
}

void ChangePeer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.ChangePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeer::CopyFrom(const ChangePeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.ChangePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeer::IsInitialized() const {
  return true;
}

void ChangePeer::Swap(ChangePeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeer::InternalSwap(ChangePeer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
  swap(change_type_, other->change_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePeer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferLeader::InitAsDefaultInstance() {
  ::schedulerpb::_TransferLeader_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class TransferLeader::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const TransferLeader* msg);
};

const ::metapb::Peer&
TransferLeader::HasBitSetters::peer(const TransferLeader* msg) {
  return *msg->peer_;
}
void TransferLeader::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeader::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeader::TransferLeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.TransferLeader)
}
TransferLeader::TransferLeader(const TransferLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.TransferLeader)
}

void TransferLeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferLeader_schedulerpb_2eproto.base);
  peer_ = nullptr;
}

TransferLeader::~TransferLeader() {
  // @@protoc_insertion_point(destructor:schedulerpb.TransferLeader)
  SharedDtor();
}

void TransferLeader::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void TransferLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferLeader& TransferLeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferLeader_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void TransferLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.TransferLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .metapb.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferLeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.TransferLeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.TransferLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.TransferLeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferLeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.TransferLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::peer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.TransferLeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferLeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.TransferLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::peer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.TransferLeader)
  return target;
}

size_t TransferLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.TransferLeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferLeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.TransferLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferLeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferLeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.TransferLeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.TransferLeader)
    MergeFrom(*source);
  }
}

void TransferLeader::MergeFrom(const TransferLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.TransferLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void TransferLeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.TransferLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeader::CopyFrom(const TransferLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.TransferLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeader::IsInitialized() const {
  return true;
}

void TransferLeader::Swap(TransferLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeader::InternalSwap(TransferLeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferLeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionHeartbeatResponse::InitAsDefaultInstance() {
  ::schedulerpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
  ::schedulerpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->change_peer_ = const_cast< ::schedulerpb::ChangePeer*>(
      ::schedulerpb::ChangePeer::internal_default_instance());
  ::schedulerpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->transfer_leader_ = const_cast< ::schedulerpb::TransferLeader*>(
      ::schedulerpb::TransferLeader::internal_default_instance());
  ::schedulerpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
  ::schedulerpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->target_peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class RegionHeartbeatResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const RegionHeartbeatResponse* msg);
  static const ::schedulerpb::ChangePeer& change_peer(const RegionHeartbeatResponse* msg);
  static const ::schedulerpb::TransferLeader& transfer_leader(const RegionHeartbeatResponse* msg);
  static const ::metapb::RegionEpoch& region_epoch(const RegionHeartbeatResponse* msg);
  static const ::metapb::Peer& target_peer(const RegionHeartbeatResponse* msg);
};

const ::schedulerpb::ResponseHeader&
RegionHeartbeatResponse::HasBitSetters::header(const RegionHeartbeatResponse* msg) {
  return *msg->header_;
}
const ::schedulerpb::ChangePeer&
RegionHeartbeatResponse::HasBitSetters::change_peer(const RegionHeartbeatResponse* msg) {
  return *msg->change_peer_;
}
const ::schedulerpb::TransferLeader&
RegionHeartbeatResponse::HasBitSetters::transfer_leader(const RegionHeartbeatResponse* msg) {
  return *msg->transfer_leader_;
}
const ::metapb::RegionEpoch&
RegionHeartbeatResponse::HasBitSetters::region_epoch(const RegionHeartbeatResponse* msg) {
  return *msg->region_epoch_;
}
const ::metapb::Peer&
RegionHeartbeatResponse::HasBitSetters::target_peer(const RegionHeartbeatResponse* msg) {
  return *msg->target_peer_;
}
void RegionHeartbeatResponse::clear_region_epoch() {
  if (GetArenaNoVirtual() == nullptr && region_epoch_ != nullptr) {
    delete region_epoch_;
  }
  region_epoch_ = nullptr;
}
void RegionHeartbeatResponse::clear_target_peer() {
  if (GetArenaNoVirtual() == nullptr && target_peer_ != nullptr) {
    delete target_peer_;
  }
  target_peer_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionHeartbeatResponse::kHeaderFieldNumber;
const int RegionHeartbeatResponse::kChangePeerFieldNumber;
const int RegionHeartbeatResponse::kTransferLeaderFieldNumber;
const int RegionHeartbeatResponse::kRegionIdFieldNumber;
const int RegionHeartbeatResponse::kRegionEpochFieldNumber;
const int RegionHeartbeatResponse::kTargetPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionHeartbeatResponse::RegionHeartbeatResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.RegionHeartbeatResponse)
}
RegionHeartbeatResponse::RegionHeartbeatResponse(const RegionHeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_change_peer()) {
    change_peer_ = new ::schedulerpb::ChangePeer(*from.change_peer_);
  } else {
    change_peer_ = nullptr;
  }
  if (from.has_transfer_leader()) {
    transfer_leader_ = new ::schedulerpb::TransferLeader(*from.transfer_leader_);
  } else {
    transfer_leader_ = nullptr;
  }
  if (from.has_region_epoch()) {
    region_epoch_ = new ::metapb::RegionEpoch(*from.region_epoch_);
  } else {
    region_epoch_ = nullptr;
  }
  if (from.has_target_peer()) {
    target_peer_ = new ::metapb::Peer(*from.target_peer_);
  } else {
    target_peer_ = nullptr;
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.RegionHeartbeatResponse)
}

void RegionHeartbeatResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionHeartbeatResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_id_));
}

RegionHeartbeatResponse::~RegionHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.RegionHeartbeatResponse)
  SharedDtor();
}

void RegionHeartbeatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete change_peer_;
  if (this != internal_default_instance()) delete transfer_leader_;
  if (this != internal_default_instance()) delete region_epoch_;
  if (this != internal_default_instance()) delete target_peer_;
}

void RegionHeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionHeartbeatResponse& RegionHeartbeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionHeartbeatResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void RegionHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.RegionHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && change_peer_ != nullptr) {
    delete change_peer_;
  }
  change_peer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transfer_leader_ != nullptr) {
    delete transfer_leader_;
  }
  transfer_leader_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_epoch_ != nullptr) {
    delete region_epoch_;
  }
  region_epoch_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && target_peer_ != nullptr) {
    delete target_peer_;
  }
  target_peer_ = nullptr;
  region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionHeartbeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.ChangePeer change_peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_change_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.TransferLeader transfer_leader = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_transfer_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 region_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.RegionEpoch region_epoch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_region_epoch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Peer target_peer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_target_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionHeartbeatResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.RegionHeartbeatResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.ChangePeer change_peer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.TransferLeader transfer_leader = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 region_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer target_peer = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.RegionHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.RegionHeartbeatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionHeartbeatResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.RegionHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .schedulerpb.ChangePeer change_peer = 2;
  if (this->has_change_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::change_peer(this), output);
  }

  // .schedulerpb.TransferLeader transfer_leader = 3;
  if (this->has_transfer_leader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::transfer_leader(this), output);
  }

  // uint64 region_id = 4;
  if (this->region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->region_id(), output);
  }

  // .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::region_epoch(this), output);
  }

  // .metapb.Peer target_peer = 6;
  if (this->has_target_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::target_peer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.RegionHeartbeatResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.RegionHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .schedulerpb.ChangePeer change_peer = 2;
  if (this->has_change_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::change_peer(this), target);
  }

  // .schedulerpb.TransferLeader transfer_leader = 3;
  if (this->has_transfer_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::transfer_leader(this), target);
  }

  // uint64 region_id = 4;
  if (this->region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->region_id(), target);
  }

  // .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::region_epoch(this), target);
  }

  // .metapb.Peer target_peer = 6;
  if (this->has_target_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::target_peer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.RegionHeartbeatResponse)
  return target;
}

size_t RegionHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.RegionHeartbeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .schedulerpb.ChangePeer change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *change_peer_);
  }

  // .schedulerpb.TransferLeader transfer_leader = 3;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transfer_leader_);
  }

  // .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_epoch_);
  }

  // .metapb.Peer target_peer = 6;
  if (this->has_target_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_peer_);
  }

  // uint64 region_id = 4;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionHeartbeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.RegionHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionHeartbeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionHeartbeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.RegionHeartbeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.RegionHeartbeatResponse)
    MergeFrom(*source);
  }
}

void RegionHeartbeatResponse::MergeFrom(const RegionHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.RegionHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_change_peer()) {
    mutable_change_peer()->::schedulerpb::ChangePeer::MergeFrom(from.change_peer());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::schedulerpb::TransferLeader::MergeFrom(from.transfer_leader());
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.has_target_peer()) {
    mutable_target_peer()->::metapb::Peer::MergeFrom(from.target_peer());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void RegionHeartbeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.RegionHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionHeartbeatResponse::CopyFrom(const RegionHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.RegionHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionHeartbeatResponse::IsInitialized() const {
  return true;
}

void RegionHeartbeatResponse::Swap(RegionHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionHeartbeatResponse::InternalSwap(RegionHeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(change_peer_, other->change_peer_);
  swap(transfer_leader_, other->transfer_leader_);
  swap(region_epoch_, other->region_epoch_);
  swap(target_peer_, other->target_peer_);
  swap(region_id_, other->region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionHeartbeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AskSplitRequest::InitAsDefaultInstance() {
  ::schedulerpb::_AskSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
  ::schedulerpb::_AskSplitRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class AskSplitRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const AskSplitRequest* msg);
  static const ::metapb::Region& region(const AskSplitRequest* msg);
};

const ::schedulerpb::RequestHeader&
AskSplitRequest::HasBitSetters::header(const AskSplitRequest* msg) {
  return *msg->header_;
}
const ::metapb::Region&
AskSplitRequest::HasBitSetters::region(const AskSplitRequest* msg) {
  return *msg->region_;
}
void AskSplitRequest::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitRequest::kHeaderFieldNumber;
const int AskSplitRequest::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitRequest::AskSplitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.AskSplitRequest)
}
AskSplitRequest::AskSplitRequest(const AskSplitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.AskSplitRequest)
}

void AskSplitRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AskSplitRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_));
}

AskSplitRequest::~AskSplitRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.AskSplitRequest)
  SharedDtor();
}

void AskSplitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete region_;
}

void AskSplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskSplitRequest& AskSplitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AskSplitRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void AskSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.AskSplitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AskSplitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Region region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AskSplitRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.AskSplitRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.AskSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.AskSplitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AskSplitRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.AskSplitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.AskSplitRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AskSplitRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.AskSplitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.AskSplitRequest)
  return target;
}

size_t AskSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.AskSplitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskSplitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.AskSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AskSplitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AskSplitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.AskSplitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.AskSplitRequest)
    MergeFrom(*source);
  }
}

void AskSplitRequest::MergeFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.AskSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void AskSplitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitRequest::CopyFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitRequest::IsInitialized() const {
  return true;
}

void AskSplitRequest::Swap(AskSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitRequest::InternalSwap(AskSplitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AskSplitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AskSplitResponse::InitAsDefaultInstance() {
  ::schedulerpb::_AskSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class AskSplitResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const AskSplitResponse* msg);
};

const ::schedulerpb::ResponseHeader&
AskSplitResponse::HasBitSetters::header(const AskSplitResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitResponse::kHeaderFieldNumber;
const int AskSplitResponse::kNewRegionIdFieldNumber;
const int AskSplitResponse::kNewPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitResponse::AskSplitResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.AskSplitResponse)
}
AskSplitResponse::AskSplitResponse(const AskSplitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      new_peer_ids_(from.new_peer_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  new_region_id_ = from.new_region_id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.AskSplitResponse)
}

void AskSplitResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AskSplitResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_region_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(new_region_id_));
}

AskSplitResponse::~AskSplitResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.AskSplitResponse)
  SharedDtor();
}

void AskSplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AskSplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskSplitResponse& AskSplitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AskSplitResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void AskSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.AskSplitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_peer_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  new_region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AskSplitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 new_peer_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_new_peer_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_new_peer_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AskSplitResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.AskSplitResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 new_region_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.AskSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.AskSplitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AskSplitResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.AskSplitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->new_peer_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.AskSplitResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* AskSplitResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.AskSplitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _new_peer_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.AskSplitResponse)
  return target;
}

size_t AskSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.AskSplitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 new_peer_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->new_peer_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _new_peer_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskSplitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.AskSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AskSplitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AskSplitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.AskSplitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.AskSplitResponse)
    MergeFrom(*source);
  }
}

void AskSplitResponse::MergeFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.AskSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
}

void AskSplitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitResponse::CopyFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitResponse::IsInitialized() const {
  return true;
}

void AskSplitResponse::Swap(AskSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitResponse::InternalSwap(AskSplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_peer_ids_.InternalSwap(&other->new_peer_ids_);
  swap(header_, other->header_);
  swap(new_region_id_, other->new_region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AskSplitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportSplitRequest::InitAsDefaultInstance() {
  ::schedulerpb::_ReportSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
  ::schedulerpb::_ReportSplitRequest_default_instance_._instance.get_mutable()->left_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::schedulerpb::_ReportSplitRequest_default_instance_._instance.get_mutable()->right_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class ReportSplitRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const ReportSplitRequest* msg);
  static const ::metapb::Region& left(const ReportSplitRequest* msg);
  static const ::metapb::Region& right(const ReportSplitRequest* msg);
};

const ::schedulerpb::RequestHeader&
ReportSplitRequest::HasBitSetters::header(const ReportSplitRequest* msg) {
  return *msg->header_;
}
const ::metapb::Region&
ReportSplitRequest::HasBitSetters::left(const ReportSplitRequest* msg) {
  return *msg->left_;
}
const ::metapb::Region&
ReportSplitRequest::HasBitSetters::right(const ReportSplitRequest* msg) {
  return *msg->right_;
}
void ReportSplitRequest::clear_left() {
  if (GetArenaNoVirtual() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
void ReportSplitRequest::clear_right() {
  if (GetArenaNoVirtual() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportSplitRequest::kHeaderFieldNumber;
const int ReportSplitRequest::kLeftFieldNumber;
const int ReportSplitRequest::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportSplitRequest::ReportSplitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.ReportSplitRequest)
}
ReportSplitRequest::ReportSplitRequest(const ReportSplitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_left()) {
    left_ = new ::metapb::Region(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from.has_right()) {
    right_ = new ::metapb::Region(*from.right_);
  } else {
    right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.ReportSplitRequest)
}

void ReportSplitRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportSplitRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&header_)) + sizeof(right_));
}

ReportSplitRequest::~ReportSplitRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.ReportSplitRequest)
  SharedDtor();
}

void ReportSplitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void ReportSplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportSplitRequest& ReportSplitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportSplitRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void ReportSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.ReportSplitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportSplitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Region left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Region right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportSplitRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.ReportSplitRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region left = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region right = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.ReportSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.ReportSplitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportSplitRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.ReportSplitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Region left = 2;
  if (this->has_left()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::left(this), output);
  }

  // .metapb.Region right = 3;
  if (this->has_right()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::right(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.ReportSplitRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportSplitRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.ReportSplitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .metapb.Region left = 2;
  if (this->has_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::left(this), target);
  }

  // .metapb.Region right = 3;
  if (this->has_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::right(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.ReportSplitRequest)
  return target;
}

size_t ReportSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.ReportSplitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .metapb.Region right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportSplitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.ReportSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportSplitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportSplitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.ReportSplitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.ReportSplitRequest)
    MergeFrom(*source);
  }
}

void ReportSplitRequest::MergeFrom(const ReportSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.ReportSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_left()) {
    mutable_left()->::metapb::Region::MergeFrom(from.left());
  }
  if (from.has_right()) {
    mutable_right()->::metapb::Region::MergeFrom(from.right());
  }
}

void ReportSplitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.ReportSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitRequest::CopyFrom(const ReportSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.ReportSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSplitRequest::IsInitialized() const {
  return true;
}

void ReportSplitRequest::Swap(ReportSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportSplitRequest::InternalSwap(ReportSplitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(left_, other->left_);
  swap(right_, other->right_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportSplitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportSplitResponse::InitAsDefaultInstance() {
  ::schedulerpb::_ReportSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class ReportSplitResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const ReportSplitResponse* msg);
};

const ::schedulerpb::ResponseHeader&
ReportSplitResponse::HasBitSetters::header(const ReportSplitResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportSplitResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportSplitResponse::ReportSplitResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.ReportSplitResponse)
}
ReportSplitResponse::ReportSplitResponse(const ReportSplitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.ReportSplitResponse)
}

void ReportSplitResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportSplitResponse_schedulerpb_2eproto.base);
  header_ = nullptr;
}

ReportSplitResponse::~ReportSplitResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.ReportSplitResponse)
  SharedDtor();
}

void ReportSplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ReportSplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportSplitResponse& ReportSplitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportSplitResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void ReportSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.ReportSplitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportSplitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportSplitResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.ReportSplitResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.ReportSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.ReportSplitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportSplitResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.ReportSplitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.ReportSplitResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportSplitResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.ReportSplitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.ReportSplitResponse)
  return target;
}

size_t ReportSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.ReportSplitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportSplitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.ReportSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportSplitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportSplitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.ReportSplitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.ReportSplitResponse)
    MergeFrom(*source);
  }
}

void ReportSplitResponse::MergeFrom(const ReportSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.ReportSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ReportSplitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.ReportSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitResponse::CopyFrom(const ReportSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.ReportSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSplitResponse::IsInitialized() const {
  return true;
}

void ReportSplitResponse::Swap(ReportSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportSplitResponse::InternalSwap(ReportSplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportSplitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitID::InitAsDefaultInstance() {
}
class SplitID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitID::kNewRegionIdFieldNumber;
const int SplitID::kNewPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitID::SplitID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.SplitID)
}
SplitID::SplitID(const SplitID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      new_peer_ids_(from.new_peer_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_region_id_ = from.new_region_id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.SplitID)
}

void SplitID::SharedCtor() {
  new_region_id_ = PROTOBUF_ULONGLONG(0);
}

SplitID::~SplitID() {
  // @@protoc_insertion_point(destructor:schedulerpb.SplitID)
  SharedDtor();
}

void SplitID::SharedDtor() {
}

void SplitID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitID& SplitID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitID_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void SplitID::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.SplitID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_peer_ids_.Clear();
  new_region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 new_region_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          new_region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 new_peer_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_new_peer_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_new_peer_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitID::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.SplitID)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 new_region_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 new_peer_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.SplitID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.SplitID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitID::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.SplitID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 new_region_id = 1;
  if (this->new_region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 2;
  if (this->new_peer_ids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->new_peer_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.SplitID)
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitID::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.SplitID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 new_region_id = 1;
  if (this->new_region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 2;
  if (this->new_peer_ids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _new_peer_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.SplitID)
  return target;
}

size_t SplitID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.SplitID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 new_peer_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->new_peer_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _new_peer_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 new_region_id = 1;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.SplitID)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.SplitID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.SplitID)
    MergeFrom(*source);
  }
}

void SplitID::MergeFrom(const SplitID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.SplitID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
}

void SplitID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.SplitID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitID::CopyFrom(const SplitID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.SplitID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitID::IsInitialized() const {
  return true;
}

void SplitID::Swap(SplitID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitID::InternalSwap(SplitID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_peer_ids_.InternalSwap(&other->new_peer_ids_);
  swap(new_region_id_, other->new_region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeInterval::InitAsDefaultInstance() {
}
class TimeInterval::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeInterval::kStartTimestampFieldNumber;
const int TimeInterval::kEndTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeInterval::TimeInterval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.TimeInterval)
}
TimeInterval::TimeInterval(const TimeInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:schedulerpb.TimeInterval)
}

void TimeInterval::SharedCtor() {
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
}

TimeInterval::~TimeInterval() {
  // @@protoc_insertion_point(destructor:schedulerpb.TimeInterval)
  SharedDtor();
}

void TimeInterval::SharedDtor() {
}

void TimeInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeInterval& TimeInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeInterval_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.TimeInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeInterval::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.TimeInterval)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.TimeInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.TimeInterval)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeInterval::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.TimeInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }

  // uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->end_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.TimeInterval)
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeInterval::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.TimeInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }

  // uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.TimeInterval)
  return target;
}

size_t TimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.TimeInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_timestamp());
  }

  // uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->end_timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.TimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.TimeInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.TimeInterval)
    MergeFrom(*source);
  }
}

void TimeInterval::MergeFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.TimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_timestamp() != 0) {
    set_start_timestamp(from.start_timestamp());
  }
  if (from.end_timestamp() != 0) {
    set_end_timestamp(from.end_timestamp());
  }
}

void TimeInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInterval::CopyFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInterval::IsInitialized() const {
  return true;
}

void TimeInterval::Swap(TimeInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeInterval::InternalSwap(TimeInterval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordPair::InitAsDefaultInstance() {
}
class RecordPair::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordPair::kKeyFieldNumber;
const int RecordPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordPair::RecordPair()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.RecordPair)
}
RecordPair::RecordPair(const RecordPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.RecordPair)
}

void RecordPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordPair_schedulerpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_ULONGLONG(0);
}

RecordPair::~RecordPair() {
  // @@protoc_insertion_point(destructor:schedulerpb.RecordPair)
  SharedDtor();
}

void RecordPair::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecordPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordPair& RecordPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordPair_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void RecordPair::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.RecordPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "schedulerpb.RecordPair.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordPair::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.RecordPair)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "schedulerpb.RecordPair.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.RecordPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.RecordPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordPair::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.RecordPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.RecordPair.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.RecordPair)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordPair::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.RecordPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedulerpb.RecordPair.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.RecordPair)
  return target;
}

size_t RecordPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.RecordPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.RecordPair)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.RecordPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.RecordPair)
    MergeFrom(*source);
  }
}

void RecordPair::MergeFrom(const RecordPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.RecordPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void RecordPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.RecordPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordPair::CopyFrom(const RecordPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.RecordPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordPair::IsInitialized() const {
  return true;
}

void RecordPair::Swap(RecordPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordPair::InternalSwap(RecordPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreStats::InitAsDefaultInstance() {
  ::schedulerpb::_StoreStats_default_instance_._instance.get_mutable()->interval_ = const_cast< ::schedulerpb::TimeInterval*>(
      ::schedulerpb::TimeInterval::internal_default_instance());
}
class StoreStats::HasBitSetters {
 public:
  static const ::schedulerpb::TimeInterval& interval(const StoreStats* msg);
};

const ::schedulerpb::TimeInterval&
StoreStats::HasBitSetters::interval(const StoreStats* msg) {
  return *msg->interval_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreStats::kStoreIdFieldNumber;
const int StoreStats::kCapacityFieldNumber;
const int StoreStats::kAvailableFieldNumber;
const int StoreStats::kRegionCountFieldNumber;
const int StoreStats::kSendingSnapCountFieldNumber;
const int StoreStats::kReceivingSnapCountFieldNumber;
const int StoreStats::kStartTimeFieldNumber;
const int StoreStats::kApplyingSnapCountFieldNumber;
const int StoreStats::kIsBusyFieldNumber;
const int StoreStats::kUsedSizeFieldNumber;
const int StoreStats::kIntervalFieldNumber;
const int StoreStats::kCpuUsagesFieldNumber;
const int StoreStats::kReadIoRatesFieldNumber;
const int StoreStats::kWriteIoRatesFieldNumber;
const int StoreStats::kOpLatenciesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreStats::StoreStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.StoreStats)
}
StoreStats::StoreStats(const StoreStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cpu_usages_(from.cpu_usages_),
      read_io_rates_(from.read_io_rates_),
      write_io_rates_(from.write_io_rates_),
      op_latencies_(from.op_latencies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interval()) {
    interval_ = new ::schedulerpb::TimeInterval(*from.interval_);
  } else {
    interval_ = nullptr;
  }
  ::memcpy(&store_id_, &from.store_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_size_) -
    reinterpret_cast<char*>(&store_id_)) + sizeof(used_size_));
  // @@protoc_insertion_point(copy_constructor:schedulerpb.StoreStats)
}

void StoreStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreStats_schedulerpb_2eproto.base);
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_size_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(used_size_));
}

StoreStats::~StoreStats() {
  // @@protoc_insertion_point(destructor:schedulerpb.StoreStats)
  SharedDtor();
}

void StoreStats::SharedDtor() {
  if (this != internal_default_instance()) delete interval_;
}

void StoreStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreStats& StoreStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreStats_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void StoreStats::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.StoreStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_usages_.Clear();
  read_io_rates_.Clear();
  write_io_rates_.Clear();
  op_latencies_.Clear();
  if (GetArenaNoVirtual() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
  ::memset(&store_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_size_) -
      reinterpret_cast<char*>(&store_id_)) + sizeof(used_size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 store_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          store_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 available = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 region_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          region_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sending_snap_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sending_snap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 receiving_snap_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          receiving_snap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 applying_snap_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          applying_snap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_busy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_busy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 used_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          used_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.TimeInterval interval = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .schedulerpb.RecordPair cpu_usages = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_cpu_usages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // repeated .schedulerpb.RecordPair read_io_rates = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_read_io_rates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // repeated .schedulerpb.RecordPair write_io_rates = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_write_io_rates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // repeated .schedulerpb.RecordPair op_latencies = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_op_latencies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.StoreStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 store_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 capacity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 available = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 region_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sending_snap_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sending_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 receiving_snap_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiving_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 applying_snap_count = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applying_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_busy = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_busy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 used_size = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.TimeInterval interval = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schedulerpb.RecordPair cpu_usages = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cpu_usages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schedulerpb.RecordPair read_io_rates = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_read_io_rates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schedulerpb.RecordPair write_io_rates = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_write_io_rates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schedulerpb.RecordPair op_latencies = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_op_latencies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.StoreStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.StoreStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.StoreStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 store_id = 1;
  if (this->store_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->store_id(), output);
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->capacity(), output);
  }

  // uint64 available = 3;
  if (this->available() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->available(), output);
  }

  // uint32 region_count = 4;
  if (this->region_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->region_count(), output);
  }

  // uint32 sending_snap_count = 5;
  if (this->sending_snap_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->sending_snap_count(), output);
  }

  // uint32 receiving_snap_count = 6;
  if (this->receiving_snap_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->receiving_snap_count(), output);
  }

  // uint32 start_time = 7;
  if (this->start_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->start_time(), output);
  }

  // uint32 applying_snap_count = 8;
  if (this->applying_snap_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->applying_snap_count(), output);
  }

  // bool is_busy = 9;
  if (this->is_busy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->is_busy(), output);
  }

  // uint64 used_size = 10;
  if (this->used_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->used_size(), output);
  }

  // .schedulerpb.TimeInterval interval = 15;
  if (this->has_interval()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::interval(this), output);
  }

  // repeated .schedulerpb.RecordPair cpu_usages = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpu_usages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->cpu_usages(static_cast<int>(i)),
      output);
  }

  // repeated .schedulerpb.RecordPair read_io_rates = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_io_rates_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->read_io_rates(static_cast<int>(i)),
      output);
  }

  // repeated .schedulerpb.RecordPair write_io_rates = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->write_io_rates_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->write_io_rates(static_cast<int>(i)),
      output);
  }

  // repeated .schedulerpb.RecordPair op_latencies = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_latencies_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->op_latencies(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.StoreStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.StoreStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 store_id = 1;
  if (this->store_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->store_id(), target);
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->capacity(), target);
  }

  // uint64 available = 3;
  if (this->available() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->available(), target);
  }

  // uint32 region_count = 4;
  if (this->region_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->region_count(), target);
  }

  // uint32 sending_snap_count = 5;
  if (this->sending_snap_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->sending_snap_count(), target);
  }

  // uint32 receiving_snap_count = 6;
  if (this->receiving_snap_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->receiving_snap_count(), target);
  }

  // uint32 start_time = 7;
  if (this->start_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->start_time(), target);
  }

  // uint32 applying_snap_count = 8;
  if (this->applying_snap_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->applying_snap_count(), target);
  }

  // bool is_busy = 9;
  if (this->is_busy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->is_busy(), target);
  }

  // uint64 used_size = 10;
  if (this->used_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->used_size(), target);
  }

  // .schedulerpb.TimeInterval interval = 15;
  if (this->has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::interval(this), target);
  }

  // repeated .schedulerpb.RecordPair cpu_usages = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpu_usages_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->cpu_usages(static_cast<int>(i)), target);
  }

  // repeated .schedulerpb.RecordPair read_io_rates = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_io_rates_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->read_io_rates(static_cast<int>(i)), target);
  }

  // repeated .schedulerpb.RecordPair write_io_rates = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->write_io_rates_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->write_io_rates(static_cast<int>(i)), target);
  }

  // repeated .schedulerpb.RecordPair op_latencies = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_latencies_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->op_latencies(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.StoreStats)
  return target;
}

size_t StoreStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.StoreStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .schedulerpb.RecordPair cpu_usages = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->cpu_usages_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cpu_usages(static_cast<int>(i)));
    }
  }

  // repeated .schedulerpb.RecordPair read_io_rates = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->read_io_rates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->read_io_rates(static_cast<int>(i)));
    }
  }

  // repeated .schedulerpb.RecordPair write_io_rates = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->write_io_rates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->write_io_rates(static_cast<int>(i)));
    }
  }

  // repeated .schedulerpb.RecordPair op_latencies = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->op_latencies_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->op_latencies(static_cast<int>(i)));
    }
  }

  // .schedulerpb.TimeInterval interval = 15;
  if (this->has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interval_);
  }

  // uint64 store_id = 1;
  if (this->store_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->store_id());
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->capacity());
  }

  // uint64 available = 3;
  if (this->available() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->available());
  }

  // uint32 region_count = 4;
  if (this->region_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->region_count());
  }

  // uint32 sending_snap_count = 5;
  if (this->sending_snap_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sending_snap_count());
  }

  // uint32 receiving_snap_count = 6;
  if (this->receiving_snap_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->receiving_snap_count());
  }

  // uint32 start_time = 7;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // uint32 applying_snap_count = 8;
  if (this->applying_snap_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->applying_snap_count());
  }

  // bool is_busy = 9;
  if (this->is_busy() != 0) {
    total_size += 1 + 1;
  }

  // uint64 used_size = 10;
  if (this->used_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->used_size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.StoreStats)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.StoreStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.StoreStats)
    MergeFrom(*source);
  }
}

void StoreStats::MergeFrom(const StoreStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.StoreStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpu_usages_.MergeFrom(from.cpu_usages_);
  read_io_rates_.MergeFrom(from.read_io_rates_);
  write_io_rates_.MergeFrom(from.write_io_rates_);
  op_latencies_.MergeFrom(from.op_latencies_);
  if (from.has_interval()) {
    mutable_interval()->::schedulerpb::TimeInterval::MergeFrom(from.interval());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
  if (from.region_count() != 0) {
    set_region_count(from.region_count());
  }
  if (from.sending_snap_count() != 0) {
    set_sending_snap_count(from.sending_snap_count());
  }
  if (from.receiving_snap_count() != 0) {
    set_receiving_snap_count(from.receiving_snap_count());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.applying_snap_count() != 0) {
    set_applying_snap_count(from.applying_snap_count());
  }
  if (from.is_busy() != 0) {
    set_is_busy(from.is_busy());
  }
  if (from.used_size() != 0) {
    set_used_size(from.used_size());
  }
}

void StoreStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.StoreStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreStats::CopyFrom(const StoreStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.StoreStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreStats::IsInitialized() const {
  return true;
}

void StoreStats::Swap(StoreStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreStats::InternalSwap(StoreStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cpu_usages_)->InternalSwap(CastToBase(&other->cpu_usages_));
  CastToBase(&read_io_rates_)->InternalSwap(CastToBase(&other->read_io_rates_));
  CastToBase(&write_io_rates_)->InternalSwap(CastToBase(&other->write_io_rates_));
  CastToBase(&op_latencies_)->InternalSwap(CastToBase(&other->op_latencies_));
  swap(interval_, other->interval_);
  swap(store_id_, other->store_id_);
  swap(capacity_, other->capacity_);
  swap(available_, other->available_);
  swap(region_count_, other->region_count_);
  swap(sending_snap_count_, other->sending_snap_count_);
  swap(receiving_snap_count_, other->receiving_snap_count_);
  swap(start_time_, other->start_time_);
  swap(applying_snap_count_, other->applying_snap_count_);
  swap(is_busy_, other->is_busy_);
  swap(used_size_, other->used_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreHeartbeatRequest::InitAsDefaultInstance() {
  ::schedulerpb::_StoreHeartbeatRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
  ::schedulerpb::_StoreHeartbeatRequest_default_instance_._instance.get_mutable()->stats_ = const_cast< ::schedulerpb::StoreStats*>(
      ::schedulerpb::StoreStats::internal_default_instance());
}
class StoreHeartbeatRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const StoreHeartbeatRequest* msg);
  static const ::schedulerpb::StoreStats& stats(const StoreHeartbeatRequest* msg);
};

const ::schedulerpb::RequestHeader&
StoreHeartbeatRequest::HasBitSetters::header(const StoreHeartbeatRequest* msg) {
  return *msg->header_;
}
const ::schedulerpb::StoreStats&
StoreHeartbeatRequest::HasBitSetters::stats(const StoreHeartbeatRequest* msg) {
  return *msg->stats_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreHeartbeatRequest::kHeaderFieldNumber;
const int StoreHeartbeatRequest::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreHeartbeatRequest::StoreHeartbeatRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.StoreHeartbeatRequest)
}
StoreHeartbeatRequest::StoreHeartbeatRequest(const StoreHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_stats()) {
    stats_ = new ::schedulerpb::StoreStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.StoreHeartbeatRequest)
}

void StoreHeartbeatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreHeartbeatRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stats_) -
      reinterpret_cast<char*>(&header_)) + sizeof(stats_));
}

StoreHeartbeatRequest::~StoreHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.StoreHeartbeatRequest)
  SharedDtor();
}

void StoreHeartbeatRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete stats_;
}

void StoreHeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreHeartbeatRequest& StoreHeartbeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreHeartbeatRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void StoreHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.StoreHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreHeartbeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.StoreStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreHeartbeatRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.StoreHeartbeatRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.StoreStats stats = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.StoreHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.StoreHeartbeatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreHeartbeatRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.StoreHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .schedulerpb.StoreStats stats = 2;
  if (this->has_stats()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::stats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.StoreHeartbeatRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.StoreHeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // .schedulerpb.StoreStats stats = 2;
  if (this->has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::stats(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.StoreHeartbeatRequest)
  return target;
}

size_t StoreHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.StoreHeartbeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .schedulerpb.StoreStats stats = 2;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreHeartbeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.StoreHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreHeartbeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreHeartbeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.StoreHeartbeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.StoreHeartbeatRequest)
    MergeFrom(*source);
  }
}

void StoreHeartbeatRequest::MergeFrom(const StoreHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.StoreHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_stats()) {
    mutable_stats()->::schedulerpb::StoreStats::MergeFrom(from.stats());
  }
}

void StoreHeartbeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.StoreHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHeartbeatRequest::CopyFrom(const StoreHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.StoreHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHeartbeatRequest::IsInitialized() const {
  return true;
}

void StoreHeartbeatRequest::Swap(StoreHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreHeartbeatRequest::InternalSwap(StoreHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(stats_, other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreHeartbeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreHeartbeatResponse::InitAsDefaultInstance() {
  ::schedulerpb::_StoreHeartbeatResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class StoreHeartbeatResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const StoreHeartbeatResponse* msg);
};

const ::schedulerpb::ResponseHeader&
StoreHeartbeatResponse::HasBitSetters::header(const StoreHeartbeatResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreHeartbeatResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreHeartbeatResponse::StoreHeartbeatResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.StoreHeartbeatResponse)
}
StoreHeartbeatResponse::StoreHeartbeatResponse(const StoreHeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.StoreHeartbeatResponse)
}

void StoreHeartbeatResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreHeartbeatResponse_schedulerpb_2eproto.base);
  header_ = nullptr;
}

StoreHeartbeatResponse::~StoreHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.StoreHeartbeatResponse)
  SharedDtor();
}

void StoreHeartbeatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void StoreHeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreHeartbeatResponse& StoreHeartbeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreHeartbeatResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void StoreHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.StoreHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreHeartbeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreHeartbeatResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.StoreHeartbeatResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.StoreHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.StoreHeartbeatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreHeartbeatResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.StoreHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.StoreHeartbeatResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.StoreHeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.StoreHeartbeatResponse)
  return target;
}

size_t StoreHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.StoreHeartbeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreHeartbeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.StoreHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreHeartbeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreHeartbeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.StoreHeartbeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.StoreHeartbeatResponse)
    MergeFrom(*source);
  }
}

void StoreHeartbeatResponse::MergeFrom(const StoreHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.StoreHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
}

void StoreHeartbeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.StoreHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHeartbeatResponse::CopyFrom(const StoreHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.StoreHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHeartbeatResponse::IsInitialized() const {
  return true;
}

void StoreHeartbeatResponse::Swap(StoreHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreHeartbeatResponse::InternalSwap(StoreHeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreHeartbeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScatterRegionRequest::InitAsDefaultInstance() {
  ::schedulerpb::_ScatterRegionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
  ::schedulerpb::_ScatterRegionRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::schedulerpb::_ScatterRegionRequest_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class ScatterRegionRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const ScatterRegionRequest* msg);
  static const ::metapb::Region& region(const ScatterRegionRequest* msg);
  static const ::metapb::Peer& leader(const ScatterRegionRequest* msg);
};

const ::schedulerpb::RequestHeader&
ScatterRegionRequest::HasBitSetters::header(const ScatterRegionRequest* msg) {
  return *msg->header_;
}
const ::metapb::Region&
ScatterRegionRequest::HasBitSetters::region(const ScatterRegionRequest* msg) {
  return *msg->region_;
}
const ::metapb::Peer&
ScatterRegionRequest::HasBitSetters::leader(const ScatterRegionRequest* msg) {
  return *msg->leader_;
}
void ScatterRegionRequest::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
void ScatterRegionRequest::clear_leader() {
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScatterRegionRequest::kHeaderFieldNumber;
const int ScatterRegionRequest::kRegionIdFieldNumber;
const int ScatterRegionRequest::kRegionFieldNumber;
const int ScatterRegionRequest::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScatterRegionRequest::ScatterRegionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.ScatterRegionRequest)
}
ScatterRegionRequest::ScatterRegionRequest(const ScatterRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.ScatterRegionRequest)
}

void ScatterRegionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScatterRegionRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_id_));
}

ScatterRegionRequest::~ScatterRegionRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.ScatterRegionRequest)
  SharedDtor();
}

void ScatterRegionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete leader_;
}

void ScatterRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScatterRegionRequest& ScatterRegionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScatterRegionRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void ScatterRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.ScatterRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScatterRegionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Region region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Peer leader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScatterRegionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.ScatterRegionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 region_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer leader = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.ScatterRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.ScatterRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScatterRegionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.ScatterRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  // .metapb.Region region = 3;
  if (this->has_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::region(this), output);
  }

  // .metapb.Peer leader = 4;
  if (this->has_leader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::leader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.ScatterRegionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScatterRegionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.ScatterRegionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  // .metapb.Region region = 3;
  if (this->has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::region(this), target);
  }

  // .metapb.Peer leader = 4;
  if (this->has_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::leader(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.ScatterRegionRequest)
  return target;
}

size_t ScatterRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.ScatterRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .metapb.Peer leader = 4;
  if (this->has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScatterRegionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.ScatterRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScatterRegionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScatterRegionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.ScatterRegionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.ScatterRegionRequest)
    MergeFrom(*source);
  }
}

void ScatterRegionRequest::MergeFrom(const ScatterRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.ScatterRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void ScatterRegionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.ScatterRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScatterRegionRequest::CopyFrom(const ScatterRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.ScatterRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScatterRegionRequest::IsInitialized() const {
  return true;
}

void ScatterRegionRequest::Swap(ScatterRegionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScatterRegionRequest::InternalSwap(ScatterRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(region_, other->region_);
  swap(leader_, other->leader_);
  swap(region_id_, other->region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScatterRegionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScatterRegionResponse::InitAsDefaultInstance() {
  ::schedulerpb::_ScatterRegionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class ScatterRegionResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const ScatterRegionResponse* msg);
};

const ::schedulerpb::ResponseHeader&
ScatterRegionResponse::HasBitSetters::header(const ScatterRegionResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScatterRegionResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScatterRegionResponse::ScatterRegionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.ScatterRegionResponse)
}
ScatterRegionResponse::ScatterRegionResponse(const ScatterRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.ScatterRegionResponse)
}

void ScatterRegionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScatterRegionResponse_schedulerpb_2eproto.base);
  header_ = nullptr;
}

ScatterRegionResponse::~ScatterRegionResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.ScatterRegionResponse)
  SharedDtor();
}

void ScatterRegionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ScatterRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScatterRegionResponse& ScatterRegionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScatterRegionResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void ScatterRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.ScatterRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScatterRegionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScatterRegionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.ScatterRegionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.ScatterRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.ScatterRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScatterRegionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.ScatterRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.ScatterRegionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScatterRegionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.ScatterRegionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.ScatterRegionResponse)
  return target;
}

size_t ScatterRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.ScatterRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScatterRegionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.ScatterRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScatterRegionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScatterRegionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.ScatterRegionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.ScatterRegionResponse)
    MergeFrom(*source);
  }
}

void ScatterRegionResponse::MergeFrom(const ScatterRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.ScatterRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ScatterRegionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.ScatterRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScatterRegionResponse::CopyFrom(const ScatterRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.ScatterRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScatterRegionResponse::IsInitialized() const {
  return true;
}

void ScatterRegionResponse::Swap(ScatterRegionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScatterRegionResponse::InternalSwap(ScatterRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScatterRegionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGCSafePointRequest::InitAsDefaultInstance() {
  ::schedulerpb::_GetGCSafePointRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class GetGCSafePointRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const GetGCSafePointRequest* msg);
};

const ::schedulerpb::RequestHeader&
GetGCSafePointRequest::HasBitSetters::header(const GetGCSafePointRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGCSafePointRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGCSafePointRequest::GetGCSafePointRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetGCSafePointRequest)
}
GetGCSafePointRequest::GetGCSafePointRequest(const GetGCSafePointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetGCSafePointRequest)
}

void GetGCSafePointRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGCSafePointRequest_schedulerpb_2eproto.base);
  header_ = nullptr;
}

GetGCSafePointRequest::~GetGCSafePointRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetGCSafePointRequest)
  SharedDtor();
}

void GetGCSafePointRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetGCSafePointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGCSafePointRequest& GetGCSafePointRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGCSafePointRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetGCSafePointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetGCSafePointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetGCSafePointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetGCSafePointRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetGCSafePointRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetGCSafePointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetGCSafePointRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetGCSafePointRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetGCSafePointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetGCSafePointRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGCSafePointRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetGCSafePointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetGCSafePointRequest)
  return target;
}

size_t GetGCSafePointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetGCSafePointRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGCSafePointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetGCSafePointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGCSafePointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGCSafePointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetGCSafePointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetGCSafePointRequest)
    MergeFrom(*source);
  }
}

void GetGCSafePointRequest::MergeFrom(const GetGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetGCSafePointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetGCSafePointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGCSafePointRequest::CopyFrom(const GetGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGCSafePointRequest::IsInitialized() const {
  return true;
}

void GetGCSafePointRequest::Swap(GetGCSafePointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGCSafePointRequest::InternalSwap(GetGCSafePointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGCSafePointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetGCSafePointResponse::InitAsDefaultInstance() {
  ::schedulerpb::_GetGCSafePointResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class GetGCSafePointResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const GetGCSafePointResponse* msg);
};

const ::schedulerpb::ResponseHeader&
GetGCSafePointResponse::HasBitSetters::header(const GetGCSafePointResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGCSafePointResponse::kHeaderFieldNumber;
const int GetGCSafePointResponse::kSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGCSafePointResponse::GetGCSafePointResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetGCSafePointResponse)
}
GetGCSafePointResponse::GetGCSafePointResponse(const GetGCSafePointResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  safe_point_ = from.safe_point_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetGCSafePointResponse)
}

void GetGCSafePointResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetGCSafePointResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(safe_point_));
}

GetGCSafePointResponse::~GetGCSafePointResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetGCSafePointResponse)
  SharedDtor();
}

void GetGCSafePointResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetGCSafePointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGCSafePointResponse& GetGCSafePointResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetGCSafePointResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetGCSafePointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetGCSafePointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  safe_point_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetGCSafePointResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 safe_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          safe_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetGCSafePointResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetGCSafePointResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 safe_point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetGCSafePointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetGCSafePointResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetGCSafePointResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetGCSafePointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->safe_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetGCSafePointResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetGCSafePointResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetGCSafePointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->safe_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetGCSafePointResponse)
  return target;
}

size_t GetGCSafePointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetGCSafePointResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->safe_point());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGCSafePointResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetGCSafePointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGCSafePointResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetGCSafePointResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetGCSafePointResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetGCSafePointResponse)
    MergeFrom(*source);
  }
}

void GetGCSafePointResponse::MergeFrom(const GetGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetGCSafePointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.safe_point() != 0) {
    set_safe_point(from.safe_point());
  }
}

void GetGCSafePointResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGCSafePointResponse::CopyFrom(const GetGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGCSafePointResponse::IsInitialized() const {
  return true;
}

void GetGCSafePointResponse::Swap(GetGCSafePointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGCSafePointResponse::InternalSwap(GetGCSafePointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(safe_point_, other->safe_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetGCSafePointResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateGCSafePointRequest::InitAsDefaultInstance() {
  ::schedulerpb::_UpdateGCSafePointRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class UpdateGCSafePointRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const UpdateGCSafePointRequest* msg);
};

const ::schedulerpb::RequestHeader&
UpdateGCSafePointRequest::HasBitSetters::header(const UpdateGCSafePointRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGCSafePointRequest::kHeaderFieldNumber;
const int UpdateGCSafePointRequest::kSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGCSafePointRequest::UpdateGCSafePointRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.UpdateGCSafePointRequest)
}
UpdateGCSafePointRequest::UpdateGCSafePointRequest(const UpdateGCSafePointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  safe_point_ = from.safe_point_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.UpdateGCSafePointRequest)
}

void UpdateGCSafePointRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateGCSafePointRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(safe_point_));
}

UpdateGCSafePointRequest::~UpdateGCSafePointRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.UpdateGCSafePointRequest)
  SharedDtor();
}

void UpdateGCSafePointRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void UpdateGCSafePointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGCSafePointRequest& UpdateGCSafePointRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateGCSafePointRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void UpdateGCSafePointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.UpdateGCSafePointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  safe_point_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateGCSafePointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 safe_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          safe_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateGCSafePointRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.UpdateGCSafePointRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 safe_point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.UpdateGCSafePointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.UpdateGCSafePointRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateGCSafePointRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.UpdateGCSafePointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->safe_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.UpdateGCSafePointRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateGCSafePointRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.UpdateGCSafePointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->safe_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.UpdateGCSafePointRequest)
  return target;
}

size_t UpdateGCSafePointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.UpdateGCSafePointRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->safe_point());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGCSafePointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.UpdateGCSafePointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGCSafePointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateGCSafePointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.UpdateGCSafePointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.UpdateGCSafePointRequest)
    MergeFrom(*source);
  }
}

void UpdateGCSafePointRequest::MergeFrom(const UpdateGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.UpdateGCSafePointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.safe_point() != 0) {
    set_safe_point(from.safe_point());
  }
}

void UpdateGCSafePointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.UpdateGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGCSafePointRequest::CopyFrom(const UpdateGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.UpdateGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGCSafePointRequest::IsInitialized() const {
  return true;
}

void UpdateGCSafePointRequest::Swap(UpdateGCSafePointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGCSafePointRequest::InternalSwap(UpdateGCSafePointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(safe_point_, other->safe_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGCSafePointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateGCSafePointResponse::InitAsDefaultInstance() {
  ::schedulerpb::_UpdateGCSafePointResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class UpdateGCSafePointResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const UpdateGCSafePointResponse* msg);
};

const ::schedulerpb::ResponseHeader&
UpdateGCSafePointResponse::HasBitSetters::header(const UpdateGCSafePointResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGCSafePointResponse::kHeaderFieldNumber;
const int UpdateGCSafePointResponse::kNewSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGCSafePointResponse::UpdateGCSafePointResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.UpdateGCSafePointResponse)
}
UpdateGCSafePointResponse::UpdateGCSafePointResponse(const UpdateGCSafePointResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  new_safe_point_ = from.new_safe_point_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.UpdateGCSafePointResponse)
}

void UpdateGCSafePointResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateGCSafePointResponse_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_safe_point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(new_safe_point_));
}

UpdateGCSafePointResponse::~UpdateGCSafePointResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.UpdateGCSafePointResponse)
  SharedDtor();
}

void UpdateGCSafePointResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void UpdateGCSafePointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGCSafePointResponse& UpdateGCSafePointResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateGCSafePointResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void UpdateGCSafePointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.UpdateGCSafePointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  new_safe_point_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateGCSafePointResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_safe_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_safe_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateGCSafePointResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.UpdateGCSafePointResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 new_safe_point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_safe_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.UpdateGCSafePointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.UpdateGCSafePointResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateGCSafePointResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.UpdateGCSafePointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 new_safe_point = 2;
  if (this->new_safe_point() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->new_safe_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.UpdateGCSafePointResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateGCSafePointResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.UpdateGCSafePointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 new_safe_point = 2;
  if (this->new_safe_point() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_safe_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.UpdateGCSafePointResponse)
  return target;
}

size_t UpdateGCSafePointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.UpdateGCSafePointResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 new_safe_point = 2;
  if (this->new_safe_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->new_safe_point());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGCSafePointResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.UpdateGCSafePointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGCSafePointResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateGCSafePointResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.UpdateGCSafePointResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.UpdateGCSafePointResponse)
    MergeFrom(*source);
  }
}

void UpdateGCSafePointResponse::MergeFrom(const UpdateGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.UpdateGCSafePointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.new_safe_point() != 0) {
    set_new_safe_point(from.new_safe_point());
  }
}

void UpdateGCSafePointResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.UpdateGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGCSafePointResponse::CopyFrom(const UpdateGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.UpdateGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGCSafePointResponse::IsInitialized() const {
  return true;
}

void UpdateGCSafePointResponse::Swap(UpdateGCSafePointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGCSafePointResponse::InternalSwap(UpdateGCSafePointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(new_safe_point_, other->new_safe_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGCSafePointResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOperatorRequest::InitAsDefaultInstance() {
  ::schedulerpb::_GetOperatorRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::RequestHeader*>(
      ::schedulerpb::RequestHeader::internal_default_instance());
}
class GetOperatorRequest::HasBitSetters {
 public:
  static const ::schedulerpb::RequestHeader& header(const GetOperatorRequest* msg);
};

const ::schedulerpb::RequestHeader&
GetOperatorRequest::HasBitSetters::header(const GetOperatorRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOperatorRequest::kHeaderFieldNumber;
const int GetOperatorRequest::kRegionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOperatorRequest::GetOperatorRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetOperatorRequest)
}
GetOperatorRequest::GetOperatorRequest(const GetOperatorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::schedulerpb::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetOperatorRequest)
}

void GetOperatorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOperatorRequest_schedulerpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_id_));
}

GetOperatorRequest::~GetOperatorRequest() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetOperatorRequest)
  SharedDtor();
}

void GetOperatorRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetOperatorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOperatorRequest& GetOperatorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOperatorRequest_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetOperatorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetOperatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOperatorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOperatorRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetOperatorRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 region_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetOperatorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetOperatorRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOperatorRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetOperatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetOperatorRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOperatorRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetOperatorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetOperatorRequest)
  return target;
}

size_t GetOperatorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetOperatorRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .schedulerpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOperatorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetOperatorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOperatorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOperatorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetOperatorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetOperatorRequest)
    MergeFrom(*source);
  }
}

void GetOperatorRequest::MergeFrom(const GetOperatorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetOperatorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::schedulerpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void GetOperatorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetOperatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOperatorRequest::CopyFrom(const GetOperatorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetOperatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperatorRequest::IsInitialized() const {
  return true;
}

void GetOperatorRequest::Swap(GetOperatorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOperatorRequest::InternalSwap(GetOperatorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(region_id_, other->region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOperatorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOperatorResponse::InitAsDefaultInstance() {
  ::schedulerpb::_GetOperatorResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::schedulerpb::ResponseHeader*>(
      ::schedulerpb::ResponseHeader::internal_default_instance());
}
class GetOperatorResponse::HasBitSetters {
 public:
  static const ::schedulerpb::ResponseHeader& header(const GetOperatorResponse* msg);
};

const ::schedulerpb::ResponseHeader&
GetOperatorResponse::HasBitSetters::header(const GetOperatorResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOperatorResponse::kHeaderFieldNumber;
const int GetOperatorResponse::kRegionIdFieldNumber;
const int GetOperatorResponse::kDescFieldNumber;
const int GetOperatorResponse::kStatusFieldNumber;
const int GetOperatorResponse::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOperatorResponse::GetOperatorResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:schedulerpb.GetOperatorResponse)
}
GetOperatorResponse::GetOperatorResponse(const GetOperatorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.has_header()) {
    header_ = new ::schedulerpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:schedulerpb.GetOperatorResponse)
}

void GetOperatorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOperatorResponse_schedulerpb_2eproto.base);
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

GetOperatorResponse::~GetOperatorResponse() {
  // @@protoc_insertion_point(destructor:schedulerpb.GetOperatorResponse)
  SharedDtor();
}

void GetOperatorResponse::SharedDtor() {
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetOperatorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOperatorResponse& GetOperatorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOperatorResponse_schedulerpb_2eproto.base);
  return *internal_default_instance();
}


void GetOperatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:schedulerpb.GetOperatorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kind_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOperatorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_desc(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .schedulerpb.OperatorStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::schedulerpb::OperatorStatus>(val));
        } else goto handle_unusual;
        continue;
      // bytes kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_kind(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOperatorResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:schedulerpb.GetOperatorResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schedulerpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 region_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes desc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schedulerpb.OperatorStatus status = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::schedulerpb::OperatorStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes kind = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schedulerpb.GetOperatorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schedulerpb.GetOperatorResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOperatorResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schedulerpb.GetOperatorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  // bytes desc = 3;
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->desc(), output);
  }

  // .schedulerpb.OperatorStatus status = 4;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // bytes kind = 5;
  if (this->kind().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:schedulerpb.GetOperatorResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOperatorResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedulerpb.GetOperatorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  // bytes desc = 3;
  if (this->desc().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->desc(), target);
  }

  // .schedulerpb.OperatorStatus status = 4;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // bytes kind = 5;
  if (this->kind().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedulerpb.GetOperatorResponse)
  return target;
}

size_t GetOperatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedulerpb.GetOperatorResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes desc = 3;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->desc());
  }

  // bytes kind = 5;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->kind());
  }

  // .schedulerpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // .schedulerpb.OperatorStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOperatorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schedulerpb.GetOperatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOperatorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOperatorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schedulerpb.GetOperatorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schedulerpb.GetOperatorResponse)
    MergeFrom(*source);
  }
}

void GetOperatorResponse::MergeFrom(const GetOperatorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schedulerpb.GetOperatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.has_header()) {
    mutable_header()->::schedulerpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void GetOperatorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schedulerpb.GetOperatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOperatorResponse::CopyFrom(const GetOperatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedulerpb.GetOperatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperatorResponse::IsInitialized() const {
  return true;
}

void GetOperatorResponse::Swap(GetOperatorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOperatorResponse::InternalSwap(GetOperatorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kind_.Swap(&other->kind_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(region_id_, other->region_id_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOperatorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace schedulerpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::schedulerpb::RequestHeader* Arena::CreateMaybeMessage< ::schedulerpb::RequestHeader >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::ResponseHeader* Arena::CreateMaybeMessage< ::schedulerpb::ResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::ResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::Error* Arena::CreateMaybeMessage< ::schedulerpb::Error >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::TsoRequest* Arena::CreateMaybeMessage< ::schedulerpb::TsoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::TsoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::Timestamp* Arena::CreateMaybeMessage< ::schedulerpb::Timestamp >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::TsoResponse* Arena::CreateMaybeMessage< ::schedulerpb::TsoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::TsoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::BootstrapRequest* Arena::CreateMaybeMessage< ::schedulerpb::BootstrapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::BootstrapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::BootstrapResponse* Arena::CreateMaybeMessage< ::schedulerpb::BootstrapResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::BootstrapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::IsBootstrappedRequest* Arena::CreateMaybeMessage< ::schedulerpb::IsBootstrappedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::IsBootstrappedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::IsBootstrappedResponse* Arena::CreateMaybeMessage< ::schedulerpb::IsBootstrappedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::IsBootstrappedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::AllocIDRequest* Arena::CreateMaybeMessage< ::schedulerpb::AllocIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::AllocIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::AllocIDResponse* Arena::CreateMaybeMessage< ::schedulerpb::AllocIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::AllocIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetStoreRequest* Arena::CreateMaybeMessage< ::schedulerpb::GetStoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetStoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetStoreResponse* Arena::CreateMaybeMessage< ::schedulerpb::GetStoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetStoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::PutStoreRequest* Arena::CreateMaybeMessage< ::schedulerpb::PutStoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::PutStoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::PutStoreResponse* Arena::CreateMaybeMessage< ::schedulerpb::PutStoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::PutStoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetAllStoresRequest* Arena::CreateMaybeMessage< ::schedulerpb::GetAllStoresRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetAllStoresRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetAllStoresResponse* Arena::CreateMaybeMessage< ::schedulerpb::GetAllStoresResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetAllStoresResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetRegionRequest* Arena::CreateMaybeMessage< ::schedulerpb::GetRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetRegionResponse* Arena::CreateMaybeMessage< ::schedulerpb::GetRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetRegionByIDRequest* Arena::CreateMaybeMessage< ::schedulerpb::GetRegionByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetRegionByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::ScanRegionsRequest* Arena::CreateMaybeMessage< ::schedulerpb::ScanRegionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::ScanRegionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::ScanRegionsResponse* Arena::CreateMaybeMessage< ::schedulerpb::ScanRegionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::ScanRegionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetClusterConfigRequest* Arena::CreateMaybeMessage< ::schedulerpb::GetClusterConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetClusterConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetClusterConfigResponse* Arena::CreateMaybeMessage< ::schedulerpb::GetClusterConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetClusterConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::PutClusterConfigRequest* Arena::CreateMaybeMessage< ::schedulerpb::PutClusterConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::PutClusterConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::PutClusterConfigResponse* Arena::CreateMaybeMessage< ::schedulerpb::PutClusterConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::PutClusterConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::Member* Arena::CreateMaybeMessage< ::schedulerpb::Member >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::Member >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetMembersRequest* Arena::CreateMaybeMessage< ::schedulerpb::GetMembersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetMembersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetMembersResponse* Arena::CreateMaybeMessage< ::schedulerpb::GetMembersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::RegionHeartbeatRequest* Arena::CreateMaybeMessage< ::schedulerpb::RegionHeartbeatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::RegionHeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::ChangePeer* Arena::CreateMaybeMessage< ::schedulerpb::ChangePeer >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::ChangePeer >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::TransferLeader* Arena::CreateMaybeMessage< ::schedulerpb::TransferLeader >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::TransferLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::RegionHeartbeatResponse* Arena::CreateMaybeMessage< ::schedulerpb::RegionHeartbeatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::RegionHeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::AskSplitRequest* Arena::CreateMaybeMessage< ::schedulerpb::AskSplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::AskSplitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::AskSplitResponse* Arena::CreateMaybeMessage< ::schedulerpb::AskSplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::AskSplitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::ReportSplitRequest* Arena::CreateMaybeMessage< ::schedulerpb::ReportSplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::ReportSplitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::ReportSplitResponse* Arena::CreateMaybeMessage< ::schedulerpb::ReportSplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::ReportSplitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::SplitID* Arena::CreateMaybeMessage< ::schedulerpb::SplitID >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::SplitID >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::TimeInterval* Arena::CreateMaybeMessage< ::schedulerpb::TimeInterval >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::TimeInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::RecordPair* Arena::CreateMaybeMessage< ::schedulerpb::RecordPair >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::RecordPair >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::StoreStats* Arena::CreateMaybeMessage< ::schedulerpb::StoreStats >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::StoreStats >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::StoreHeartbeatRequest* Arena::CreateMaybeMessage< ::schedulerpb::StoreHeartbeatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::StoreHeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::StoreHeartbeatResponse* Arena::CreateMaybeMessage< ::schedulerpb::StoreHeartbeatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::StoreHeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::ScatterRegionRequest* Arena::CreateMaybeMessage< ::schedulerpb::ScatterRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::ScatterRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::ScatterRegionResponse* Arena::CreateMaybeMessage< ::schedulerpb::ScatterRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::ScatterRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetGCSafePointRequest* Arena::CreateMaybeMessage< ::schedulerpb::GetGCSafePointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetGCSafePointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetGCSafePointResponse* Arena::CreateMaybeMessage< ::schedulerpb::GetGCSafePointResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetGCSafePointResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::UpdateGCSafePointRequest* Arena::CreateMaybeMessage< ::schedulerpb::UpdateGCSafePointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::UpdateGCSafePointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::UpdateGCSafePointResponse* Arena::CreateMaybeMessage< ::schedulerpb::UpdateGCSafePointResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::UpdateGCSafePointResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetOperatorRequest* Arena::CreateMaybeMessage< ::schedulerpb::GetOperatorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetOperatorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::schedulerpb::GetOperatorResponse* Arena::CreateMaybeMessage< ::schedulerpb::GetOperatorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::schedulerpb::GetOperatorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
