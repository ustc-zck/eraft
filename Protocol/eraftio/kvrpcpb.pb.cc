// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvrpcpb.proto

#include "kvrpcpb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Error_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Context_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KeyError_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KvPair_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockInfo_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mutation_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteConflict_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Peer_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionEpoch_metapb_2eproto;
namespace kvrpcpb {
class RawGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawGetRequest> _instance;
} _RawGetRequest_default_instance_;
class RawGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawGetResponse> _instance;
} _RawGetResponse_default_instance_;
class RawPutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawPutRequest> _instance;
} _RawPutRequest_default_instance_;
class RawPutResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawPutResponse> _instance;
} _RawPutResponse_default_instance_;
class RawDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawDeleteRequest> _instance;
} _RawDeleteRequest_default_instance_;
class RawDeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawDeleteResponse> _instance;
} _RawDeleteResponse_default_instance_;
class RawScanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawScanRequest> _instance;
} _RawScanRequest_default_instance_;
class RawScanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawScanResponse> _instance;
} _RawScanResponse_default_instance_;
class GetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRequest> _instance;
} _GetRequest_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResponse> _instance;
} _GetResponse_default_instance_;
class PrewriteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrewriteRequest> _instance;
} _PrewriteRequest_default_instance_;
class PrewriteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrewriteResponse> _instance;
} _PrewriteResponse_default_instance_;
class CommitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitRequest> _instance;
} _CommitRequest_default_instance_;
class CommitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitResponse> _instance;
} _CommitResponse_default_instance_;
class ScanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanRequest> _instance;
} _ScanRequest_default_instance_;
class ScanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanResponse> _instance;
} _ScanResponse_default_instance_;
class BatchRollbackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchRollbackRequest> _instance;
} _BatchRollbackRequest_default_instance_;
class BatchRollbackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchRollbackResponse> _instance;
} _BatchRollbackResponse_default_instance_;
class CheckTxnStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckTxnStatusRequest> _instance;
} _CheckTxnStatusRequest_default_instance_;
class CheckTxnStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckTxnStatusResponse> _instance;
} _CheckTxnStatusResponse_default_instance_;
class ResolveLockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveLockRequest> _instance;
} _ResolveLockRequest_default_instance_;
class ResolveLockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveLockResponse> _instance;
} _ResolveLockResponse_default_instance_;
class KvPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvPair> _instance;
} _KvPair_default_instance_;
class MutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mutation> _instance;
} _Mutation_default_instance_;
class KeyErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyError> _instance;
} _KeyError_default_instance_;
class LockInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockInfo> _instance;
} _LockInfo_default_instance_;
class WriteConflictDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteConflict> _instance;
} _WriteConflict_default_instance_;
class ContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Context> _instance;
} _Context_default_instance_;
}  // namespace kvrpcpb
static void InitDefaultsscc_info_BatchRollbackRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_BatchRollbackRequest_default_instance_;
    new (ptr) ::kvrpcpb::BatchRollbackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchRollbackRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BatchRollbackRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_BatchRollbackResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_BatchRollbackResponse_default_instance_;
    new (ptr) ::kvrpcpb::BatchRollbackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchRollbackResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BatchRollbackResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_CheckTxnStatusRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_CheckTxnStatusRequest_default_instance_;
    new (ptr) ::kvrpcpb::CheckTxnStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckTxnStatusRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckTxnStatusRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_CheckTxnStatusResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_CheckTxnStatusResponse_default_instance_;
    new (ptr) ::kvrpcpb::CheckTxnStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckTxnStatusResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckTxnStatusResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_CommitRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_CommitRequest_default_instance_;
    new (ptr) ::kvrpcpb::CommitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommitRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_CommitResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_CommitResponse_default_instance_;
    new (ptr) ::kvrpcpb::CommitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommitResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommitResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_Context_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_Context_default_instance_;
    new (ptr) ::kvrpcpb::Context();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Context_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Context_kvrpcpb_2eproto}, {
      &scc_info_RegionEpoch_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_GetRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_GetRequest_default_instance_;
    new (ptr) ::kvrpcpb::GetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_GetResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_GetResponse_default_instance_;
    new (ptr) ::kvrpcpb::GetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_KeyError_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_KeyError_default_instance_;
    new (ptr) ::kvrpcpb::KeyError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KeyError_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_KeyError_kvrpcpb_2eproto}, {
      &scc_info_LockInfo_kvrpcpb_2eproto.base,
      &scc_info_WriteConflict_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_KvPair_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_KvPair_default_instance_;
    new (ptr) ::kvrpcpb::KvPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KvPair_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KvPair_kvrpcpb_2eproto}, {
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_LockInfo_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_LockInfo_default_instance_;
    new (ptr) ::kvrpcpb::LockInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockInfo_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockInfo_kvrpcpb_2eproto}, {}};

static void InitDefaultsscc_info_Mutation_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_Mutation_default_instance_;
    new (ptr) ::kvrpcpb::Mutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mutation_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mutation_kvrpcpb_2eproto}, {}};

static void InitDefaultsscc_info_PrewriteRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_PrewriteRequest_default_instance_;
    new (ptr) ::kvrpcpb::PrewriteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrewriteRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PrewriteRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,
      &scc_info_Mutation_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_PrewriteResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_PrewriteResponse_default_instance_;
    new (ptr) ::kvrpcpb::PrewriteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrewriteResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PrewriteResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawDeleteRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawDeleteRequest_default_instance_;
    new (ptr) ::kvrpcpb::RawDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawDeleteRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawDeleteRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawDeleteResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawDeleteResponse_default_instance_;
    new (ptr) ::kvrpcpb::RawDeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawDeleteResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawDeleteResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_RawGetRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawGetRequest_default_instance_;
    new (ptr) ::kvrpcpb::RawGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawGetRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawGetRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawGetResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawGetResponse_default_instance_;
    new (ptr) ::kvrpcpb::RawGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawGetResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawGetResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_RawPutRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawPutRequest_default_instance_;
    new (ptr) ::kvrpcpb::RawPutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawPutRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawPutRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawPutResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawPutResponse_default_instance_;
    new (ptr) ::kvrpcpb::RawPutResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawPutResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawPutResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_RawScanRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawScanRequest_default_instance_;
    new (ptr) ::kvrpcpb::RawScanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawScanRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawScanRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawScanResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawScanResponse_default_instance_;
    new (ptr) ::kvrpcpb::RawScanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RawScanResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RawScanResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KvPair_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_ResolveLockRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_ResolveLockRequest_default_instance_;
    new (ptr) ::kvrpcpb::ResolveLockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResolveLockRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResolveLockRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_ResolveLockResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_ResolveLockResponse_default_instance_;
    new (ptr) ::kvrpcpb::ResolveLockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResolveLockResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResolveLockResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_ScanRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_ScanRequest_default_instance_;
    new (ptr) ::kvrpcpb::ScanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScanRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_ScanResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_ScanResponse_default_instance_;
    new (ptr) ::kvrpcpb::ScanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScanResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ScanResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KvPair_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_WriteConflict_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_WriteConflict_default_instance_;
    new (ptr) ::kvrpcpb::WriteConflict();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteConflict_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteConflict_kvrpcpb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kvrpcpb_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kvrpcpb_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kvrpcpb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kvrpcpb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetRequest, cf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, value_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, not_found_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, value_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, cf_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, id_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteRequest, cf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, start_key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, cf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanResponse, error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanResponse, kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, value_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, not_found_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, mutations_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, primary_lock_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, start_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, lock_ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteResponse, errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, start_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, keys_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, commit_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, start_key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanResponse, pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackRequest, start_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, primary_key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, lock_ts_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, current_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, lock_ttl_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, commit_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockRequest, start_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockRequest, commit_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KvPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KvPair, error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KvPair, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KvPair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Mutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Mutation, op_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Mutation, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Mutation, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, locked_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, retryable_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, abort_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, conflict_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, primary_lock_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, lock_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, lock_ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, start_ts_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, conflict_ts_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, primary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, region_id_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, region_epoch_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, peer_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, term_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kvrpcpb::RawGetRequest)},
  { 8, -1, sizeof(::kvrpcpb::RawGetResponse)},
  { 17, -1, sizeof(::kvrpcpb::RawPutRequest)},
  { 28, -1, sizeof(::kvrpcpb::RawPutResponse)},
  { 35, -1, sizeof(::kvrpcpb::RawDeleteRequest)},
  { 43, -1, sizeof(::kvrpcpb::RawDeleteResponse)},
  { 50, -1, sizeof(::kvrpcpb::RawScanRequest)},
  { 59, -1, sizeof(::kvrpcpb::RawScanResponse)},
  { 67, -1, sizeof(::kvrpcpb::GetRequest)},
  { 75, -1, sizeof(::kvrpcpb::GetResponse)},
  { 84, -1, sizeof(::kvrpcpb::PrewriteRequest)},
  { 94, -1, sizeof(::kvrpcpb::PrewriteResponse)},
  { 101, -1, sizeof(::kvrpcpb::CommitRequest)},
  { 110, -1, sizeof(::kvrpcpb::CommitResponse)},
  { 117, -1, sizeof(::kvrpcpb::ScanRequest)},
  { 126, -1, sizeof(::kvrpcpb::ScanResponse)},
  { 133, -1, sizeof(::kvrpcpb::BatchRollbackRequest)},
  { 141, -1, sizeof(::kvrpcpb::BatchRollbackResponse)},
  { 148, -1, sizeof(::kvrpcpb::CheckTxnStatusRequest)},
  { 157, -1, sizeof(::kvrpcpb::CheckTxnStatusResponse)},
  { 166, -1, sizeof(::kvrpcpb::ResolveLockRequest)},
  { 174, -1, sizeof(::kvrpcpb::ResolveLockResponse)},
  { 181, -1, sizeof(::kvrpcpb::KvPair)},
  { 189, -1, sizeof(::kvrpcpb::Mutation)},
  { 197, -1, sizeof(::kvrpcpb::KeyError)},
  { 206, -1, sizeof(::kvrpcpb::LockInfo)},
  { 215, -1, sizeof(::kvrpcpb::WriteConflict)},
  { 224, -1, sizeof(::kvrpcpb::Context)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawPutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawPutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawScanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_GetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_PrewriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_PrewriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_CommitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_CommitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_ScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_ScanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_BatchRollbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_BatchRollbackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_CheckTxnStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_CheckTxnStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_ResolveLockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_ResolveLockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_KvPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_Mutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_KeyError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_LockInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_WriteConflict_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_Context_default_instance_),
};

const char descriptor_table_protodef_kvrpcpb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rkvrpcpb.proto\022\007kvrpcpb\032\014metapb.proto\032\r"
  "errorpb.proto\032\024gogoproto/gogo.proto\"K\n\rR"
  "awGetRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb."
  "Context\022\013\n\003key\030\002 \001(\014\022\n\n\002cf\030\003 \001(\t\"g\n\016RawG"
  "etResponse\022$\n\014region_error\030\001 \001(\0132\016.error"
  "pb.Error\022\r\n\005error\030\002 \001(\t\022\r\n\005value\030\003 \001(\014\022\021"
  "\n\tnot_found\030\004 \001(\010\"t\n\rRawPutRequest\022!\n\007co"
  "ntext\030\001 \001(\0132\020.kvrpcpb.Context\022\013\n\003key\030\002 \001"
  "(\014\022\r\n\005value\030\003 \001(\014\022\n\n\002cf\030\004 \001(\t\022\n\n\002id\030\005 \001("
  "\004\022\014\n\004type\030\006 \001(\r\"E\n\016RawPutResponse\022$\n\014reg"
  "ion_error\030\001 \001(\0132\016.errorpb.Error\022\r\n\005error"
  "\030\002 \001(\t\"N\n\020RawDeleteRequest\022!\n\007context\030\001 "
  "\001(\0132\020.kvrpcpb.Context\022\013\n\003key\030\002 \001(\014\022\n\n\002cf"
  "\030\003 \001(\t\"H\n\021RawDeleteResponse\022$\n\014region_er"
  "ror\030\001 \001(\0132\016.errorpb.Error\022\r\n\005error\030\002 \001(\t"
  "\"a\n\016RawScanRequest\022!\n\007context\030\001 \001(\0132\020.kv"
  "rpcpb.Context\022\021\n\tstart_key\030\002 \001(\014\022\r\n\005limi"
  "t\030\003 \001(\r\022\n\n\002cf\030\004 \001(\t\"d\n\017RawScanResponse\022$"
  "\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022\r\n\005"
  "error\030\002 \001(\t\022\034\n\003kvs\030\003 \003(\0132\017.kvrpcpb.KvPai"
  "r\"M\n\nGetRequest\022!\n\007context\030\001 \001(\0132\020.kvrpc"
  "pb.Context\022\013\n\003key\030\002 \001(\014\022\017\n\007version\030\003 \001(\004"
  "\"w\n\013GetResponse\022$\n\014region_error\030\001 \001(\0132\016."
  "errorpb.Error\022 \n\005error\030\002 \001(\0132\021.kvrpcpb.K"
  "eyError\022\r\n\005value\030\003 \001(\014\022\021\n\tnot_found\030\004 \001("
  "\010\"\231\001\n\017PrewriteRequest\022!\n\007context\030\001 \001(\0132\020"
  ".kvrpcpb.Context\022$\n\tmutations\030\002 \003(\0132\021.kv"
  "rpcpb.Mutation\022\024\n\014primary_lock\030\003 \001(\014\022\025\n\r"
  "start_version\030\004 \001(\004\022\020\n\010lock_ttl\030\005 \001(\004\"[\n"
  "\020PrewriteResponse\022$\n\014region_error\030\001 \001(\0132"
  "\016.errorpb.Error\022!\n\006errors\030\002 \003(\0132\021.kvrpcp"
  "b.KeyError\"o\n\rCommitRequest\022!\n\007context\030\001"
  " \001(\0132\020.kvrpcpb.Context\022\025\n\rstart_version\030"
  "\002 \001(\004\022\014\n\004keys\030\003 \003(\014\022\026\n\016commit_version\030\004 "
  "\001(\004\"X\n\016CommitResponse\022$\n\014region_error\030\001 "
  "\001(\0132\016.errorpb.Error\022 \n\005error\030\002 \001(\0132\021.kvr"
  "pcpb.KeyError\"c\n\013ScanRequest\022!\n\007context\030"
  "\001 \001(\0132\020.kvrpcpb.Context\022\021\n\tstart_key\030\002 \001"
  "(\014\022\r\n\005limit\030\003 \001(\r\022\017\n\007version\030\004 \001(\004\"T\n\014Sc"
  "anResponse\022$\n\014region_error\030\001 \001(\0132\016.error"
  "pb.Error\022\036\n\005pairs\030\002 \003(\0132\017.kvrpcpb.KvPair"
  "\"^\n\024BatchRollbackRequest\022!\n\007context\030\001 \001("
  "\0132\020.kvrpcpb.Context\022\025\n\rstart_version\030\002 \001"
  "(\004\022\014\n\004keys\030\003 \003(\014\"_\n\025BatchRollbackRespons"
  "e\022$\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022"
  " \n\005error\030\002 \001(\0132\021.kvrpcpb.KeyError\"t\n\025Che"
  "ckTxnStatusRequest\022!\n\007context\030\001 \001(\0132\020.kv"
  "rpcpb.Context\022\023\n\013primary_key\030\002 \001(\014\022\017\n\007lo"
  "ck_ts\030\003 \001(\004\022\022\n\ncurrent_ts\030\004 \001(\004\"\211\001\n\026Chec"
  "kTxnStatusResponse\022$\n\014region_error\030\001 \001(\013"
  "2\016.errorpb.Error\022\020\n\010lock_ttl\030\002 \001(\004\022\026\n\016co"
  "mmit_version\030\003 \001(\004\022\037\n\006action\030\004 \001(\0162\017.kvr"
  "pcpb.Action\"f\n\022ResolveLockRequest\022!\n\007con"
  "text\030\001 \001(\0132\020.kvrpcpb.Context\022\025\n\rstart_ve"
  "rsion\030\002 \001(\004\022\026\n\016commit_version\030\003 \001(\004\"]\n\023R"
  "esolveLockResponse\022$\n\014region_error\030\001 \001(\013"
  "2\016.errorpb.Error\022 \n\005error\030\002 \001(\0132\021.kvrpcp"
  "b.KeyError\"F\n\006KvPair\022 \n\005error\030\001 \001(\0132\021.kv"
  "rpcpb.KeyError\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001"
  "(\014\"\?\n\010Mutation\022\027\n\002op\030\001 \001(\0162\013.kvrpcpb.Op\022"
  "\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"y\n\010KeyError\022"
  "!\n\006locked\030\001 \001(\0132\021.kvrpcpb.LockInfo\022\021\n\tre"
  "tryable\030\002 \001(\t\022\r\n\005abort\030\003 \001(\t\022(\n\010conflict"
  "\030\004 \001(\0132\026.kvrpcpb.WriteConflict\"U\n\010LockIn"
  "fo\022\024\n\014primary_lock\030\001 \001(\014\022\024\n\014lock_version"
  "\030\002 \001(\004\022\013\n\003key\030\003 \001(\014\022\020\n\010lock_ttl\030\004 \001(\004\"T\n"
  "\rWriteConflict\022\020\n\010start_ts\030\001 \001(\004\022\023\n\013conf"
  "lict_ts\030\002 \001(\004\022\013\n\003key\030\003 \001(\014\022\017\n\007primary\030\004 "
  "\001(\014\"q\n\007Context\022\021\n\tregion_id\030\001 \001(\004\022)\n\014reg"
  "ion_epoch\030\002 \001(\0132\023.metapb.RegionEpoch\022\032\n\004"
  "peer\030\003 \001(\0132\014.metapb.Peer\022\014\n\004term\030\005 \001(\004*."
  "\n\002Op\022\007\n\003Put\020\000\022\007\n\003Del\020\001\022\014\n\010Rollback\020\002\022\010\n\004"
  "Lock\020\003*G\n\006Action\022\014\n\010NoAction\020\000\022\025\n\021TTLExp"
  "ireRollback\020\001\022\030\n\024LockNotExistRollback\020\002B"
  "\014\310\342\036\001\340\342\036\001\320\342\036\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kvrpcpb_2eproto_deps[3] = {
  &::descriptor_table_errorpb_2eproto,
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_metapb_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kvrpcpb_2eproto_sccs[28] = {
  &scc_info_BatchRollbackRequest_kvrpcpb_2eproto.base,
  &scc_info_BatchRollbackResponse_kvrpcpb_2eproto.base,
  &scc_info_CheckTxnStatusRequest_kvrpcpb_2eproto.base,
  &scc_info_CheckTxnStatusResponse_kvrpcpb_2eproto.base,
  &scc_info_CommitRequest_kvrpcpb_2eproto.base,
  &scc_info_CommitResponse_kvrpcpb_2eproto.base,
  &scc_info_Context_kvrpcpb_2eproto.base,
  &scc_info_GetRequest_kvrpcpb_2eproto.base,
  &scc_info_GetResponse_kvrpcpb_2eproto.base,
  &scc_info_KeyError_kvrpcpb_2eproto.base,
  &scc_info_KvPair_kvrpcpb_2eproto.base,
  &scc_info_LockInfo_kvrpcpb_2eproto.base,
  &scc_info_Mutation_kvrpcpb_2eproto.base,
  &scc_info_PrewriteRequest_kvrpcpb_2eproto.base,
  &scc_info_PrewriteResponse_kvrpcpb_2eproto.base,
  &scc_info_RawDeleteRequest_kvrpcpb_2eproto.base,
  &scc_info_RawDeleteResponse_kvrpcpb_2eproto.base,
  &scc_info_RawGetRequest_kvrpcpb_2eproto.base,
  &scc_info_RawGetResponse_kvrpcpb_2eproto.base,
  &scc_info_RawPutRequest_kvrpcpb_2eproto.base,
  &scc_info_RawPutResponse_kvrpcpb_2eproto.base,
  &scc_info_RawScanRequest_kvrpcpb_2eproto.base,
  &scc_info_RawScanResponse_kvrpcpb_2eproto.base,
  &scc_info_ResolveLockRequest_kvrpcpb_2eproto.base,
  &scc_info_ResolveLockResponse_kvrpcpb_2eproto.base,
  &scc_info_ScanRequest_kvrpcpb_2eproto.base,
  &scc_info_ScanResponse_kvrpcpb_2eproto.base,
  &scc_info_WriteConflict_kvrpcpb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kvrpcpb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvrpcpb_2eproto = {
  false, false, descriptor_table_protodef_kvrpcpb_2eproto, "kvrpcpb.proto", 2981,
  &descriptor_table_kvrpcpb_2eproto_once, descriptor_table_kvrpcpb_2eproto_sccs, descriptor_table_kvrpcpb_2eproto_deps, 28, 3,
  schemas, file_default_instances, TableStruct_kvrpcpb_2eproto::offsets,
  file_level_metadata_kvrpcpb_2eproto, 28, file_level_enum_descriptors_kvrpcpb_2eproto, file_level_service_descriptors_kvrpcpb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kvrpcpb_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kvrpcpb_2eproto)), true);
namespace kvrpcpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kvrpcpb_2eproto);
  return file_level_enum_descriptors_kvrpcpb_2eproto[0];
}
bool Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kvrpcpb_2eproto);
  return file_level_enum_descriptors_kvrpcpb_2eproto[1];
}
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RawGetRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const RawGetRequest* msg);
};

const ::kvrpcpb::Context&
RawGetRequest::_Internal::context(const RawGetRequest* msg) {
  return *msg->context_;
}
RawGetRequest::RawGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.RawGetRequest)
}
RawGetRequest::RawGetRequest(const RawGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cf().empty()) {
    cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cf(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawGetRequest)
}

void RawGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawGetRequest_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_ = nullptr;
}

RawGetRequest::~RawGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawGetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void RawGetRequest::ArenaDtor(void* object) {
  RawGetRequest* _this = reinterpret_cast< RawGetRequest* >(object);
  (void)_this;
}
void RawGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawGetRequest& RawGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawGetRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  cf_.ClearToEmpty();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.RawGetRequest.cf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawGetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cf().data(), static_cast<int>(this->_internal_cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetRequest.cf");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawGetRequest)
  return target;
}

size_t RawGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cf());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RawGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawGetRequest)
    MergeFrom(*source);
  }
}

void RawGetRequest::MergeFrom(const RawGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.cf().size() > 0) {
    _internal_set_cf(from._internal_cf());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
}

void RawGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGetRequest::CopyFrom(const RawGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawGetRequest::IsInitialized() const {
  return true;
}

void RawGetRequest::InternalSwap(RawGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawGetResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const RawGetResponse* msg);
};

const ::errorpb::Error&
RawGetResponse::_Internal::region_error(const RawGetResponse* msg) {
  return *msg->region_error_;
}
void RawGetResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
RawGetResponse::RawGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.RawGetResponse)
}
RawGetResponse::RawGetResponse(const RawGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  not_found_ = from.not_found_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawGetResponse)
}

void RawGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawGetResponse_kvrpcpb_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&region_error_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&not_found_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(not_found_));
}

RawGetResponse::~RawGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawGetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
}

void RawGetResponse::ArenaDtor(void* object) {
  RawGetResponse* _this = reinterpret_cast< RawGetResponse* >(object);
  (void)_this;
}
void RawGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawGetResponse& RawGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawGetResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  not_found_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.RawGetResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          not_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawGetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_not_found(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawGetResponse)
  return target;
}

size_t RawGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawGetResponse)
    MergeFrom(*source);
  }
}

void RawGetResponse::MergeFrom(const RawGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
  if (from.not_found() != 0) {
    _internal_set_not_found(from._internal_not_found());
  }
}

void RawGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGetResponse::CopyFrom(const RawGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawGetResponse::IsInitialized() const {
  return true;
}

void RawGetResponse::InternalSwap(RawGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawGetResponse, not_found_)
      + sizeof(RawGetResponse::not_found_)
      - PROTOBUF_FIELD_OFFSET(RawGetResponse, region_error_)>(
          reinterpret_cast<char*>(&region_error_),
          reinterpret_cast<char*>(&other->region_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawPutRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const RawPutRequest* msg);
};

const ::kvrpcpb::Context&
RawPutRequest::_Internal::context(const RawPutRequest* msg) {
  return *msg->context_;
}
RawPutRequest::RawPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.RawPutRequest)
}
RawPutRequest::RawPutRequest(const RawPutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cf().empty()) {
    cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cf(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawPutRequest)
}

void RawPutRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawPutRequest_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&context_)) + sizeof(type_));
}

RawPutRequest::~RawPutRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawPutRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawPutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void RawPutRequest::ArenaDtor(void* object) {
  RawPutRequest* _this = reinterpret_cast< RawPutRequest* >(object);
  (void)_this;
}
void RawPutRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawPutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawPutRequest& RawPutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawPutRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawPutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  cf_.ClearToEmpty();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawPutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.RawPutRequest.cf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawPutRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawPutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cf().data(), static_cast<int>(this->_internal_cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutRequest.cf");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cf(), target);
  }

  // uint64 id = 5;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_id(), target);
  }

  // uint32 type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawPutRequest)
  return target;
}

size_t RawPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawPutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cf());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint32 type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawPutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RawPutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawPutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawPutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawPutRequest)
    MergeFrom(*source);
  }
}

void RawPutRequest::MergeFrom(const RawPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.cf().size() > 0) {
    _internal_set_cf(from._internal_cf());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RawPutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawPutRequest::CopyFrom(const RawPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawPutRequest::IsInitialized() const {
  return true;
}

void RawPutRequest::InternalSwap(RawPutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawPutRequest, type_)
      + sizeof(RawPutRequest::type_)
      - PROTOBUF_FIELD_OFFSET(RawPutRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawPutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawPutResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const RawPutResponse* msg);
};

const ::errorpb::Error&
RawPutResponse::_Internal::region_error(const RawPutResponse* msg) {
  return *msg->region_error_;
}
void RawPutResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
RawPutResponse::RawPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.RawPutResponse)
}
RawPutResponse::RawPutResponse(const RawPutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawPutResponse)
}

void RawPutResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawPutResponse_kvrpcpb_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_error_ = nullptr;
}

RawPutResponse::~RawPutResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawPutResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawPutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
}

void RawPutResponse::ArenaDtor(void* object) {
  RawPutResponse* _this = reinterpret_cast< RawPutResponse* >(object);
  (void)_this;
}
void RawPutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawPutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawPutResponse& RawPutResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawPutResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawPutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawPutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.RawPutResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawPutResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawPutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawPutResponse)
  return target;
}

size_t RawPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawPutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawPutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawPutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawPutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawPutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawPutResponse)
    MergeFrom(*source);
  }
}

void RawPutResponse::MergeFrom(const RawPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
}

void RawPutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawPutResponse::CopyFrom(const RawPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawPutResponse::IsInitialized() const {
  return true;
}

void RawPutResponse::InternalSwap(RawPutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawPutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawDeleteRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const RawDeleteRequest* msg);
};

const ::kvrpcpb::Context&
RawDeleteRequest::_Internal::context(const RawDeleteRequest* msg) {
  return *msg->context_;
}
RawDeleteRequest::RawDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.RawDeleteRequest)
}
RawDeleteRequest::RawDeleteRequest(const RawDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cf().empty()) {
    cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cf(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawDeleteRequest)
}

void RawDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawDeleteRequest_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_ = nullptr;
}

RawDeleteRequest::~RawDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawDeleteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void RawDeleteRequest::ArenaDtor(void* object) {
  RawDeleteRequest* _this = reinterpret_cast< RawDeleteRequest* >(object);
  (void)_this;
}
void RawDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawDeleteRequest& RawDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawDeleteRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  cf_.ClearToEmpty();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.RawDeleteRequest.cf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawDeleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cf().data(), static_cast<int>(this->_internal_cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteRequest.cf");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawDeleteRequest)
  return target;
}

size_t RawDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawDeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cf());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RawDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawDeleteRequest)
    MergeFrom(*source);
  }
}

void RawDeleteRequest::MergeFrom(const RawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.cf().size() > 0) {
    _internal_set_cf(from._internal_cf());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
}

void RawDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawDeleteRequest::CopyFrom(const RawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawDeleteRequest::IsInitialized() const {
  return true;
}

void RawDeleteRequest::InternalSwap(RawDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawDeleteResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const RawDeleteResponse* msg);
};

const ::errorpb::Error&
RawDeleteResponse::_Internal::region_error(const RawDeleteResponse* msg) {
  return *msg->region_error_;
}
void RawDeleteResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
RawDeleteResponse::RawDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.RawDeleteResponse)
}
RawDeleteResponse::RawDeleteResponse(const RawDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawDeleteResponse)
}

void RawDeleteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawDeleteResponse_kvrpcpb_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_error_ = nullptr;
}

RawDeleteResponse::~RawDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawDeleteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
}

void RawDeleteResponse::ArenaDtor(void* object) {
  RawDeleteResponse* _this = reinterpret_cast< RawDeleteResponse* >(object);
  (void)_this;
}
void RawDeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawDeleteResponse& RawDeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawDeleteResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.RawDeleteResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawDeleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawDeleteResponse)
  return target;
}

size_t RawDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawDeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawDeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawDeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawDeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawDeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawDeleteResponse)
    MergeFrom(*source);
  }
}

void RawDeleteResponse::MergeFrom(const RawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
}

void RawDeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawDeleteResponse::CopyFrom(const RawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawDeleteResponse::IsInitialized() const {
  return true;
}

void RawDeleteResponse::InternalSwap(RawDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawDeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawScanRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const RawScanRequest* msg);
};

const ::kvrpcpb::Context&
RawScanRequest::_Internal::context(const RawScanRequest* msg) {
  return *msg->context_;
}
RawScanRequest::RawScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.RawScanRequest)
}
RawScanRequest::RawScanRequest(const RawScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_key().empty()) {
    start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_key(), 
      GetArena());
  }
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cf().empty()) {
    cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cf(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawScanRequest)
}

void RawScanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawScanRequest_kvrpcpb_2eproto.base);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&context_)) + sizeof(limit_));
}

RawScanRequest::~RawScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawScanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void RawScanRequest::ArenaDtor(void* object) {
  RawScanRequest* _this = reinterpret_cast< RawScanRequest* >(object);
  (void)_this;
}
void RawScanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawScanRequest& RawScanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawScanRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmpty();
  cf_.ClearToEmpty();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes start_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.RawScanRequest.cf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawScanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_start_key(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_limit(), target);
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cf().data(), static_cast<int>(this->_internal_cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawScanRequest.cf");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawScanRequest)
  return target;
}

size_t RawScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawScanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_key());
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cf());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RawScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawScanRequest)
    MergeFrom(*source);
  }
}

void RawScanRequest::MergeFrom(const RawScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {
    _internal_set_start_key(from._internal_start_key());
  }
  if (from.cf().size() > 0) {
    _internal_set_cf(from._internal_cf());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void RawScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawScanRequest::CopyFrom(const RawScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawScanRequest::IsInitialized() const {
  return true;
}

void RawScanRequest::InternalSwap(RawScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_key_.Swap(&other->start_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawScanRequest, limit_)
      + sizeof(RawScanRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(RawScanRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RawScanResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const RawScanResponse* msg);
};

const ::errorpb::Error&
RawScanResponse::_Internal::region_error(const RawScanResponse* msg) {
  return *msg->region_error_;
}
void RawScanResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
RawScanResponse::RawScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  kvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.RawScanResponse)
}
RawScanResponse::RawScanResponse(const RawScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      kvs_(from.kvs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawScanResponse)
}

void RawScanResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawScanResponse_kvrpcpb_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_error_ = nullptr;
}

RawScanResponse::~RawScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawScanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawScanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
}

void RawScanResponse::ArenaDtor(void* object) {
  RawScanResponse* _this = reinterpret_cast< RawScanResponse* >(object);
  (void)_this;
}
void RawScanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawScanResponse& RawScanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawScanResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  error_.ClearToEmpty();
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawScanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.RawScanResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kvrpcpb.KvPair kvs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawScanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawScanResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // repeated .kvrpcpb.KvPair kvs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_kvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawScanResponse)
  return target;
}

size_t RawScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawScanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kvrpcpb.KvPair kvs = 3;
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawScanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawScanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawScanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawScanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawScanResponse)
    MergeFrom(*source);
  }
}

void RawScanResponse::MergeFrom(const RawScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
}

void RawScanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawScanResponse::CopyFrom(const RawScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawScanResponse::IsInitialized() const {
  return true;
}

void RawScanResponse::InternalSwap(RawScanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  kvs_.InternalSwap(&other->kvs_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawScanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const GetRequest* msg);
};

const ::kvrpcpb::Context&
GetRequest::_Internal::context(const GetRequest* msg) {
  return *msg->context_;
}
GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.GetRequest)
}

void GetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRequest_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&context_)) + sizeof(version_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.GetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void GetRequest::ArenaDtor(void* object) {
  GetRequest* _this = reinterpret_cast< GetRequest* >(object);
  (void)_this;
}
void GetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.GetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.GetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void GetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRequest, version_)
      + sizeof(GetRequest::version_)
      - PROTOBUF_FIELD_OFFSET(GetRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const GetResponse* msg);
  static const ::kvrpcpb::KeyError& error(const GetResponse* msg);
};

const ::errorpb::Error&
GetResponse::_Internal::region_error(const GetResponse* msg) {
  return *msg->region_error_;
}
const ::kvrpcpb::KeyError&
GetResponse::_Internal::error(const GetResponse* msg) {
  return *msg->error_;
}
void GetResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  not_found_ = from.not_found_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.GetResponse)
}

void GetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResponse_kvrpcpb_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&region_error_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&not_found_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(not_found_));
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.GetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
  if (this != internal_default_instance()) delete error_;
}

void GetResponse::ArenaDtor(void* object) {
  GetResponse* _this = reinterpret_cast< GetResponse* >(object);
  (void)_this;
}
void GetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  not_found_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.KeyError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          not_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_not_found(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.GetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.GetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
  if (from.has_error()) {
    _internal_mutable_error()->::kvrpcpb::KeyError::MergeFrom(from._internal_error());
  }
  if (from.not_found() != 0) {
    _internal_set_not_found(from._internal_not_found());
  }
}

void GetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetResponse, not_found_)
      + sizeof(GetResponse::not_found_)
      - PROTOBUF_FIELD_OFFSET(GetResponse, region_error_)>(
          reinterpret_cast<char*>(&region_error_),
          reinterpret_cast<char*>(&other->region_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrewriteRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const PrewriteRequest* msg);
};

const ::kvrpcpb::Context&
PrewriteRequest::_Internal::context(const PrewriteRequest* msg) {
  return *msg->context_;
}
PrewriteRequest::PrewriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mutations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.PrewriteRequest)
}
PrewriteRequest::PrewriteRequest(const PrewriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mutations_(from.mutations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  primary_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_primary_lock().empty()) {
    primary_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_primary_lock(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&start_version_, &from.start_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_ttl_) -
    reinterpret_cast<char*>(&start_version_)) + sizeof(lock_ttl_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.PrewriteRequest)
}

void PrewriteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrewriteRequest_kvrpcpb_2eproto.base);
  primary_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lock_ttl_) -
      reinterpret_cast<char*>(&context_)) + sizeof(lock_ttl_));
}

PrewriteRequest::~PrewriteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.PrewriteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrewriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  primary_lock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void PrewriteRequest::ArenaDtor(void* object) {
  PrewriteRequest* _this = reinterpret_cast< PrewriteRequest* >(object);
  (void)_this;
}
void PrewriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrewriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrewriteRequest& PrewriteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrewriteRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void PrewriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.PrewriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutations_.Clear();
  primary_lock_.ClearToEmpty();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&start_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_ttl_) -
      reinterpret_cast<char*>(&start_version_)) + sizeof(lock_ttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrewriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kvrpcpb.Mutation mutations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mutations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes primary_lock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_primary_lock();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_ttl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lock_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrewriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.PrewriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // repeated .kvrpcpb.Mutation mutations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mutations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mutations(i), target, stream);
  }

  // bytes primary_lock = 3;
  if (this->primary_lock().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_primary_lock(), target);
  }

  // uint64 start_version = 4;
  if (this->start_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_start_version(), target);
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_lock_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.PrewriteRequest)
  return target;
}

size_t PrewriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.PrewriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kvrpcpb.Mutation mutations = 2;
  total_size += 1UL * this->_internal_mutations_size();
  for (const auto& msg : this->mutations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes primary_lock = 3;
  if (this->primary_lock().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_primary_lock());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 start_version = 4;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_version());
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lock_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrewriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.PrewriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrewriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrewriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.PrewriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.PrewriteRequest)
    MergeFrom(*source);
  }
}

void PrewriteRequest::MergeFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.PrewriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutations_.MergeFrom(from.mutations_);
  if (from.primary_lock().size() > 0) {
    _internal_set_primary_lock(from._internal_primary_lock());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
  if (from.start_version() != 0) {
    _internal_set_start_version(from._internal_start_version());
  }
  if (from.lock_ttl() != 0) {
    _internal_set_lock_ttl(from._internal_lock_ttl());
  }
}

void PrewriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteRequest::CopyFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrewriteRequest::IsInitialized() const {
  return true;
}

void PrewriteRequest::InternalSwap(PrewriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mutations_.InternalSwap(&other->mutations_);
  primary_lock_.Swap(&other->primary_lock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrewriteRequest, lock_ttl_)
      + sizeof(PrewriteRequest::lock_ttl_)
      - PROTOBUF_FIELD_OFFSET(PrewriteRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrewriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrewriteResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const PrewriteResponse* msg);
};

const ::errorpb::Error&
PrewriteResponse::_Internal::region_error(const PrewriteResponse* msg) {
  return *msg->region_error_;
}
void PrewriteResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
PrewriteResponse::PrewriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.PrewriteResponse)
}
PrewriteResponse::PrewriteResponse(const PrewriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.PrewriteResponse)
}

void PrewriteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrewriteResponse_kvrpcpb_2eproto.base);
  region_error_ = nullptr;
}

PrewriteResponse::~PrewriteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.PrewriteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrewriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete region_error_;
}

void PrewriteResponse::ArenaDtor(void* object) {
  PrewriteResponse* _this = reinterpret_cast< PrewriteResponse* >(object);
  (void)_this;
}
void PrewriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrewriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrewriteResponse& PrewriteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrewriteResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void PrewriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.PrewriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrewriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kvrpcpb.KeyError errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrewriteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.PrewriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // repeated .kvrpcpb.KeyError errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_errors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.PrewriteResponse)
  return target;
}

size_t PrewriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.PrewriteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kvrpcpb.KeyError errors = 2;
  total_size += 1UL * this->_internal_errors_size();
  for (const auto& msg : this->errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrewriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.PrewriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrewriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrewriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.PrewriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.PrewriteResponse)
    MergeFrom(*source);
  }
}

void PrewriteResponse::MergeFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.PrewriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
}

void PrewriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteResponse::CopyFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrewriteResponse::IsInitialized() const {
  return true;
}

void PrewriteResponse::InternalSwap(PrewriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  errors_.InternalSwap(&other->errors_);
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrewriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommitRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const CommitRequest* msg);
};

const ::kvrpcpb::Context&
CommitRequest::_Internal::context(const CommitRequest* msg) {
  return *msg->context_;
}
CommitRequest::CommitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.CommitRequest)
}
CommitRequest::CommitRequest(const CommitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&start_version_, &from.start_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_version_) -
    reinterpret_cast<char*>(&start_version_)) + sizeof(commit_version_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CommitRequest)
}

void CommitRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitRequest_kvrpcpb_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&commit_version_) -
      reinterpret_cast<char*>(&context_)) + sizeof(commit_version_));
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CommitRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete context_;
}

void CommitRequest::ArenaDtor(void* object) {
  CommitRequest* _this = reinterpret_cast< CommitRequest* >(object);
  (void)_this;
}
void CommitRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitRequest& CommitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CommitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&start_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_version_) -
      reinterpret_cast<char*>(&start_version_)) + sizeof(commit_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 commit_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          commit_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CommitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start_version(), target);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(3, s, target);
  }

  // uint64 commit_version = 4;
  if (this->commit_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_commit_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CommitRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      keys_.Get(i));
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_version());
  }

  // uint64 commit_version = 4;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CommitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CommitRequest)
    MergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
  if (from.start_version() != 0) {
    _internal_set_start_version(from._internal_start_version());
  }
  if (from.commit_version() != 0) {
    _internal_set_commit_version(from._internal_commit_version());
  }
}

void CommitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {
  return true;
}

void CommitRequest::InternalSwap(CommitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitRequest, commit_version_)
      + sizeof(CommitRequest::commit_version_)
      - PROTOBUF_FIELD_OFFSET(CommitRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommitResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const CommitResponse* msg);
  static const ::kvrpcpb::KeyError& error(const CommitResponse* msg);
};

const ::errorpb::Error&
CommitResponse::_Internal::region_error(const CommitResponse* msg) {
  return *msg->region_error_;
}
const ::kvrpcpb::KeyError&
CommitResponse::_Internal::error(const CommitResponse* msg) {
  return *msg->error_;
}
void CommitResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
CommitResponse::CommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.CommitResponse)
}
CommitResponse::CommitResponse(const CommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CommitResponse)
}

void CommitResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitResponse_kvrpcpb_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&region_error_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(error_));
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CommitResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete region_error_;
  if (this != internal_default_instance()) delete error_;
}

void CommitResponse::ArenaDtor(void* object) {
  CommitResponse* _this = reinterpret_cast< CommitResponse* >(object);
  (void)_this;
}
void CommitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitResponse& CommitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.KeyError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CommitResponse)
  return target;
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CommitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CommitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CommitResponse)
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
  if (from.has_error()) {
    _internal_mutable_error()->::kvrpcpb::KeyError::MergeFrom(from._internal_error());
  }
}

void CommitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {
  return true;
}

void CommitResponse::InternalSwap(CommitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitResponse, error_)
      + sizeof(CommitResponse::error_)
      - PROTOBUF_FIELD_OFFSET(CommitResponse, region_error_)>(
          reinterpret_cast<char*>(&region_error_),
          reinterpret_cast<char*>(&other->region_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScanRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const ScanRequest* msg);
};

const ::kvrpcpb::Context&
ScanRequest::_Internal::context(const ScanRequest* msg) {
  return *msg->context_;
}
ScanRequest::ScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.ScanRequest)
}
ScanRequest::ScanRequest(const ScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_key().empty()) {
    start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_key(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&version_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanRequest)
}

void ScanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanRequest_kvrpcpb_2eproto.base);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&context_)) + sizeof(limit_));
}

ScanRequest::~ScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void ScanRequest::ArenaDtor(void* object) {
  ScanRequest* _this = reinterpret_cast< ScanRequest* >(object);
  (void)_this;
}
void ScanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanRequest& ScanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void ScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmpty();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&version_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes start_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_start_key(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_limit(), target);
  }

  // uint64 version = 4;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanRequest)
  return target;
}

size_t ScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_key());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanRequest)
    MergeFrom(*source);
  }
}

void ScanRequest::MergeFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {
    _internal_set_start_key(from._internal_start_key());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void ScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRequest::CopyFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRequest::IsInitialized() const {
  return true;
}

void ScanRequest::InternalSwap(ScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_key_.Swap(&other->start_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScanRequest, limit_)
      + sizeof(ScanRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(ScanRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScanResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const ScanResponse* msg);
};

const ::errorpb::Error&
ScanResponse::_Internal::region_error(const ScanResponse* msg) {
  return *msg->region_error_;
}
void ScanResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
ScanResponse::ScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pairs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.ScanResponse)
}
ScanResponse::ScanResponse(const ScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanResponse)
}

void ScanResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanResponse_kvrpcpb_2eproto.base);
  region_error_ = nullptr;
}

ScanResponse::~ScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete region_error_;
}

void ScanResponse::ArenaDtor(void* object) {
  ScanResponse* _this = reinterpret_cast< ScanResponse* >(object);
  (void)_this;
}
void ScanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanResponse& ScanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void ScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairs_.Clear();
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kvrpcpb.KvPair pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pairs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanResponse)
  return target;
}

size_t ScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kvrpcpb.KvPair pairs = 2;
  total_size += 1UL * this->_internal_pairs_size();
  for (const auto& msg : this->pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanResponse)
    MergeFrom(*source);
  }
}

void ScanResponse::MergeFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairs_.MergeFrom(from.pairs_);
  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
}

void ScanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanResponse::CopyFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResponse::IsInitialized() const {
  return true;
}

void ScanResponse::InternalSwap(ScanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pairs_.InternalSwap(&other->pairs_);
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BatchRollbackRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const BatchRollbackRequest* msg);
};

const ::kvrpcpb::Context&
BatchRollbackRequest::_Internal::context(const BatchRollbackRequest* msg) {
  return *msg->context_;
}
BatchRollbackRequest::BatchRollbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.BatchRollbackRequest)
}
BatchRollbackRequest::BatchRollbackRequest(const BatchRollbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  start_version_ = from.start_version_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchRollbackRequest)
}

void BatchRollbackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchRollbackRequest_kvrpcpb_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&start_version_) -
      reinterpret_cast<char*>(&context_)) + sizeof(start_version_));
}

BatchRollbackRequest::~BatchRollbackRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchRollbackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchRollbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete context_;
}

void BatchRollbackRequest::ArenaDtor(void* object) {
  BatchRollbackRequest* _this = reinterpret_cast< BatchRollbackRequest* >(object);
  (void)_this;
}
void BatchRollbackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchRollbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRollbackRequest& BatchRollbackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchRollbackRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void BatchRollbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchRollbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  start_version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchRollbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchRollbackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchRollbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start_version(), target);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchRollbackRequest)
  return target;
}

size_t BatchRollbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchRollbackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      keys_.Get(i));
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRollbackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchRollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRollbackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchRollbackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchRollbackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchRollbackRequest)
    MergeFrom(*source);
  }
}

void BatchRollbackRequest::MergeFrom(const BatchRollbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchRollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
  if (from.start_version() != 0) {
    _internal_set_start_version(from._internal_start_version());
  }
}

void BatchRollbackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchRollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRollbackRequest::CopyFrom(const BatchRollbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchRollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRollbackRequest::IsInitialized() const {
  return true;
}

void BatchRollbackRequest::InternalSwap(BatchRollbackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchRollbackRequest, start_version_)
      + sizeof(BatchRollbackRequest::start_version_)
      - PROTOBUF_FIELD_OFFSET(BatchRollbackRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchRollbackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BatchRollbackResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const BatchRollbackResponse* msg);
  static const ::kvrpcpb::KeyError& error(const BatchRollbackResponse* msg);
};

const ::errorpb::Error&
BatchRollbackResponse::_Internal::region_error(const BatchRollbackResponse* msg) {
  return *msg->region_error_;
}
const ::kvrpcpb::KeyError&
BatchRollbackResponse::_Internal::error(const BatchRollbackResponse* msg) {
  return *msg->error_;
}
void BatchRollbackResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
BatchRollbackResponse::BatchRollbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.BatchRollbackResponse)
}
BatchRollbackResponse::BatchRollbackResponse(const BatchRollbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchRollbackResponse)
}

void BatchRollbackResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchRollbackResponse_kvrpcpb_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&region_error_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(error_));
}

BatchRollbackResponse::~BatchRollbackResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchRollbackResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchRollbackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete region_error_;
  if (this != internal_default_instance()) delete error_;
}

void BatchRollbackResponse::ArenaDtor(void* object) {
  BatchRollbackResponse* _this = reinterpret_cast< BatchRollbackResponse* >(object);
  (void)_this;
}
void BatchRollbackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchRollbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRollbackResponse& BatchRollbackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchRollbackResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void BatchRollbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchRollbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchRollbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.KeyError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchRollbackResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchRollbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchRollbackResponse)
  return target;
}

size_t BatchRollbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchRollbackResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRollbackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchRollbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRollbackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchRollbackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchRollbackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchRollbackResponse)
    MergeFrom(*source);
  }
}

void BatchRollbackResponse::MergeFrom(const BatchRollbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchRollbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
  if (from.has_error()) {
    _internal_mutable_error()->::kvrpcpb::KeyError::MergeFrom(from._internal_error());
  }
}

void BatchRollbackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchRollbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRollbackResponse::CopyFrom(const BatchRollbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchRollbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRollbackResponse::IsInitialized() const {
  return true;
}

void BatchRollbackResponse::InternalSwap(BatchRollbackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchRollbackResponse, error_)
      + sizeof(BatchRollbackResponse::error_)
      - PROTOBUF_FIELD_OFFSET(BatchRollbackResponse, region_error_)>(
          reinterpret_cast<char*>(&region_error_),
          reinterpret_cast<char*>(&other->region_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchRollbackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CheckTxnStatusRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const CheckTxnStatusRequest* msg);
};

const ::kvrpcpb::Context&
CheckTxnStatusRequest::_Internal::context(const CheckTxnStatusRequest* msg) {
  return *msg->context_;
}
CheckTxnStatusRequest::CheckTxnStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.CheckTxnStatusRequest)
}
CheckTxnStatusRequest::CheckTxnStatusRequest(const CheckTxnStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  primary_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_primary_key().empty()) {
    primary_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_primary_key(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&lock_ts_, &from.lock_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_ts_) -
    reinterpret_cast<char*>(&lock_ts_)) + sizeof(current_ts_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CheckTxnStatusRequest)
}

void CheckTxnStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckTxnStatusRequest_kvrpcpb_2eproto.base);
  primary_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&current_ts_) -
      reinterpret_cast<char*>(&context_)) + sizeof(current_ts_));
}

CheckTxnStatusRequest::~CheckTxnStatusRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CheckTxnStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckTxnStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  primary_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void CheckTxnStatusRequest::ArenaDtor(void* object) {
  CheckTxnStatusRequest* _this = reinterpret_cast< CheckTxnStatusRequest* >(object);
  (void)_this;
}
void CheckTxnStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckTxnStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckTxnStatusRequest& CheckTxnStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckTxnStatusRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void CheckTxnStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CheckTxnStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_key_.ClearToEmpty();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&lock_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_ts_) -
      reinterpret_cast<char*>(&lock_ts_)) + sizeof(current_ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckTxnStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes primary_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_primary_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lock_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          current_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckTxnStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CheckTxnStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_primary_key(), target);
  }

  // uint64 lock_ts = 3;
  if (this->lock_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lock_ts(), target);
  }

  // uint64 current_ts = 4;
  if (this->current_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_current_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CheckTxnStatusRequest)
  return target;
}

size_t CheckTxnStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CheckTxnStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_primary_key());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 lock_ts = 3;
  if (this->lock_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lock_ts());
  }

  // uint64 current_ts = 4;
  if (this->current_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckTxnStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CheckTxnStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckTxnStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckTxnStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CheckTxnStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CheckTxnStatusRequest)
    MergeFrom(*source);
  }
}

void CheckTxnStatusRequest::MergeFrom(const CheckTxnStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CheckTxnStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.primary_key().size() > 0) {
    _internal_set_primary_key(from._internal_primary_key());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
  if (from.lock_ts() != 0) {
    _internal_set_lock_ts(from._internal_lock_ts());
  }
  if (from.current_ts() != 0) {
    _internal_set_current_ts(from._internal_current_ts());
  }
}

void CheckTxnStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CheckTxnStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckTxnStatusRequest::CopyFrom(const CheckTxnStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CheckTxnStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckTxnStatusRequest::IsInitialized() const {
  return true;
}

void CheckTxnStatusRequest::InternalSwap(CheckTxnStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  primary_key_.Swap(&other->primary_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckTxnStatusRequest, current_ts_)
      + sizeof(CheckTxnStatusRequest::current_ts_)
      - PROTOBUF_FIELD_OFFSET(CheckTxnStatusRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckTxnStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CheckTxnStatusResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const CheckTxnStatusResponse* msg);
};

const ::errorpb::Error&
CheckTxnStatusResponse::_Internal::region_error(const CheckTxnStatusResponse* msg) {
  return *msg->region_error_;
}
void CheckTxnStatusResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
CheckTxnStatusResponse::CheckTxnStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.CheckTxnStatusResponse)
}
CheckTxnStatusResponse::CheckTxnStatusResponse(const CheckTxnStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  ::memcpy(&lock_ttl_, &from.lock_ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&lock_ttl_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CheckTxnStatusResponse)
}

void CheckTxnStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckTxnStatusResponse_kvrpcpb_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&region_error_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(action_));
}

CheckTxnStatusResponse::~CheckTxnStatusResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CheckTxnStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckTxnStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete region_error_;
}

void CheckTxnStatusResponse::ArenaDtor(void* object) {
  CheckTxnStatusResponse* _this = reinterpret_cast< CheckTxnStatusResponse* >(object);
  (void)_this;
}
void CheckTxnStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckTxnStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckTxnStatusResponse& CheckTxnStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckTxnStatusResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void CheckTxnStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CheckTxnStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  ::memset(&lock_ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&lock_ttl_)) + sizeof(action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckTxnStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lock_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          commit_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.Action action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::kvrpcpb::Action>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckTxnStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CheckTxnStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // uint64 lock_ttl = 2;
  if (this->lock_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lock_ttl(), target);
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_commit_version(), target);
  }

  // .kvrpcpb.Action action = 4;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CheckTxnStatusResponse)
  return target;
}

size_t CheckTxnStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CheckTxnStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // uint64 lock_ttl = 2;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lock_ttl());
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_version());
  }

  // .kvrpcpb.Action action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckTxnStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CheckTxnStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckTxnStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckTxnStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CheckTxnStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CheckTxnStatusResponse)
    MergeFrom(*source);
  }
}

void CheckTxnStatusResponse::MergeFrom(const CheckTxnStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CheckTxnStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
  if (from.lock_ttl() != 0) {
    _internal_set_lock_ttl(from._internal_lock_ttl());
  }
  if (from.commit_version() != 0) {
    _internal_set_commit_version(from._internal_commit_version());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void CheckTxnStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CheckTxnStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckTxnStatusResponse::CopyFrom(const CheckTxnStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CheckTxnStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckTxnStatusResponse::IsInitialized() const {
  return true;
}

void CheckTxnStatusResponse::InternalSwap(CheckTxnStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckTxnStatusResponse, action_)
      + sizeof(CheckTxnStatusResponse::action_)
      - PROTOBUF_FIELD_OFFSET(CheckTxnStatusResponse, region_error_)>(
          reinterpret_cast<char*>(&region_error_),
          reinterpret_cast<char*>(&other->region_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckTxnStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResolveLockRequest::_Internal {
 public:
  static const ::kvrpcpb::Context& context(const ResolveLockRequest* msg);
};

const ::kvrpcpb::Context&
ResolveLockRequest::_Internal::context(const ResolveLockRequest* msg) {
  return *msg->context_;
}
ResolveLockRequest::ResolveLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.ResolveLockRequest)
}
ResolveLockRequest::ResolveLockRequest(const ResolveLockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&start_version_, &from.start_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_version_) -
    reinterpret_cast<char*>(&start_version_)) + sizeof(commit_version_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ResolveLockRequest)
}

void ResolveLockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveLockRequest_kvrpcpb_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&context_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&commit_version_) -
      reinterpret_cast<char*>(&context_)) + sizeof(commit_version_));
}

ResolveLockRequest::~ResolveLockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ResolveLockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResolveLockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete context_;
}

void ResolveLockRequest::ArenaDtor(void* object) {
  ResolveLockRequest* _this = reinterpret_cast< ResolveLockRequest* >(object);
  (void)_this;
}
void ResolveLockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolveLockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveLockRequest& ResolveLockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveLockRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void ResolveLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ResolveLockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&start_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_version_) -
      reinterpret_cast<char*>(&start_version_)) + sizeof(commit_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolveLockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          commit_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveLockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ResolveLockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start_version(), target);
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_commit_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ResolveLockRequest)
  return target;
}

size_t ResolveLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ResolveLockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_version());
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commit_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveLockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ResolveLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveLockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveLockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ResolveLockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ResolveLockRequest)
    MergeFrom(*source);
  }
}

void ResolveLockRequest::MergeFrom(const ResolveLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ResolveLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_context()) {
    _internal_mutable_context()->::kvrpcpb::Context::MergeFrom(from._internal_context());
  }
  if (from.start_version() != 0) {
    _internal_set_start_version(from._internal_start_version());
  }
  if (from.commit_version() != 0) {
    _internal_set_commit_version(from._internal_commit_version());
  }
}

void ResolveLockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ResolveLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveLockRequest::CopyFrom(const ResolveLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ResolveLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveLockRequest::IsInitialized() const {
  return true;
}

void ResolveLockRequest::InternalSwap(ResolveLockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResolveLockRequest, commit_version_)
      + sizeof(ResolveLockRequest::commit_version_)
      - PROTOBUF_FIELD_OFFSET(ResolveLockRequest, context_)>(
          reinterpret_cast<char*>(&context_),
          reinterpret_cast<char*>(&other->context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveLockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResolveLockResponse::_Internal {
 public:
  static const ::errorpb::Error& region_error(const ResolveLockResponse* msg);
  static const ::kvrpcpb::KeyError& error(const ResolveLockResponse* msg);
};

const ::errorpb::Error&
ResolveLockResponse::_Internal::region_error(const ResolveLockResponse* msg) {
  return *msg->region_error_;
}
const ::kvrpcpb::KeyError&
ResolveLockResponse::_Internal::error(const ResolveLockResponse* msg) {
  return *msg->error_;
}
void ResolveLockResponse::clear_region_error() {
  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
ResolveLockResponse::ResolveLockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.ResolveLockResponse)
}
ResolveLockResponse::ResolveLockResponse(const ResolveLockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ResolveLockResponse)
}

void ResolveLockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveLockResponse_kvrpcpb_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&region_error_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(error_));
}

ResolveLockResponse::~ResolveLockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ResolveLockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResolveLockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete region_error_;
  if (this != internal_default_instance()) delete error_;
}

void ResolveLockResponse::ArenaDtor(void* object) {
  ResolveLockResponse* _this = reinterpret_cast< ResolveLockResponse* >(object);
  (void)_this;
}
void ResolveLockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolveLockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveLockResponse& ResolveLockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveLockResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void ResolveLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ResolveLockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolveLockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.KeyError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveLockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ResolveLockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::region_error(this), target, stream);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ResolveLockResponse)
  return target;
}

size_t ResolveLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ResolveLockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveLockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ResolveLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveLockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveLockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ResolveLockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ResolveLockResponse)
    MergeFrom(*source);
  }
}

void ResolveLockResponse::MergeFrom(const ResolveLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ResolveLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_error()) {
    _internal_mutable_region_error()->::errorpb::Error::MergeFrom(from._internal_region_error());
  }
  if (from.has_error()) {
    _internal_mutable_error()->::kvrpcpb::KeyError::MergeFrom(from._internal_error());
  }
}

void ResolveLockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ResolveLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveLockResponse::CopyFrom(const ResolveLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ResolveLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveLockResponse::IsInitialized() const {
  return true;
}

void ResolveLockResponse::InternalSwap(ResolveLockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResolveLockResponse, error_)
      + sizeof(ResolveLockResponse::error_)
      - PROTOBUF_FIELD_OFFSET(ResolveLockResponse, region_error_)>(
          reinterpret_cast<char*>(&region_error_),
          reinterpret_cast<char*>(&other->region_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveLockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KvPair::_Internal {
 public:
  static const ::kvrpcpb::KeyError& error(const KvPair* msg);
};

const ::kvrpcpb::KeyError&
KvPair::_Internal::error(const KvPair* msg) {
  return *msg->error_;
}
KvPair::KvPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.KvPair)
}
KvPair::KvPair(const KvPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  if (from._internal_has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvPair)
}

void KvPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvPair_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = nullptr;
}

KvPair::~KvPair() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KvPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void KvPair::ArenaDtor(void* object) {
  KvPair* _this = reinterpret_cast< KvPair* >(object);
  (void)_this;
}
void KvPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KvPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvPair& KvPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvPair_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void KvPair::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.KeyError error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KvPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.KeyError error = 1;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::error(this), target, stream);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvPair)
  return target;
}

size_t KvPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .kvrpcpb.KeyError error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvPair)
  GOOGLE_DCHECK_NE(&from, this);
  const KvPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvPair)
    MergeFrom(*source);
  }
}

void KvPair::MergeFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_error()) {
    _internal_mutable_error()->::kvrpcpb::KeyError::MergeFrom(from._internal_error());
  }
}

void KvPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvPair::CopyFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPair::IsInitialized() const {
  return true;
}

void KvPair::InternalSwap(KvPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Mutation::_Internal {
 public:
};

Mutation::Mutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.Mutation)
}
Mutation::Mutation(const Mutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Mutation)
}

void Mutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mutation_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_ = 0;
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Mutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mutation::ArenaDtor(void* object) {
  Mutation* _this = reinterpret_cast< Mutation* >(object);
  (void)_this;
}
void Mutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mutation& Mutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mutation_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Op op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::kvrpcpb::Op>(val));
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Op op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Mutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .kvrpcpb.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Mutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Mutation)
    MergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void Mutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation::IsInitialized() const {
  return true;
}

void Mutation::InternalSwap(Mutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyError::_Internal {
 public:
  static const ::kvrpcpb::LockInfo& locked(const KeyError* msg);
  static const ::kvrpcpb::WriteConflict& conflict(const KeyError* msg);
};

const ::kvrpcpb::LockInfo&
KeyError::_Internal::locked(const KeyError* msg) {
  return *msg->locked_;
}
const ::kvrpcpb::WriteConflict&
KeyError::_Internal::conflict(const KeyError* msg) {
  return *msg->conflict_;
}
KeyError::KeyError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.KeyError)
}
KeyError::KeyError(const KeyError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retryable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_retryable().empty()) {
    retryable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_retryable(), 
      GetArena());
  }
  abort_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_abort().empty()) {
    abort_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_abort(), 
      GetArena());
  }
  if (from._internal_has_locked()) {
    locked_ = new ::kvrpcpb::LockInfo(*from.locked_);
  } else {
    locked_ = nullptr;
  }
  if (from._internal_has_conflict()) {
    conflict_ = new ::kvrpcpb::WriteConflict(*from.conflict_);
  } else {
    conflict_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KeyError)
}

void KeyError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyError_kvrpcpb_2eproto.base);
  retryable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abort_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&locked_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&conflict_) -
      reinterpret_cast<char*>(&locked_)) + sizeof(conflict_));
}

KeyError::~KeyError() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KeyError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  retryable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abort_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete locked_;
  if (this != internal_default_instance()) delete conflict_;
}

void KeyError::ArenaDtor(void* object) {
  KeyError* _this = reinterpret_cast< KeyError* >(object);
  (void)_this;
}
void KeyError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyError& KeyError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyError_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void KeyError::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KeyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retryable_.ClearToEmpty();
  abort_.ClearToEmpty();
  if (GetArena() == nullptr && locked_ != nullptr) {
    delete locked_;
  }
  locked_ = nullptr;
  if (GetArena() == nullptr && conflict_ != nullptr) {
    delete conflict_;
  }
  conflict_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.LockInfo locked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_locked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string retryable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_retryable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.KeyError.retryable"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string abort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_abort();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kvrpcpb.KeyError.abort"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.WriteConflict conflict = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_conflict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KeyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.LockInfo locked = 1;
  if (this->has_locked()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::locked(this), target, stream);
  }

  // string retryable = 2;
  if (this->retryable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_retryable().data(), static_cast<int>(this->_internal_retryable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.retryable");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_retryable(), target);
  }

  // string abort = 3;
  if (this->abort().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abort().data(), static_cast<int>(this->_internal_abort().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.abort");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_abort(), target);
  }

  // .kvrpcpb.WriteConflict conflict = 4;
  if (this->has_conflict()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::conflict(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KeyError)
  return target;
}

size_t KeyError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KeyError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string retryable = 2;
  if (this->retryable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_retryable());
  }

  // string abort = 3;
  if (this->abort().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abort());
  }

  // .kvrpcpb.LockInfo locked = 1;
  if (this->has_locked()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locked_);
  }

  // .kvrpcpb.WriteConflict conflict = 4;
  if (this->has_conflict()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conflict_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KeyError)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KeyError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KeyError)
    MergeFrom(*source);
  }
}

void KeyError::MergeFrom(const KeyError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KeyError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retryable().size() > 0) {
    _internal_set_retryable(from._internal_retryable());
  }
  if (from.abort().size() > 0) {
    _internal_set_abort(from._internal_abort());
  }
  if (from.has_locked()) {
    _internal_mutable_locked()->::kvrpcpb::LockInfo::MergeFrom(from._internal_locked());
  }
  if (from.has_conflict()) {
    _internal_mutable_conflict()->::kvrpcpb::WriteConflict::MergeFrom(from._internal_conflict());
  }
}

void KeyError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KeyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyError::CopyFrom(const KeyError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KeyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyError::IsInitialized() const {
  return true;
}

void KeyError::InternalSwap(KeyError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  retryable_.Swap(&other->retryable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  abort_.Swap(&other->abort_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyError, conflict_)
      + sizeof(KeyError::conflict_)
      - PROTOBUF_FIELD_OFFSET(KeyError, locked_)>(
          reinterpret_cast<char*>(&locked_),
          reinterpret_cast<char*>(&other->locked_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LockInfo::_Internal {
 public:
};

LockInfo::LockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.LockInfo)
}
LockInfo::LockInfo(const LockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  primary_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_primary_lock().empty()) {
    primary_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_primary_lock(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  ::memcpy(&lock_version_, &from.lock_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_ttl_) -
    reinterpret_cast<char*>(&lock_version_)) + sizeof(lock_ttl_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockInfo)
}

void LockInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LockInfo_kvrpcpb_2eproto.base);
  primary_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&lock_version_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lock_ttl_) -
      reinterpret_cast<char*>(&lock_version_)) + sizeof(lock_ttl_));
}

LockInfo::~LockInfo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  primary_lock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LockInfo::ArenaDtor(void* object) {
  LockInfo* _this = reinterpret_cast< LockInfo* >(object);
  (void)_this;
}
void LockInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockInfo& LockInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockInfo_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void LockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_lock_.ClearToEmpty();
  key_.ClearToEmpty();
  ::memset(&lock_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_ttl_) -
      reinterpret_cast<char*>(&lock_version_)) + sizeof(lock_ttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes primary_lock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_primary_lock();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lock_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_ttl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lock_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes primary_lock = 1;
  if (this->primary_lock().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_primary_lock(), target);
  }

  // uint64 lock_version = 2;
  if (this->lock_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lock_version(), target);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // uint64 lock_ttl = 4;
  if (this->lock_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lock_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockInfo)
  return target;
}

size_t LockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes primary_lock = 1;
  if (this->primary_lock().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_primary_lock());
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint64 lock_version = 2;
  if (this->lock_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lock_version());
  }

  // uint64 lock_ttl = 4;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lock_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LockInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockInfo)
    MergeFrom(*source);
  }
}

void LockInfo::MergeFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.primary_lock().size() > 0) {
    _internal_set_primary_lock(from._internal_primary_lock());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.lock_version() != 0) {
    _internal_set_lock_version(from._internal_lock_version());
  }
  if (from.lock_ttl() != 0) {
    _internal_set_lock_ttl(from._internal_lock_ttl());
  }
}

void LockInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo::CopyFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInfo::IsInitialized() const {
  return true;
}

void LockInfo::InternalSwap(LockInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  primary_lock_.Swap(&other->primary_lock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LockInfo, lock_ttl_)
      + sizeof(LockInfo::lock_ttl_)
      - PROTOBUF_FIELD_OFFSET(LockInfo, lock_version_)>(
          reinterpret_cast<char*>(&lock_version_),
          reinterpret_cast<char*>(&other->lock_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LockInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WriteConflict::_Internal {
 public:
};

WriteConflict::WriteConflict(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.WriteConflict)
}
WriteConflict::WriteConflict(const WriteConflict& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  primary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_primary().empty()) {
    primary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_primary(), 
      GetArena());
  }
  ::memcpy(&start_ts_, &from.start_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&conflict_ts_) -
    reinterpret_cast<char*>(&start_ts_)) + sizeof(conflict_ts_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.WriteConflict)
}

void WriteConflict::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteConflict_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_ts_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&conflict_ts_) -
      reinterpret_cast<char*>(&start_ts_)) + sizeof(conflict_ts_));
}

WriteConflict::~WriteConflict() {
  // @@protoc_insertion_point(destructor:kvrpcpb.WriteConflict)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteConflict::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteConflict::ArenaDtor(void* object) {
  WriteConflict* _this = reinterpret_cast< WriteConflict* >(object);
  (void)_this;
}
void WriteConflict::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteConflict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteConflict& WriteConflict::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteConflict_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void WriteConflict::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.WriteConflict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  primary_.ClearToEmpty();
  ::memset(&start_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conflict_ts_) -
      reinterpret_cast<char*>(&start_ts_)) + sizeof(conflict_ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteConflict::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 conflict_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          conflict_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes primary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_primary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteConflict::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.WriteConflict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start_ts(), target);
  }

  // uint64 conflict_ts = 2;
  if (this->conflict_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_conflict_ts(), target);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // bytes primary = 4;
  if (this->primary().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_primary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.WriteConflict)
  return target;
}

size_t WriteConflict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.WriteConflict)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes primary = 4;
  if (this->primary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_primary());
  }

  // uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_ts());
  }

  // uint64 conflict_ts = 2;
  if (this->conflict_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_conflict_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteConflict::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.WriteConflict)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteConflict* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteConflict>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.WriteConflict)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.WriteConflict)
    MergeFrom(*source);
  }
}

void WriteConflict::MergeFrom(const WriteConflict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.WriteConflict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.primary().size() > 0) {
    _internal_set_primary(from._internal_primary());
  }
  if (from.start_ts() != 0) {
    _internal_set_start_ts(from._internal_start_ts());
  }
  if (from.conflict_ts() != 0) {
    _internal_set_conflict_ts(from._internal_conflict_ts());
  }
}

void WriteConflict::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.WriteConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteConflict::CopyFrom(const WriteConflict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.WriteConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteConflict::IsInitialized() const {
  return true;
}

void WriteConflict::InternalSwap(WriteConflict* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  primary_.Swap(&other->primary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteConflict, conflict_ts_)
      + sizeof(WriteConflict::conflict_ts_)
      - PROTOBUF_FIELD_OFFSET(WriteConflict, start_ts_)>(
          reinterpret_cast<char*>(&start_ts_),
          reinterpret_cast<char*>(&other->start_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteConflict::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Context::_Internal {
 public:
  static const ::metapb::RegionEpoch& region_epoch(const Context* msg);
  static const ::metapb::Peer& peer(const Context* msg);
};

const ::metapb::RegionEpoch&
Context::_Internal::region_epoch(const Context* msg) {
  return *msg->region_epoch_;
}
const ::metapb::Peer&
Context::_Internal::peer(const Context* msg) {
  return *msg->peer_;
}
void Context::clear_region_epoch() {
  if (GetArena() == nullptr && region_epoch_ != nullptr) {
    delete region_epoch_;
  }
  region_epoch_ = nullptr;
}
void Context::clear_peer() {
  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
Context::Context(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kvrpcpb.Context)
}
Context::Context(const Context& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region_epoch()) {
    region_epoch_ = new ::metapb::RegionEpoch(*from.region_epoch_);
  } else {
    region_epoch_ = nullptr;
  }
  if (from._internal_has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Context)
}

void Context::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Context_kvrpcpb_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&region_epoch_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&region_epoch_)) + sizeof(term_));
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Context)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Context::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete region_epoch_;
  if (this != internal_default_instance()) delete peer_;
}

void Context::ArenaDtor(void* object) {
  Context* _this = reinterpret_cast< Context* >(object);
  (void)_this;
}
void Context::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Context::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Context& Context::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Context_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && region_epoch_ != nullptr) {
    delete region_epoch_;
  }
  region_epoch_ = nullptr;
  if (GetArena() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(term_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Context::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 region_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.RegionEpoch region_epoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_epoch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Peer peer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Context::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  // .metapb.RegionEpoch region_epoch = 2;
  if (this->has_region_epoch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::region_epoch(this), target, stream);
  }

  // .metapb.Peer peer = 3;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::peer(this), target, stream);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Context)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.RegionEpoch region_epoch = 2;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_epoch_);
  }

  // .metapb.Peer peer = 3;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_region_id());
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Context::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Context)
  GOOGLE_DCHECK_NE(&from, this);
  const Context* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Context>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Context)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Context)
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Context)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_epoch()) {
    _internal_mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from._internal_region_epoch());
  }
  if (from.has_peer()) {
    _internal_mutable_peer()->::metapb::Peer::MergeFrom(from._internal_peer());
  }
  if (from.region_id() != 0) {
    _internal_set_region_id(from._internal_region_id());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
}

void Context::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  return true;
}

void Context::InternalSwap(Context* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Context, term_)
      + sizeof(Context::term_)
      - PROTOBUF_FIELD_OFFSET(Context, region_epoch_)>(
          reinterpret_cast<char*>(&region_epoch_),
          reinterpret_cast<char*>(&other->region_epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Context::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kvrpcpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawGetRequest* Arena::CreateMaybeMessage< ::kvrpcpb::RawGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::RawGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawGetResponse* Arena::CreateMaybeMessage< ::kvrpcpb::RawGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::RawGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawPutRequest* Arena::CreateMaybeMessage< ::kvrpcpb::RawPutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::RawPutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawPutResponse* Arena::CreateMaybeMessage< ::kvrpcpb::RawPutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::RawPutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawDeleteRequest* Arena::CreateMaybeMessage< ::kvrpcpb::RawDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::RawDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawDeleteResponse* Arena::CreateMaybeMessage< ::kvrpcpb::RawDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::RawDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawScanRequest* Arena::CreateMaybeMessage< ::kvrpcpb::RawScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::RawScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawScanResponse* Arena::CreateMaybeMessage< ::kvrpcpb::RawScanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::RawScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::GetRequest* Arena::CreateMaybeMessage< ::kvrpcpb::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::GetResponse* Arena::CreateMaybeMessage< ::kvrpcpb::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::PrewriteRequest* Arena::CreateMaybeMessage< ::kvrpcpb::PrewriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::PrewriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::PrewriteResponse* Arena::CreateMaybeMessage< ::kvrpcpb::PrewriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::PrewriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::CommitRequest* Arena::CreateMaybeMessage< ::kvrpcpb::CommitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::CommitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::CommitResponse* Arena::CreateMaybeMessage< ::kvrpcpb::CommitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::CommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::ScanRequest* Arena::CreateMaybeMessage< ::kvrpcpb::ScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::ScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::ScanResponse* Arena::CreateMaybeMessage< ::kvrpcpb::ScanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::ScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::BatchRollbackRequest* Arena::CreateMaybeMessage< ::kvrpcpb::BatchRollbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::BatchRollbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::BatchRollbackResponse* Arena::CreateMaybeMessage< ::kvrpcpb::BatchRollbackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::BatchRollbackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::CheckTxnStatusRequest* Arena::CreateMaybeMessage< ::kvrpcpb::CheckTxnStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::CheckTxnStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::CheckTxnStatusResponse* Arena::CreateMaybeMessage< ::kvrpcpb::CheckTxnStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::CheckTxnStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::ResolveLockRequest* Arena::CreateMaybeMessage< ::kvrpcpb::ResolveLockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::ResolveLockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::ResolveLockResponse* Arena::CreateMaybeMessage< ::kvrpcpb::ResolveLockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::ResolveLockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::KvPair* Arena::CreateMaybeMessage< ::kvrpcpb::KvPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::KvPair >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::Mutation* Arena::CreateMaybeMessage< ::kvrpcpb::Mutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::Mutation >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::KeyError* Arena::CreateMaybeMessage< ::kvrpcpb::KeyError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::KeyError >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::LockInfo* Arena::CreateMaybeMessage< ::kvrpcpb::LockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::LockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::WriteConflict* Arena::CreateMaybeMessage< ::kvrpcpb::WriteConflict >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::WriteConflict >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::Context* Arena::CreateMaybeMessage< ::kvrpcpb::Context >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kvrpcpb::Context >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
