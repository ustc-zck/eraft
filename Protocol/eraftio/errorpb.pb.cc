// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errorpb.proto

#include "errorpb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EpochNotMatch_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyNotInRegion_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NotLeader_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionNotFound_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StaleCommand_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreNotMatch_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Peer_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Region_metapb_2eproto;
namespace errorpb {
class NotLeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotLeader> _instance;
} _NotLeader_default_instance_;
class StoreNotMatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreNotMatch> _instance;
} _StoreNotMatch_default_instance_;
class RegionNotFoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionNotFound> _instance;
} _RegionNotFound_default_instance_;
class KeyNotInRegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyNotInRegion> _instance;
} _KeyNotInRegion_default_instance_;
class EpochNotMatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EpochNotMatch> _instance;
} _EpochNotMatch_default_instance_;
class StaleCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaleCommand> _instance;
} _StaleCommand_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
}  // namespace errorpb
static void InitDefaultsscc_info_EpochNotMatch_errorpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::errorpb::_EpochNotMatch_default_instance_;
    new (ptr) ::errorpb::EpochNotMatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EpochNotMatch_errorpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EpochNotMatch_errorpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsscc_info_Error_errorpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::errorpb::_Error_default_instance_;
    new (ptr) ::errorpb::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Error_errorpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Error_errorpb_2eproto}, {
      &scc_info_NotLeader_errorpb_2eproto.base,
      &scc_info_RegionNotFound_errorpb_2eproto.base,
      &scc_info_KeyNotInRegion_errorpb_2eproto.base,
      &scc_info_EpochNotMatch_errorpb_2eproto.base,
      &scc_info_StaleCommand_errorpb_2eproto.base,
      &scc_info_StoreNotMatch_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_KeyNotInRegion_errorpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::errorpb::_KeyNotInRegion_default_instance_;
    new (ptr) ::errorpb::KeyNotInRegion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyNotInRegion_errorpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyNotInRegion_errorpb_2eproto}, {}};

static void InitDefaultsscc_info_NotLeader_errorpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::errorpb::_NotLeader_default_instance_;
    new (ptr) ::errorpb::NotLeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NotLeader_errorpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NotLeader_errorpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_RegionNotFound_errorpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::errorpb::_RegionNotFound_default_instance_;
    new (ptr) ::errorpb::RegionNotFound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionNotFound_errorpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegionNotFound_errorpb_2eproto}, {}};

static void InitDefaultsscc_info_StaleCommand_errorpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::errorpb::_StaleCommand_default_instance_;
    new (ptr) ::errorpb::StaleCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StaleCommand_errorpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StaleCommand_errorpb_2eproto}, {}};

static void InitDefaultsscc_info_StoreNotMatch_errorpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::errorpb::_StoreNotMatch_default_instance_;
    new (ptr) ::errorpb::StoreNotMatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreNotMatch_errorpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StoreNotMatch_errorpb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_errorpb_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_errorpb_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_errorpb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_errorpb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::errorpb::NotLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::errorpb::NotLeader, region_id_),
  PROTOBUF_FIELD_OFFSET(::errorpb::NotLeader, leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::errorpb::StoreNotMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::errorpb::StoreNotMatch, request_store_id_),
  PROTOBUF_FIELD_OFFSET(::errorpb::StoreNotMatch, actual_store_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::errorpb::RegionNotFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::errorpb::RegionNotFound, region_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::errorpb::KeyNotInRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::errorpb::KeyNotInRegion, key_),
  PROTOBUF_FIELD_OFFSET(::errorpb::KeyNotInRegion, region_id_),
  PROTOBUF_FIELD_OFFSET(::errorpb::KeyNotInRegion, start_key_),
  PROTOBUF_FIELD_OFFSET(::errorpb::KeyNotInRegion, end_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::errorpb::EpochNotMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::errorpb::EpochNotMatch, current_regions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::errorpb::StaleCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::errorpb::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::errorpb::Error, message_),
  PROTOBUF_FIELD_OFFSET(::errorpb::Error, not_leader_),
  PROTOBUF_FIELD_OFFSET(::errorpb::Error, region_not_found_),
  PROTOBUF_FIELD_OFFSET(::errorpb::Error, key_not_in_region_),
  PROTOBUF_FIELD_OFFSET(::errorpb::Error, epoch_not_match_),
  PROTOBUF_FIELD_OFFSET(::errorpb::Error, stale_command_),
  PROTOBUF_FIELD_OFFSET(::errorpb::Error, store_not_match_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::errorpb::NotLeader)},
  { 7, -1, sizeof(::errorpb::StoreNotMatch)},
  { 14, -1, sizeof(::errorpb::RegionNotFound)},
  { 20, -1, sizeof(::errorpb::KeyNotInRegion)},
  { 29, -1, sizeof(::errorpb::EpochNotMatch)},
  { 35, -1, sizeof(::errorpb::StaleCommand)},
  { 40, -1, sizeof(::errorpb::Error)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::errorpb::_NotLeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::errorpb::_StoreNotMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::errorpb::_RegionNotFound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::errorpb::_KeyNotInRegion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::errorpb::_EpochNotMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::errorpb::_StaleCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::errorpb::_Error_default_instance_),
};

const char descriptor_table_protodef_errorpb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rerrorpb.proto\022\007errorpb\032\014metapb.proto\032\024"
  "gogoproto/gogo.proto\"<\n\tNotLeader\022\021\n\treg"
  "ion_id\030\001 \001(\004\022\034\n\006leader\030\002 \001(\0132\014.metapb.Pe"
  "er\"B\n\rStoreNotMatch\022\030\n\020request_store_id\030"
  "\001 \001(\004\022\027\n\017actual_store_id\030\002 \001(\004\"#\n\016Region"
  "NotFound\022\021\n\tregion_id\030\001 \001(\004\"T\n\016KeyNotInR"
  "egion\022\013\n\003key\030\001 \001(\014\022\021\n\tregion_id\030\002 \001(\004\022\021\n"
  "\tstart_key\030\003 \001(\014\022\017\n\007end_key\030\004 \001(\014\"8\n\rEpo"
  "chNotMatch\022\'\n\017current_regions\030\001 \003(\0132\016.me"
  "tapb.Region\"\016\n\014StaleCommand\"\304\002\n\005Error\022\017\n"
  "\007message\030\001 \001(\t\022&\n\nnot_leader\030\002 \001(\0132\022.err"
  "orpb.NotLeader\0221\n\020region_not_found\030\003 \001(\013"
  "2\027.errorpb.RegionNotFound\0222\n\021key_not_in_"
  "region\030\004 \001(\0132\027.errorpb.KeyNotInRegion\022/\n"
  "\017epoch_not_match\030\005 \001(\0132\026.errorpb.EpochNo"
  "tMatch\022,\n\rstale_command\030\007 \001(\0132\025.errorpb."
  "StaleCommand\022/\n\017store_not_match\030\010 \001(\0132\026."
  "errorpb.StoreNotMatchR\013stale_epochB\014\310\342\036\001"
  "\340\342\036\001\320\342\036\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_errorpb_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_metapb_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_errorpb_2eproto_sccs[7] = {
  &scc_info_EpochNotMatch_errorpb_2eproto.base,
  &scc_info_Error_errorpb_2eproto.base,
  &scc_info_KeyNotInRegion_errorpb_2eproto.base,
  &scc_info_NotLeader_errorpb_2eproto.base,
  &scc_info_RegionNotFound_errorpb_2eproto.base,
  &scc_info_StaleCommand_errorpb_2eproto.base,
  &scc_info_StoreNotMatch_errorpb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_errorpb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_errorpb_2eproto = {
  false, false, descriptor_table_protodef_errorpb_2eproto, "errorpb.proto", 736,
  &descriptor_table_errorpb_2eproto_once, descriptor_table_errorpb_2eproto_sccs, descriptor_table_errorpb_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_errorpb_2eproto::offsets,
  file_level_metadata_errorpb_2eproto, 7, file_level_enum_descriptors_errorpb_2eproto, file_level_service_descriptors_errorpb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_errorpb_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_errorpb_2eproto)), true);
namespace errorpb {

// ===================================================================

class NotLeader::_Internal {
 public:
  static const ::metapb::Peer& leader(const NotLeader* msg);
};

const ::metapb::Peer&
NotLeader::_Internal::leader(const NotLeader* msg) {
  return *msg->leader_;
}
void NotLeader::clear_leader() {
  if (GetArena() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
}
NotLeader::NotLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:errorpb.NotLeader)
}
NotLeader::NotLeader(const NotLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:errorpb.NotLeader)
}

void NotLeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotLeader_errorpb_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&leader_)) + sizeof(region_id_));
}

NotLeader::~NotLeader() {
  // @@protoc_insertion_point(destructor:errorpb.NotLeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leader_;
}

void NotLeader::ArenaDtor(void* object) {
  NotLeader* _this = reinterpret_cast< NotLeader* >(object);
  (void)_this;
}
void NotLeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotLeader& NotLeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotLeader_errorpb_2eproto.base);
  return *internal_default_instance();
}


void NotLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.NotLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotLeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 region_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Peer leader = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotLeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.NotLeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  // .metapb.Peer leader = 2;
  if (this->has_leader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::leader(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.NotLeader)
  return target;
}

size_t NotLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.NotLeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer leader = 2;
  if (this->has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_region_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotLeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.NotLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const NotLeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotLeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.NotLeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.NotLeader)
    MergeFrom(*source);
  }
}

void NotLeader::MergeFrom(const NotLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.NotLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leader()) {
    _internal_mutable_leader()->::metapb::Peer::MergeFrom(from._internal_leader());
  }
  if (from.region_id() != 0) {
    _internal_set_region_id(from._internal_region_id());
  }
}

void NotLeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.NotLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotLeader::CopyFrom(const NotLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.NotLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotLeader::IsInitialized() const {
  return true;
}

void NotLeader::InternalSwap(NotLeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotLeader, region_id_)
      + sizeof(NotLeader::region_id_)
      - PROTOBUF_FIELD_OFFSET(NotLeader, leader_)>(
          reinterpret_cast<char*>(&leader_),
          reinterpret_cast<char*>(&other->leader_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotLeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StoreNotMatch::_Internal {
 public:
};

StoreNotMatch::StoreNotMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:errorpb.StoreNotMatch)
}
StoreNotMatch::StoreNotMatch(const StoreNotMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&request_store_id_, &from.request_store_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&actual_store_id_) -
    reinterpret_cast<char*>(&request_store_id_)) + sizeof(actual_store_id_));
  // @@protoc_insertion_point(copy_constructor:errorpb.StoreNotMatch)
}

void StoreNotMatch::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&request_store_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&actual_store_id_) -
      reinterpret_cast<char*>(&request_store_id_)) + sizeof(actual_store_id_));
}

StoreNotMatch::~StoreNotMatch() {
  // @@protoc_insertion_point(destructor:errorpb.StoreNotMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StoreNotMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StoreNotMatch::ArenaDtor(void* object) {
  StoreNotMatch* _this = reinterpret_cast< StoreNotMatch* >(object);
  (void)_this;
}
void StoreNotMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreNotMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreNotMatch& StoreNotMatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreNotMatch_errorpb_2eproto.base);
  return *internal_default_instance();
}


void StoreNotMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.StoreNotMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&request_store_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_store_id_) -
      reinterpret_cast<char*>(&request_store_id_)) + sizeof(actual_store_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreNotMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 request_store_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_store_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 actual_store_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actual_store_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreNotMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StoreNotMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_store_id = 1;
  if (this->request_store_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_store_id(), target);
  }

  // uint64 actual_store_id = 2;
  if (this->actual_store_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_actual_store_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StoreNotMatch)
  return target;
}

size_t StoreNotMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.StoreNotMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 request_store_id = 1;
  if (this->request_store_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_store_id());
  }

  // uint64 actual_store_id = 2;
  if (this->actual_store_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_actual_store_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreNotMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.StoreNotMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreNotMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreNotMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.StoreNotMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.StoreNotMatch)
    MergeFrom(*source);
  }
}

void StoreNotMatch::MergeFrom(const StoreNotMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.StoreNotMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_store_id() != 0) {
    _internal_set_request_store_id(from._internal_request_store_id());
  }
  if (from.actual_store_id() != 0) {
    _internal_set_actual_store_id(from._internal_actual_store_id());
  }
}

void StoreNotMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.StoreNotMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreNotMatch::CopyFrom(const StoreNotMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.StoreNotMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreNotMatch::IsInitialized() const {
  return true;
}

void StoreNotMatch::InternalSwap(StoreNotMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreNotMatch, actual_store_id_)
      + sizeof(StoreNotMatch::actual_store_id_)
      - PROTOBUF_FIELD_OFFSET(StoreNotMatch, request_store_id_)>(
          reinterpret_cast<char*>(&request_store_id_),
          reinterpret_cast<char*>(&other->request_store_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreNotMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegionNotFound::_Internal {
 public:
};

RegionNotFound::RegionNotFound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:errorpb.RegionNotFound)
}
RegionNotFound::RegionNotFound(const RegionNotFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:errorpb.RegionNotFound)
}

void RegionNotFound::SharedCtor() {
  region_id_ = PROTOBUF_ULONGLONG(0);
}

RegionNotFound::~RegionNotFound() {
  // @@protoc_insertion_point(destructor:errorpb.RegionNotFound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionNotFound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegionNotFound::ArenaDtor(void* object) {
  RegionNotFound* _this = reinterpret_cast< RegionNotFound* >(object);
  (void)_this;
}
void RegionNotFound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionNotFound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionNotFound& RegionNotFound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionNotFound_errorpb_2eproto.base);
  return *internal_default_instance();
}


void RegionNotFound::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.RegionNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionNotFound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 region_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionNotFound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.RegionNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.RegionNotFound)
  return target;
}

size_t RegionNotFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.RegionNotFound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_region_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionNotFound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.RegionNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionNotFound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionNotFound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.RegionNotFound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.RegionNotFound)
    MergeFrom(*source);
  }
}

void RegionNotFound::MergeFrom(const RegionNotFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.RegionNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.region_id() != 0) {
    _internal_set_region_id(from._internal_region_id());
  }
}

void RegionNotFound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.RegionNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionNotFound::CopyFrom(const RegionNotFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.RegionNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionNotFound::IsInitialized() const {
  return true;
}

void RegionNotFound::InternalSwap(RegionNotFound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(region_id_, other->region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionNotFound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyNotInRegion::_Internal {
 public:
};

KeyNotInRegion::KeyNotInRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:errorpb.KeyNotInRegion)
}
KeyNotInRegion::KeyNotInRegion(const KeyNotInRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_key().empty()) {
    start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_key(), 
      GetArena());
  }
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_key().empty()) {
    end_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_key(), 
      GetArena());
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:errorpb.KeyNotInRegion)
}

void KeyNotInRegion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyNotInRegion_errorpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_id_ = PROTOBUF_ULONGLONG(0);
}

KeyNotInRegion::~KeyNotInRegion() {
  // @@protoc_insertion_point(destructor:errorpb.KeyNotInRegion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyNotInRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyNotInRegion::ArenaDtor(void* object) {
  KeyNotInRegion* _this = reinterpret_cast< KeyNotInRegion* >(object);
  (void)_this;
}
void KeyNotInRegion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyNotInRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyNotInRegion& KeyNotInRegion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyNotInRegion_errorpb_2eproto.base);
  return *internal_default_instance();
}


void KeyNotInRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.KeyNotInRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  start_key_.ClearToEmpty();
  end_key_.ClearToEmpty();
  region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyNotInRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes start_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_start_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes end_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_end_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyNotInRegion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.KeyNotInRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_region_id(), target);
  }

  // bytes start_key = 3;
  if (this->start_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_start_key(), target);
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_end_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.KeyNotInRegion)
  return target;
}

size_t KeyNotInRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.KeyNotInRegion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes start_key = 3;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_key());
  }

  // bytes end_key = 4;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end_key());
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_region_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyNotInRegion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.KeyNotInRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyNotInRegion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyNotInRegion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.KeyNotInRegion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.KeyNotInRegion)
    MergeFrom(*source);
  }
}

void KeyNotInRegion::MergeFrom(const KeyNotInRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.KeyNotInRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.start_key().size() > 0) {
    _internal_set_start_key(from._internal_start_key());
  }
  if (from.end_key().size() > 0) {
    _internal_set_end_key(from._internal_end_key());
  }
  if (from.region_id() != 0) {
    _internal_set_region_id(from._internal_region_id());
  }
}

void KeyNotInRegion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.KeyNotInRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyNotInRegion::CopyFrom(const KeyNotInRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.KeyNotInRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyNotInRegion::IsInitialized() const {
  return true;
}

void KeyNotInRegion::InternalSwap(KeyNotInRegion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_key_.Swap(&other->start_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_key_.Swap(&other->end_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(region_id_, other->region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyNotInRegion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EpochNotMatch::_Internal {
 public:
};

void EpochNotMatch::clear_current_regions() {
  current_regions_.Clear();
}
EpochNotMatch::EpochNotMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  current_regions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:errorpb.EpochNotMatch)
}
EpochNotMatch::EpochNotMatch(const EpochNotMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      current_regions_(from.current_regions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:errorpb.EpochNotMatch)
}

void EpochNotMatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EpochNotMatch_errorpb_2eproto.base);
}

EpochNotMatch::~EpochNotMatch() {
  // @@protoc_insertion_point(destructor:errorpb.EpochNotMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EpochNotMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EpochNotMatch::ArenaDtor(void* object) {
  EpochNotMatch* _this = reinterpret_cast< EpochNotMatch* >(object);
  (void)_this;
}
void EpochNotMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EpochNotMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpochNotMatch& EpochNotMatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EpochNotMatch_errorpb_2eproto.base);
  return *internal_default_instance();
}


void EpochNotMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.EpochNotMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_regions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochNotMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .metapb.Region current_regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_current_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EpochNotMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.EpochNotMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metapb.Region current_regions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_current_regions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_current_regions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.EpochNotMatch)
  return target;
}

size_t EpochNotMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.EpochNotMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Region current_regions = 1;
  total_size += 1UL * this->_internal_current_regions_size();
  for (const auto& msg : this->current_regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochNotMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.EpochNotMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochNotMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EpochNotMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.EpochNotMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.EpochNotMatch)
    MergeFrom(*source);
  }
}

void EpochNotMatch::MergeFrom(const EpochNotMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.EpochNotMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_regions_.MergeFrom(from.current_regions_);
}

void EpochNotMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.EpochNotMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochNotMatch::CopyFrom(const EpochNotMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.EpochNotMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochNotMatch::IsInitialized() const {
  return true;
}

void EpochNotMatch::InternalSwap(EpochNotMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  current_regions_.InternalSwap(&other->current_regions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochNotMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StaleCommand::_Internal {
 public:
};

StaleCommand::StaleCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:errorpb.StaleCommand)
}
StaleCommand::StaleCommand(const StaleCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:errorpb.StaleCommand)
}

void StaleCommand::SharedCtor() {
}

StaleCommand::~StaleCommand() {
  // @@protoc_insertion_point(destructor:errorpb.StaleCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StaleCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StaleCommand::ArenaDtor(void* object) {
  StaleCommand* _this = reinterpret_cast< StaleCommand* >(object);
  (void)_this;
}
void StaleCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StaleCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaleCommand& StaleCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaleCommand_errorpb_2eproto.base);
  return *internal_default_instance();
}


void StaleCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.StaleCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaleCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaleCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.StaleCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.StaleCommand)
  return target;
}

size_t StaleCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.StaleCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaleCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.StaleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const StaleCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaleCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.StaleCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.StaleCommand)
    MergeFrom(*source);
  }
}

void StaleCommand::MergeFrom(const StaleCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.StaleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StaleCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.StaleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaleCommand::CopyFrom(const StaleCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.StaleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaleCommand::IsInitialized() const {
  return true;
}

void StaleCommand::InternalSwap(StaleCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaleCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Error::_Internal {
 public:
  static const ::errorpb::NotLeader& not_leader(const Error* msg);
  static const ::errorpb::RegionNotFound& region_not_found(const Error* msg);
  static const ::errorpb::KeyNotInRegion& key_not_in_region(const Error* msg);
  static const ::errorpb::EpochNotMatch& epoch_not_match(const Error* msg);
  static const ::errorpb::StaleCommand& stale_command(const Error* msg);
  static const ::errorpb::StoreNotMatch& store_not_match(const Error* msg);
};

const ::errorpb::NotLeader&
Error::_Internal::not_leader(const Error* msg) {
  return *msg->not_leader_;
}
const ::errorpb::RegionNotFound&
Error::_Internal::region_not_found(const Error* msg) {
  return *msg->region_not_found_;
}
const ::errorpb::KeyNotInRegion&
Error::_Internal::key_not_in_region(const Error* msg) {
  return *msg->key_not_in_region_;
}
const ::errorpb::EpochNotMatch&
Error::_Internal::epoch_not_match(const Error* msg) {
  return *msg->epoch_not_match_;
}
const ::errorpb::StaleCommand&
Error::_Internal::stale_command(const Error* msg) {
  return *msg->stale_command_;
}
const ::errorpb::StoreNotMatch&
Error::_Internal::store_not_match(const Error* msg) {
  return *msg->store_not_match_;
}
Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:errorpb.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  if (from._internal_has_not_leader()) {
    not_leader_ = new ::errorpb::NotLeader(*from.not_leader_);
  } else {
    not_leader_ = nullptr;
  }
  if (from._internal_has_region_not_found()) {
    region_not_found_ = new ::errorpb::RegionNotFound(*from.region_not_found_);
  } else {
    region_not_found_ = nullptr;
  }
  if (from._internal_has_key_not_in_region()) {
    key_not_in_region_ = new ::errorpb::KeyNotInRegion(*from.key_not_in_region_);
  } else {
    key_not_in_region_ = nullptr;
  }
  if (from._internal_has_epoch_not_match()) {
    epoch_not_match_ = new ::errorpb::EpochNotMatch(*from.epoch_not_match_);
  } else {
    epoch_not_match_ = nullptr;
  }
  if (from._internal_has_stale_command()) {
    stale_command_ = new ::errorpb::StaleCommand(*from.stale_command_);
  } else {
    stale_command_ = nullptr;
  }
  if (from._internal_has_store_not_match()) {
    store_not_match_ = new ::errorpb::StoreNotMatch(*from.store_not_match_);
  } else {
    store_not_match_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:errorpb.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_errorpb_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&not_leader_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&store_not_match_) -
      reinterpret_cast<char*>(&not_leader_)) + sizeof(store_not_match_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:errorpb.Error)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete not_leader_;
  if (this != internal_default_instance()) delete region_not_found_;
  if (this != internal_default_instance()) delete key_not_in_region_;
  if (this != internal_default_instance()) delete epoch_not_match_;
  if (this != internal_default_instance()) delete stale_command_;
  if (this != internal_default_instance()) delete store_not_match_;
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_errorpb_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:errorpb.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArena() == nullptr && not_leader_ != nullptr) {
    delete not_leader_;
  }
  not_leader_ = nullptr;
  if (GetArena() == nullptr && region_not_found_ != nullptr) {
    delete region_not_found_;
  }
  region_not_found_ = nullptr;
  if (GetArena() == nullptr && key_not_in_region_ != nullptr) {
    delete key_not_in_region_;
  }
  key_not_in_region_ = nullptr;
  if (GetArena() == nullptr && epoch_not_match_ != nullptr) {
    delete epoch_not_match_;
  }
  epoch_not_match_ = nullptr;
  if (GetArena() == nullptr && stale_command_ != nullptr) {
    delete stale_command_;
  }
  stale_command_ = nullptr;
  if (GetArena() == nullptr && store_not_match_ != nullptr) {
    delete store_not_match_;
  }
  store_not_match_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "errorpb.Error.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .errorpb.NotLeader not_leader = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .errorpb.RegionNotFound region_not_found = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_not_found(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .errorpb.KeyNotInRegion key_not_in_region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_not_in_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .errorpb.EpochNotMatch epoch_not_match = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_not_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .errorpb.StaleCommand stale_command = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stale_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .errorpb.StoreNotMatch store_not_match = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_store_not_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:errorpb.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "errorpb.Error.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .errorpb.NotLeader not_leader = 2;
  if (this->has_not_leader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::not_leader(this), target, stream);
  }

  // .errorpb.RegionNotFound region_not_found = 3;
  if (this->has_region_not_found()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::region_not_found(this), target, stream);
  }

  // .errorpb.KeyNotInRegion key_not_in_region = 4;
  if (this->has_key_not_in_region()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::key_not_in_region(this), target, stream);
  }

  // .errorpb.EpochNotMatch epoch_not_match = 5;
  if (this->has_epoch_not_match()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::epoch_not_match(this), target, stream);
  }

  // .errorpb.StaleCommand stale_command = 7;
  if (this->has_stale_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stale_command(this), target, stream);
  }

  // .errorpb.StoreNotMatch store_not_match = 8;
  if (this->has_store_not_match()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::store_not_match(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:errorpb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:errorpb.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .errorpb.NotLeader not_leader = 2;
  if (this->has_not_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *not_leader_);
  }

  // .errorpb.RegionNotFound region_not_found = 3;
  if (this->has_region_not_found()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_not_found_);
  }

  // .errorpb.KeyNotInRegion key_not_in_region = 4;
  if (this->has_key_not_in_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_not_in_region_);
  }

  // .errorpb.EpochNotMatch epoch_not_match = 5;
  if (this->has_epoch_not_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_not_match_);
  }

  // .errorpb.StaleCommand stale_command = 7;
  if (this->has_stale_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stale_command_);
  }

  // .errorpb.StoreNotMatch store_not_match = 8;
  if (this->has_store_not_match()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *store_not_match_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:errorpb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:errorpb.Error)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:errorpb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:errorpb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_not_leader()) {
    _internal_mutable_not_leader()->::errorpb::NotLeader::MergeFrom(from._internal_not_leader());
  }
  if (from.has_region_not_found()) {
    _internal_mutable_region_not_found()->::errorpb::RegionNotFound::MergeFrom(from._internal_region_not_found());
  }
  if (from.has_key_not_in_region()) {
    _internal_mutable_key_not_in_region()->::errorpb::KeyNotInRegion::MergeFrom(from._internal_key_not_in_region());
  }
  if (from.has_epoch_not_match()) {
    _internal_mutable_epoch_not_match()->::errorpb::EpochNotMatch::MergeFrom(from._internal_epoch_not_match());
  }
  if (from.has_stale_command()) {
    _internal_mutable_stale_command()->::errorpb::StaleCommand::MergeFrom(from._internal_stale_command());
  }
  if (from.has_store_not_match()) {
    _internal_mutable_store_not_match()->::errorpb::StoreNotMatch::MergeFrom(from._internal_store_not_match());
  }
}

void Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:errorpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:errorpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Error, store_not_match_)
      + sizeof(Error::store_not_match_)
      - PROTOBUF_FIELD_OFFSET(Error, not_leader_)>(
          reinterpret_cast<char*>(&not_leader_),
          reinterpret_cast<char*>(&other->not_leader_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace errorpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::errorpb::NotLeader* Arena::CreateMaybeMessage< ::errorpb::NotLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::errorpb::NotLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::errorpb::StoreNotMatch* Arena::CreateMaybeMessage< ::errorpb::StoreNotMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::errorpb::StoreNotMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::errorpb::RegionNotFound* Arena::CreateMaybeMessage< ::errorpb::RegionNotFound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::errorpb::RegionNotFound >(arena);
}
template<> PROTOBUF_NOINLINE ::errorpb::KeyNotInRegion* Arena::CreateMaybeMessage< ::errorpb::KeyNotInRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::errorpb::KeyNotInRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::errorpb::EpochNotMatch* Arena::CreateMaybeMessage< ::errorpb::EpochNotMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::errorpb::EpochNotMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::errorpb::StaleCommand* Arena::CreateMaybeMessage< ::errorpb::StaleCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::errorpb::StaleCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::errorpb::Error* Arena::CreateMaybeMessage< ::errorpb::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::errorpb::Error >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
