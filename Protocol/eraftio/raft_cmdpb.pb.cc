// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#include "raft_cmdpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Error_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Peer_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Region_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionEpoch_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AdminRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AdminResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactLogRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactLogResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Request_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Response_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnapResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SplitResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto;
namespace raft_cmdpb {
class GetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRequest> _instance;
} _GetRequest_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResponse> _instance;
} _GetResponse_default_instance_;
class PutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutRequest> _instance;
} _PutRequest_default_instance_;
class PutResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutResponse> _instance;
} _PutResponse_default_instance_;
class DeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRequest> _instance;
} _DeleteRequest_default_instance_;
class DeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResponse> _instance;
} _DeleteResponse_default_instance_;
class SnapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapRequest> _instance;
} _SnapRequest_default_instance_;
class SnapResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapResponse> _instance;
} _SnapResponse_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
class ChangePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangePeerRequest> _instance;
} _ChangePeerRequest_default_instance_;
class ChangePeerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangePeerResponse> _instance;
} _ChangePeerResponse_default_instance_;
class SplitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitRequest> _instance;
} _SplitRequest_default_instance_;
class SplitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SplitResponse> _instance;
} _SplitResponse_default_instance_;
class CompactLogRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompactLogRequest> _instance;
} _CompactLogRequest_default_instance_;
class CompactLogResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompactLogResponse> _instance;
} _CompactLogResponse_default_instance_;
class TransferLeaderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferLeaderRequest> _instance;
} _TransferLeaderRequest_default_instance_;
class TransferLeaderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferLeaderResponse> _instance;
} _TransferLeaderResponse_default_instance_;
class AdminRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminRequest> _instance;
} _AdminRequest_default_instance_;
class AdminResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminResponse> _instance;
} _AdminResponse_default_instance_;
class RaftRequestHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftRequestHeader> _instance;
} _RaftRequestHeader_default_instance_;
class RaftResponseHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftResponseHeader> _instance;
} _RaftResponseHeader_default_instance_;
class RaftCmdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftCmdRequest> _instance;
} _RaftCmdRequest_default_instance_;
class RaftCmdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaftCmdResponse> _instance;
} _RaftCmdResponse_default_instance_;
}  // namespace raft_cmdpb
static void InitDefaultsscc_info_AdminRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_AdminRequest_default_instance_;
    new (ptr) ::raft_cmdpb::AdminRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::AdminRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AdminRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_AdminRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_CompactLogRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_SplitRequest_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsscc_info_AdminResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_AdminResponse_default_instance_;
    new (ptr) ::raft_cmdpb::AdminResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::AdminResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AdminResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_AdminResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_CompactLogResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_SplitResponse_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsscc_info_ChangePeerRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_ChangePeerRequest_default_instance_;
    new (ptr) ::raft_cmdpb::ChangePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::ChangePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChangePeerRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_ChangePeerResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_ChangePeerResponse_default_instance_;
    new (ptr) ::raft_cmdpb::ChangePeerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::ChangePeerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChangePeerResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsscc_info_CompactLogRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_CompactLogRequest_default_instance_;
    new (ptr) ::raft_cmdpb::CompactLogRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::CompactLogRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactLogRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CompactLogRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_CompactLogResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_CompactLogResponse_default_instance_;
    new (ptr) ::raft_cmdpb::CompactLogResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::CompactLogResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactLogResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CompactLogResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_DeleteRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_DeleteRequest_default_instance_;
    new (ptr) ::raft_cmdpb::DeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::DeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_DeleteResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_DeleteResponse_default_instance_;
    new (ptr) ::raft_cmdpb::DeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::DeleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeleteResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_GetRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_GetRequest_default_instance_;
    new (ptr) ::raft_cmdpb::GetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::GetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_GetResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_GetResponse_default_instance_;
    new (ptr) ::raft_cmdpb::GetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::GetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_PutRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_PutRequest_default_instance_;
    new (ptr) ::raft_cmdpb::PutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::PutRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PutRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_PutResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_PutResponse_default_instance_;
    new (ptr) ::raft_cmdpb::PutResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::PutResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PutResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_RaftCmdRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RaftCmdRequest_default_instance_;
    new (ptr) ::raft_cmdpb::RaftCmdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RaftCmdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RaftCmdRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RaftCmdRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto.base,
      &scc_info_Request_raft_5fcmdpb_2eproto.base,
      &scc_info_AdminRequest_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsscc_info_RaftCmdResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RaftCmdResponse_default_instance_;
    new (ptr) ::raft_cmdpb::RaftCmdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RaftCmdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RaftCmdResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RaftCmdResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto.base,
      &scc_info_Response_raft_5fcmdpb_2eproto.base,
      &scc_info_AdminResponse_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsscc_info_RaftRequestHeader_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RaftRequestHeader_default_instance_;
    new (ptr) ::raft_cmdpb::RaftRequestHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RaftRequestHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RaftRequestHeader_raft_5fcmdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,
      &scc_info_RegionEpoch_metapb_2eproto.base,}};

static void InitDefaultsscc_info_RaftResponseHeader_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RaftResponseHeader_default_instance_;
    new (ptr) ::raft_cmdpb::RaftResponseHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RaftResponseHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RaftResponseHeader_raft_5fcmdpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_Request_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_Request_default_instance_;
    new (ptr) ::raft_cmdpb::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Request_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Request_raft_5fcmdpb_2eproto}, {
      &scc_info_GetRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_PutRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_DeleteRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_SnapRequest_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsscc_info_Response_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_Response_default_instance_;
    new (ptr) ::raft_cmdpb::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Response_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Response_raft_5fcmdpb_2eproto}, {
      &scc_info_GetResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_PutResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_DeleteResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_SnapResponse_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsscc_info_SnapRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_SnapRequest_default_instance_;
    new (ptr) ::raft_cmdpb::SnapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::SnapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SnapRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_SnapResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_SnapResponse_default_instance_;
    new (ptr) ::raft_cmdpb::SnapResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::SnapResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnapResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SnapResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsscc_info_SplitRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_SplitRequest_default_instance_;
    new (ptr) ::raft_cmdpb::SplitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::SplitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SplitRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SplitRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsscc_info_SplitResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_SplitResponse_default_instance_;
    new (ptr) ::raft_cmdpb::SplitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::SplitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SplitResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SplitResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsscc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_TransferLeaderRequest_default_instance_;
    new (ptr) ::raft_cmdpb::TransferLeaderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::TransferLeaderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_TransferLeaderResponse_default_instance_;
    new (ptr) ::raft_cmdpb::TransferLeaderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::TransferLeaderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raft_5fcmdpb_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_raft_5fcmdpb_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_raft_5fcmdpb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_raft_5fcmdpb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::GetRequest, cf_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::GetRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::GetResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::PutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::PutRequest, cf_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::PutRequest, key_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::PutRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::PutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::DeleteRequest, cf_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::DeleteRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::SnapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::SnapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::SnapResponse, region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Request, cmd_type_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Request, get_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Request, put_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Request, delete__),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Request, snap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Response, cmd_type_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Response, get_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Response, put_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Response, delete__),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::Response, snap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::ChangePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::ChangePeerRequest, change_type_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::ChangePeerRequest, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::ChangePeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::ChangePeerResponse, region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::SplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::SplitRequest, split_key_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::SplitRequest, new_region_id_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::SplitRequest, new_peer_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::SplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::SplitResponse, regions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::CompactLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::CompactLogRequest, compact_index_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::CompactLogRequest, compact_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::CompactLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::TransferLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::TransferLeaderRequest, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::TransferLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminRequest, cmd_type_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminRequest, change_peer_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminRequest, compact_log_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminRequest, transfer_leader_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminRequest, split_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminResponse, cmd_type_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminResponse, change_peer_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminResponse, compact_log_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminResponse, transfer_leader_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::AdminResponse, split_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, region_id_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, peer_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, region_epoch_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftResponseHeader, error_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftResponseHeader, uuid_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftResponseHeader, current_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftCmdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftCmdRequest, header_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftCmdRequest, requests_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftCmdRequest, admin_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftCmdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftCmdResponse, header_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftCmdResponse, responses_),
  PROTOBUF_FIELD_OFFSET(::raft_cmdpb::RaftCmdResponse, admin_response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::raft_cmdpb::GetRequest)},
  { 7, -1, sizeof(::raft_cmdpb::GetResponse)},
  { 13, -1, sizeof(::raft_cmdpb::PutRequest)},
  { 21, -1, sizeof(::raft_cmdpb::PutResponse)},
  { 26, -1, sizeof(::raft_cmdpb::DeleteRequest)},
  { 33, -1, sizeof(::raft_cmdpb::DeleteResponse)},
  { 38, -1, sizeof(::raft_cmdpb::SnapRequest)},
  { 43, -1, sizeof(::raft_cmdpb::SnapResponse)},
  { 49, -1, sizeof(::raft_cmdpb::Request)},
  { 59, -1, sizeof(::raft_cmdpb::Response)},
  { 69, -1, sizeof(::raft_cmdpb::ChangePeerRequest)},
  { 76, -1, sizeof(::raft_cmdpb::ChangePeerResponse)},
  { 82, -1, sizeof(::raft_cmdpb::SplitRequest)},
  { 90, -1, sizeof(::raft_cmdpb::SplitResponse)},
  { 96, -1, sizeof(::raft_cmdpb::CompactLogRequest)},
  { 103, -1, sizeof(::raft_cmdpb::CompactLogResponse)},
  { 108, -1, sizeof(::raft_cmdpb::TransferLeaderRequest)},
  { 114, -1, sizeof(::raft_cmdpb::TransferLeaderResponse)},
  { 119, -1, sizeof(::raft_cmdpb::AdminRequest)},
  { 129, -1, sizeof(::raft_cmdpb::AdminResponse)},
  { 139, -1, sizeof(::raft_cmdpb::RaftRequestHeader)},
  { 148, -1, sizeof(::raft_cmdpb::RaftResponseHeader)},
  { 156, -1, sizeof(::raft_cmdpb::RaftCmdRequest)},
  { 164, -1, sizeof(::raft_cmdpb::RaftCmdResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_GetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_PutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_PutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_DeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_DeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_SnapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_SnapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_ChangePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_ChangePeerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_SplitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_SplitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_CompactLogRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_CompactLogResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_TransferLeaderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_TransferLeaderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_AdminRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_AdminResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_RaftRequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_RaftResponseHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_RaftCmdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft_cmdpb::_RaftCmdResponse_default_instance_),
};

const char descriptor_table_protodef_raft_5fcmdpb_2eproto[] =
  "\n\020raft_cmdpb.proto\022\nraft_cmdpb\032\014metapb.p"
  "roto\032\rerrorpb.proto\032\reraftpb.proto\"%\n\nGe"
  "tRequest\022\n\n\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001(\014\"\034\n\013Get"
  "Response\022\r\n\005value\030\001 \001(\014\"4\n\nPutRequest\022\n\n"
  "\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"\r\n"
  "\013PutResponse\"(\n\rDeleteRequest\022\n\n\002cf\030\001 \001("
  "\t\022\013\n\003key\030\002 \001(\014\"\020\n\016DeleteResponse\"\r\n\013Snap"
  "Request\".\n\014SnapResponse\022\036\n\006region\030\001 \001(\0132"
  "\016.metapb.Region\"\314\001\n\007Request\022%\n\010cmd_type\030"
  "\001 \001(\0162\023.raft_cmdpb.CmdType\022#\n\003get\030\002 \001(\0132"
  "\026.raft_cmdpb.GetRequest\022#\n\003put\030\004 \001(\0132\026.r"
  "aft_cmdpb.PutRequest\022)\n\006delete\030\005 \001(\0132\031.r"
  "aft_cmdpb.DeleteRequest\022%\n\004snap\030\006 \001(\0132\027."
  "raft_cmdpb.SnapRequest\"\321\001\n\010Response\022%\n\010c"
  "md_type\030\001 \001(\0162\023.raft_cmdpb.CmdType\022$\n\003ge"
  "t\030\002 \001(\0132\027.raft_cmdpb.GetResponse\022$\n\003put\030"
  "\004 \001(\0132\027.raft_cmdpb.PutResponse\022*\n\006delete"
  "\030\005 \001(\0132\032.raft_cmdpb.DeleteResponse\022&\n\004sn"
  "ap\030\006 \001(\0132\030.raft_cmdpb.SnapResponse\"]\n\021Ch"
  "angePeerRequest\022,\n\013change_type\030\001 \001(\0162\027.e"
  "raftpb.ConfChangeType\022\032\n\004peer\030\002 \001(\0132\014.me"
  "tapb.Peer\"4\n\022ChangePeerResponse\022\036\n\006regio"
  "n\030\001 \001(\0132\016.metapb.Region\"N\n\014SplitRequest\022"
  "\021\n\tsplit_key\030\001 \001(\014\022\025\n\rnew_region_id\030\002 \001("
  "\004\022\024\n\014new_peer_ids\030\003 \003(\004\"0\n\rSplitResponse"
  "\022\037\n\007regions\030\001 \003(\0132\016.metapb.Region\"@\n\021Com"
  "pactLogRequest\022\025\n\rcompact_index\030\001 \001(\004\022\024\n"
  "\014compact_term\030\002 \001(\004\"\024\n\022CompactLogRespons"
  "e\"3\n\025TransferLeaderRequest\022\032\n\004peer\030\001 \001(\013"
  "2\014.metapb.Peer\"\030\n\026TransferLeaderResponse"
  "\"\207\002\n\014AdminRequest\022*\n\010cmd_type\030\001 \001(\0162\030.ra"
  "ft_cmdpb.AdminCmdType\0222\n\013change_peer\030\002 \001"
  "(\0132\035.raft_cmdpb.ChangePeerRequest\0222\n\013com"
  "pact_log\030\004 \001(\0132\035.raft_cmdpb.CompactLogRe"
  "quest\022:\n\017transfer_leader\030\005 \001(\0132!.raft_cm"
  "dpb.TransferLeaderRequest\022\'\n\005split\030\n \001(\013"
  "2\030.raft_cmdpb.SplitRequest\"\214\002\n\rAdminResp"
  "onse\022*\n\010cmd_type\030\001 \001(\0162\030.raft_cmdpb.Admi"
  "nCmdType\0223\n\013change_peer\030\002 \001(\0132\036.raft_cmd"
  "pb.ChangePeerResponse\0223\n\013compact_log\030\004 \001"
  "(\0132\036.raft_cmdpb.CompactLogResponse\022;\n\017tr"
  "ansfer_leader\030\005 \001(\0132\".raft_cmdpb.Transfe"
  "rLeaderResponse\022(\n\005split\030\n \001(\0132\031.raft_cm"
  "dpb.SplitResponse\"{\n\021RaftRequestHeader\022\021"
  "\n\tregion_id\030\001 \001(\004\022\032\n\004peer\030\002 \001(\0132\014.metapb"
  ".Peer\022)\n\014region_epoch\030\004 \001(\0132\023.metapb.Reg"
  "ionEpoch\022\014\n\004term\030\005 \001(\004\"W\n\022RaftResponseHe"
  "ader\022\035\n\005error\030\001 \001(\0132\016.errorpb.Error\022\014\n\004u"
  "uid\030\002 \001(\014\022\024\n\014current_term\030\003 \001(\004\"\227\001\n\016Raft"
  "CmdRequest\022-\n\006header\030\001 \001(\0132\035.raft_cmdpb."
  "RaftRequestHeader\022%\n\010requests\030\002 \003(\0132\023.ra"
  "ft_cmdpb.Request\022/\n\radmin_request\030\003 \001(\0132"
  "\030.raft_cmdpb.AdminRequest\"\235\001\n\017RaftCmdRes"
  "ponse\022.\n\006header\030\001 \001(\0132\036.raft_cmdpb.RaftR"
  "esponseHeader\022\'\n\tresponses\030\002 \003(\0132\024.raft_"
  "cmdpb.Response\0221\n\016admin_response\030\003 \001(\0132\031"
  ".raft_cmdpb.AdminResponse*>\n\007CmdType\022\013\n\007"
  "Invalid\020\000\022\007\n\003Get\020\001\022\007\n\003Put\020\003\022\n\n\006Delete\020\004\022"
  "\010\n\004Snap\020\005*_\n\014AdminCmdType\022\020\n\014InvalidAdmi"
  "n\020\000\022\016\n\nChangePeer\020\001\022\016\n\nCompactLog\020\003\022\022\n\016T"
  "ransferLeader\020\004\022\t\n\005Split\020\nb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_raft_5fcmdpb_2eproto_deps[3] = {
  &::descriptor_table_eraftpb_2eproto,
  &::descriptor_table_errorpb_2eproto,
  &::descriptor_table_metapb_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_raft_5fcmdpb_2eproto_sccs[24] = {
  &scc_info_AdminRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_AdminResponse_raft_5fcmdpb_2eproto.base,
  &scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto.base,
  &scc_info_CompactLogRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_CompactLogResponse_raft_5fcmdpb_2eproto.base,
  &scc_info_DeleteRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_DeleteResponse_raft_5fcmdpb_2eproto.base,
  &scc_info_GetRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_GetResponse_raft_5fcmdpb_2eproto.base,
  &scc_info_PutRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_PutResponse_raft_5fcmdpb_2eproto.base,
  &scc_info_RaftCmdRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_RaftCmdResponse_raft_5fcmdpb_2eproto.base,
  &scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto.base,
  &scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto.base,
  &scc_info_Request_raft_5fcmdpb_2eproto.base,
  &scc_info_Response_raft_5fcmdpb_2eproto.base,
  &scc_info_SnapRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_SnapResponse_raft_5fcmdpb_2eproto.base,
  &scc_info_SplitRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_SplitResponse_raft_5fcmdpb_2eproto.base,
  &scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto.base,
  &scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raft_5fcmdpb_2eproto_once;
static bool descriptor_table_raft_5fcmdpb_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_5fcmdpb_2eproto = {
  &descriptor_table_raft_5fcmdpb_2eproto_initialized, descriptor_table_protodef_raft_5fcmdpb_2eproto, "raft_cmdpb.proto", 2434,
  &descriptor_table_raft_5fcmdpb_2eproto_once, descriptor_table_raft_5fcmdpb_2eproto_sccs, descriptor_table_raft_5fcmdpb_2eproto_deps, 24, 3,
  schemas, file_default_instances, TableStruct_raft_5fcmdpb_2eproto::offsets,
  file_level_metadata_raft_5fcmdpb_2eproto, 24, file_level_enum_descriptors_raft_5fcmdpb_2eproto, file_level_service_descriptors_raft_5fcmdpb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raft_5fcmdpb_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_raft_5fcmdpb_2eproto), true);
namespace raft_cmdpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_5fcmdpb_2eproto);
  return file_level_enum_descriptors_raft_5fcmdpb_2eproto[0];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdminCmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_5fcmdpb_2eproto);
  return file_level_enum_descriptors_raft_5fcmdpb_2eproto[1];
}
bool AdminCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetRequest::InitAsDefaultInstance() {
}
class GetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kCfFieldNumber;
const int GetRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetRequest)
}

void GetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRequest_raft_5fcmdpb_2eproto.base);
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cf(), ptr, ctx, "raft_cmdpb.GetRequest.cf");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cf = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raft_cmdpb.GetRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.GetRequest.cf");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.GetRequest.cf");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.GetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.GetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void GetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetResponse::InitAsDefaultInstance() {
}
class GetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetResponse)
}

void GetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResponse_raft_5fcmdpb_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.GetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.GetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutRequest::InitAsDefaultInstance() {
}
class PutRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kCfFieldNumber;
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutRequest)
}
PutRequest::PutRequest(const PutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutRequest)
}

void PutRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutRequest_raft_5fcmdpb_2eproto.base);
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutRequest& PutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cf(), ptr, ctx, "raft_cmdpb.PutRequest.cf");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cf = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raft_cmdpb.PutRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.PutRequest.cf");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.PutRequest.cf");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutRequest)
  return target;
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PutRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PutRequest)
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void PutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {
  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutResponse::InitAsDefaultInstance() {
}
class PutResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutResponse::PutResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutResponse)
}
PutResponse::PutResponse(const PutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutResponse)
}

void PutResponse::SharedCtor() {
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
}

void PutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutResponse& PutResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PutResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutResponse)
  return target;
}

size_t PutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PutResponse)
    MergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {
  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRequest::InitAsDefaultInstance() {
}
class DeleteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kCfFieldNumber;
const int DeleteRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRequest_raft_5fcmdpb_2eproto.base);
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRequest& DeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cf(), ptr, ctx, "raft_cmdpb.DeleteRequest.cf");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cf = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "raft_cmdpb.DeleteRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRequest.cf");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRequest.cf");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void DeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteResponse::InitAsDefaultInstance() {
}
class DeleteResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteResponse::DeleteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
}

void DeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResponse& DeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteResponse)
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapRequest::InitAsDefaultInstance() {
}
class SnapRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapRequest::SnapRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapRequest)
}
SnapRequest::SnapRequest(const SnapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapRequest)
}

void SnapRequest::SharedCtor() {
}

SnapRequest::~SnapRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapRequest)
  SharedDtor();
}

void SnapRequest::SharedDtor() {
}

void SnapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapRequest& SnapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void SnapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapRequest)
  return target;
}

size_t SnapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapRequest)
    MergeFrom(*source);
  }
}

void SnapRequest::MergeFrom(const SnapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SnapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapRequest::CopyFrom(const SnapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapRequest::IsInitialized() const {
  return true;
}

void SnapRequest::Swap(SnapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapRequest::InternalSwap(SnapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_SnapResponse_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class SnapResponse::HasBitSetters {
 public:
  static const ::metapb::Region& region(const SnapResponse* msg);
};

const ::metapb::Region&
SnapResponse::HasBitSetters::region(const SnapResponse* msg) {
  return *msg->region_;
}
void SnapResponse::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapResponse::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapResponse::SnapResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapResponse)
}
SnapResponse::SnapResponse(const SnapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapResponse)
}

void SnapResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapResponse_raft_5fcmdpb_2eproto.base);
  region_ = nullptr;
}

SnapResponse::~SnapResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapResponse)
  SharedDtor();
}

void SnapResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void SnapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapResponse& SnapResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void SnapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .metapb.Region region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Region region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapResponse)
  return target;
}

size_t SnapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapResponse)
    MergeFrom(*source);
  }
}

void SnapResponse::MergeFrom(const SnapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void SnapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapResponse::CopyFrom(const SnapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapResponse::IsInitialized() const {
  return true;
}

void SnapResponse::Swap(SnapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapResponse::InternalSwap(SnapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->get_ = const_cast< ::raft_cmdpb::GetRequest*>(
      ::raft_cmdpb::GetRequest::internal_default_instance());
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->put_ = const_cast< ::raft_cmdpb::PutRequest*>(
      ::raft_cmdpb::PutRequest::internal_default_instance());
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->delete__ = const_cast< ::raft_cmdpb::DeleteRequest*>(
      ::raft_cmdpb::DeleteRequest::internal_default_instance());
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->snap_ = const_cast< ::raft_cmdpb::SnapRequest*>(
      ::raft_cmdpb::SnapRequest::internal_default_instance());
}
class Request::HasBitSetters {
 public:
  static const ::raft_cmdpb::GetRequest& get(const Request* msg);
  static const ::raft_cmdpb::PutRequest& put(const Request* msg);
  static const ::raft_cmdpb::DeleteRequest& delete_(const Request* msg);
  static const ::raft_cmdpb::SnapRequest& snap(const Request* msg);
};

const ::raft_cmdpb::GetRequest&
Request::HasBitSetters::get(const Request* msg) {
  return *msg->get_;
}
const ::raft_cmdpb::PutRequest&
Request::HasBitSetters::put(const Request* msg) {
  return *msg->put_;
}
const ::raft_cmdpb::DeleteRequest&
Request::HasBitSetters::delete_(const Request* msg) {
  return *msg->delete__;
}
const ::raft_cmdpb::SnapRequest&
Request::HasBitSetters::snap(const Request* msg) {
  return *msg->snap_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kCmdTypeFieldNumber;
const int Request::kGetFieldNumber;
const int Request::kPutFieldNumber;
const int Request::kDeleteFieldNumber;
const int Request::kSnapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_get()) {
    get_ = new ::raft_cmdpb::GetRequest(*from.get_);
  } else {
    get_ = nullptr;
  }
  if (from.has_put()) {
    put_ = new ::raft_cmdpb::PutRequest(*from.put_);
  } else {
    put_ = nullptr;
  }
  if (from.has_delete_()) {
    delete__ = new ::raft_cmdpb::DeleteRequest(*from.delete__);
  } else {
    delete__ = nullptr;
  }
  if (from.has_snap()) {
    snap_ = new ::raft_cmdpb::SnapRequest(*from.snap_);
  } else {
    snap_ = nullptr;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_raft_5fcmdpb_2eproto.base);
  ::memset(&get_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&get_)) + sizeof(cmd_type_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) delete get_;
  if (this != internal_default_instance()) delete put_;
  if (this != internal_default_instance()) delete delete__;
  if (this != internal_default_instance()) delete snap_;
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && get_ != nullptr) {
    delete get_;
  }
  get_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && put_ != nullptr) {
    delete put_;
  }
  put_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && delete__ != nullptr) {
    delete delete__;
  }
  delete__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && snap_ != nullptr) {
    delete snap_;
  }
  snap_ = nullptr;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .raft_cmdpb.CmdType cmd_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_cmd_type(static_cast<::raft_cmdpb::CmdType>(val));
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.GetRequest get = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.PutRequest put = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_put(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.DeleteRequest delete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_delete_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.SnapRequest snap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_snap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Request::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Request)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.GetRequest get = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.PutRequest put = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.DeleteRequest delete = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.SnapRequest snap = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Request::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.GetRequest get = 2;
  if (this->has_get()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::get(this), output);
  }

  // .raft_cmdpb.PutRequest put = 4;
  if (this->has_put()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::put(this), output);
  }

  // .raft_cmdpb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::delete_(this), output);
  }

  // .raft_cmdpb.SnapRequest snap = 6;
  if (this->has_snap()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::snap(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Request)
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.GetRequest get = 2;
  if (this->has_get()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::get(this), target);
  }

  // .raft_cmdpb.PutRequest put = 4;
  if (this->has_put()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::put(this), target);
  }

  // .raft_cmdpb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::delete_(this), target);
  }

  // .raft_cmdpb.SnapRequest snap = 6;
  if (this->has_snap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::snap(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.GetRequest get = 2;
  if (this->has_get()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_);
  }

  // .raft_cmdpb.PutRequest put = 4;
  if (this->has_put()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *put_);
  }

  // .raft_cmdpb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete__);
  }

  // .raft_cmdpb.SnapRequest snap = 6;
  if (this->has_snap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snap_);
  }

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_get()) {
    mutable_get()->::raft_cmdpb::GetRequest::MergeFrom(from.get());
  }
  if (from.has_put()) {
    mutable_put()->::raft_cmdpb::PutRequest::MergeFrom(from.put());
  }
  if (from.has_delete_()) {
    mutable_delete_()->::raft_cmdpb::DeleteRequest::MergeFrom(from.delete_());
  }
  if (from.has_snap()) {
    mutable_snap()->::raft_cmdpb::SnapRequest::MergeFrom(from.snap());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(get_, other->get_);
  swap(put_, other->put_);
  swap(delete__, other->delete__);
  swap(snap_, other->snap_);
  swap(cmd_type_, other->cmd_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->get_ = const_cast< ::raft_cmdpb::GetResponse*>(
      ::raft_cmdpb::GetResponse::internal_default_instance());
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->put_ = const_cast< ::raft_cmdpb::PutResponse*>(
      ::raft_cmdpb::PutResponse::internal_default_instance());
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->delete__ = const_cast< ::raft_cmdpb::DeleteResponse*>(
      ::raft_cmdpb::DeleteResponse::internal_default_instance());
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->snap_ = const_cast< ::raft_cmdpb::SnapResponse*>(
      ::raft_cmdpb::SnapResponse::internal_default_instance());
}
class Response::HasBitSetters {
 public:
  static const ::raft_cmdpb::GetResponse& get(const Response* msg);
  static const ::raft_cmdpb::PutResponse& put(const Response* msg);
  static const ::raft_cmdpb::DeleteResponse& delete_(const Response* msg);
  static const ::raft_cmdpb::SnapResponse& snap(const Response* msg);
};

const ::raft_cmdpb::GetResponse&
Response::HasBitSetters::get(const Response* msg) {
  return *msg->get_;
}
const ::raft_cmdpb::PutResponse&
Response::HasBitSetters::put(const Response* msg) {
  return *msg->put_;
}
const ::raft_cmdpb::DeleteResponse&
Response::HasBitSetters::delete_(const Response* msg) {
  return *msg->delete__;
}
const ::raft_cmdpb::SnapResponse&
Response::HasBitSetters::snap(const Response* msg) {
  return *msg->snap_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCmdTypeFieldNumber;
const int Response::kGetFieldNumber;
const int Response::kPutFieldNumber;
const int Response::kDeleteFieldNumber;
const int Response::kSnapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_get()) {
    get_ = new ::raft_cmdpb::GetResponse(*from.get_);
  } else {
    get_ = nullptr;
  }
  if (from.has_put()) {
    put_ = new ::raft_cmdpb::PutResponse(*from.put_);
  } else {
    put_ = nullptr;
  }
  if (from.has_delete_()) {
    delete__ = new ::raft_cmdpb::DeleteResponse(*from.delete__);
  } else {
    delete__ = nullptr;
  }
  if (from.has_snap()) {
    snap_ = new ::raft_cmdpb::SnapResponse(*from.snap_);
  } else {
    snap_ = nullptr;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_raft_5fcmdpb_2eproto.base);
  ::memset(&get_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&get_)) + sizeof(cmd_type_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != internal_default_instance()) delete get_;
  if (this != internal_default_instance()) delete put_;
  if (this != internal_default_instance()) delete delete__;
  if (this != internal_default_instance()) delete snap_;
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && get_ != nullptr) {
    delete get_;
  }
  get_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && put_ != nullptr) {
    delete put_;
  }
  put_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && delete__ != nullptr) {
    delete delete__;
  }
  delete__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && snap_ != nullptr) {
    delete snap_;
  }
  snap_ = nullptr;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .raft_cmdpb.CmdType cmd_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_cmd_type(static_cast<::raft_cmdpb::CmdType>(val));
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.GetResponse get = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.PutResponse put = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_put(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.DeleteResponse delete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_delete_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.SnapResponse snap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_snap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Response::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Response)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.GetResponse get = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.PutResponse put = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.DeleteResponse delete = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.SnapResponse snap = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Response::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.GetResponse get = 2;
  if (this->has_get()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::get(this), output);
  }

  // .raft_cmdpb.PutResponse put = 4;
  if (this->has_put()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::put(this), output);
  }

  // .raft_cmdpb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::delete_(this), output);
  }

  // .raft_cmdpb.SnapResponse snap = 6;
  if (this->has_snap()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::snap(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Response)
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.GetResponse get = 2;
  if (this->has_get()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::get(this), target);
  }

  // .raft_cmdpb.PutResponse put = 4;
  if (this->has_put()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::put(this), target);
  }

  // .raft_cmdpb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::delete_(this), target);
  }

  // .raft_cmdpb.SnapResponse snap = 6;
  if (this->has_snap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::snap(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.GetResponse get = 2;
  if (this->has_get()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_);
  }

  // .raft_cmdpb.PutResponse put = 4;
  if (this->has_put()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *put_);
  }

  // .raft_cmdpb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete__);
  }

  // .raft_cmdpb.SnapResponse snap = 6;
  if (this->has_snap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snap_);
  }

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_get()) {
    mutable_get()->::raft_cmdpb::GetResponse::MergeFrom(from.get());
  }
  if (from.has_put()) {
    mutable_put()->::raft_cmdpb::PutResponse::MergeFrom(from.put());
  }
  if (from.has_delete_()) {
    mutable_delete_()->::raft_cmdpb::DeleteResponse::MergeFrom(from.delete_());
  }
  if (from.has_snap()) {
    mutable_snap()->::raft_cmdpb::SnapResponse::MergeFrom(from.snap());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(get_, other->get_);
  swap(put_, other->put_);
  swap(delete__, other->delete__);
  swap(snap_, other->snap_);
  swap(cmd_type_, other->cmd_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangePeerRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_ChangePeerRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class ChangePeerRequest::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const ChangePeerRequest* msg);
};

const ::metapb::Peer&
ChangePeerRequest::HasBitSetters::peer(const ChangePeerRequest* msg) {
  return *msg->peer_;
}
void ChangePeerRequest::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerRequest::kChangeTypeFieldNumber;
const int ChangePeerRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerRequest::ChangePeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerRequest)
}
ChangePeerRequest::ChangePeerRequest(const ChangePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  change_type_ = from.change_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerRequest)
}

void ChangePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_type_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(change_type_));
}

ChangePeerRequest::~ChangePeerRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerRequest)
  SharedDtor();
}

void ChangePeerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void ChangePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePeerRequest& ChangePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void ChangePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.ChangePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  change_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .eraftpb.ConfChangeType change_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_change_type(static_cast<::eraftpb::ConfChangeType>(val));
        } else goto handle_unusual;
        continue;
      // .metapb.Peer peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangePeerRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .eraftpb.ConfChangeType change_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer peer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangePeerRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePeerRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerRequest)
  return target;
}

size_t ChangePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.ChangePeerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->change_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.ChangePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.ChangePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.ChangePeerRequest)
    MergeFrom(*source);
  }
}

void ChangePeerRequest::MergeFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.ChangePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
}

void ChangePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerRequest::CopyFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeerRequest::IsInitialized() const {
  return true;
}

void ChangePeerRequest::Swap(ChangePeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerRequest::InternalSwap(ChangePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
  swap(change_type_, other->change_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangePeerResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_ChangePeerResponse_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class ChangePeerResponse::HasBitSetters {
 public:
  static const ::metapb::Region& region(const ChangePeerResponse* msg);
};

const ::metapb::Region&
ChangePeerResponse::HasBitSetters::region(const ChangePeerResponse* msg) {
  return *msg->region_;
}
void ChangePeerResponse::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerResponse::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerResponse::ChangePeerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerResponse)
}
ChangePeerResponse::ChangePeerResponse(const ChangePeerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerResponse)
}

void ChangePeerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto.base);
  region_ = nullptr;
}

ChangePeerResponse::~ChangePeerResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerResponse)
  SharedDtor();
}

void ChangePeerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void ChangePeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePeerResponse& ChangePeerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void ChangePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.ChangePeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangePeerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .metapb.Region region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangePeerResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Region region = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangePeerResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePeerResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerResponse)
  return target;
}

size_t ChangePeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.ChangePeerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePeerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.ChangePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePeerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangePeerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.ChangePeerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.ChangePeerResponse)
    MergeFrom(*source);
  }
}

void ChangePeerResponse::MergeFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.ChangePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void ChangePeerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerResponse::CopyFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeerResponse::IsInitialized() const {
  return true;
}

void ChangePeerResponse::Swap(ChangePeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerResponse::InternalSwap(ChangePeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePeerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitRequest::InitAsDefaultInstance() {
}
class SplitRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRequest::kSplitKeyFieldNumber;
const int SplitRequest::kNewRegionIdFieldNumber;
const int SplitRequest::kNewPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRequest::SplitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitRequest)
}
SplitRequest::SplitRequest(const SplitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      new_peer_ids_(from.new_peer_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  new_region_id_ = from.new_region_id_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitRequest)
}

void SplitRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SplitRequest_raft_5fcmdpb_2eproto.base);
  split_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_region_id_ = PROTOBUF_ULONGLONG(0);
}

SplitRequest::~SplitRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitRequest)
  SharedDtor();
}

void SplitRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitRequest& SplitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void SplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_peer_ids_.Clear();
  split_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_region_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes split_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_split_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 new_peer_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_new_peer_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_new_peer_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes split_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 new_region_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes split_key = 1;
  if (this->split_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->split_key(), output);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->new_peer_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes split_key = 1;
  if (this->split_key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->split_key(), target);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _new_peer_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitRequest)
  return target;
}

size_t SplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 new_peer_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->new_peer_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _new_peer_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes split_key = 1;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitRequest)
    MergeFrom(*source);
  }
}

void SplitRequest::MergeFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
}

void SplitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRequest::CopyFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRequest::IsInitialized() const {
  return true;
}

void SplitRequest::Swap(SplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRequest::InternalSwap(SplitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_peer_ids_.InternalSwap(&other->new_peer_ids_);
  split_key_.Swap(&other->split_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(new_region_id_, other->new_region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SplitResponse::InitAsDefaultInstance() {
}
class SplitResponse::HasBitSetters {
 public:
};

void SplitResponse::clear_regions() {
  regions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitResponse::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitResponse::SplitResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitResponse)
}
SplitResponse::SplitResponse(const SplitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitResponse)
}

void SplitResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SplitResponse_raft_5fcmdpb_2eproto.base);
}

SplitResponse::~SplitResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitResponse)
  SharedDtor();
}

void SplitResponse::SharedDtor() {
}

void SplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitResponse& SplitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SplitResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void SplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .metapb.Region regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metapb.Region regions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metapb.Region regions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->regions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SplitResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metapb.Region regions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->regions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitResponse)
  return target;
}

size_t SplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Region regions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->regions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SplitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitResponse)
    MergeFrom(*source);
  }
}

void SplitResponse::MergeFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
}

void SplitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitResponse::CopyFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitResponse::IsInitialized() const {
  return true;
}

void SplitResponse::Swap(SplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitResponse::InternalSwap(SplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&regions_)->InternalSwap(CastToBase(&other->regions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompactLogRequest::InitAsDefaultInstance() {
}
class CompactLogRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompactLogRequest::kCompactIndexFieldNumber;
const int CompactLogRequest::kCompactTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogRequest::CompactLogRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogRequest)
}
CompactLogRequest::CompactLogRequest(const CompactLogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&compact_index_, &from.compact_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&compact_term_) -
    reinterpret_cast<char*>(&compact_index_)) + sizeof(compact_term_));
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogRequest)
}

void CompactLogRequest::SharedCtor() {
  ::memset(&compact_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compact_term_) -
      reinterpret_cast<char*>(&compact_index_)) + sizeof(compact_term_));
}

CompactLogRequest::~CompactLogRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogRequest)
  SharedDtor();
}

void CompactLogRequest::SharedDtor() {
}

void CompactLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactLogRequest& CompactLogRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompactLogRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void CompactLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompactLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&compact_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compact_term_) -
      reinterpret_cast<char*>(&compact_index_)) + sizeof(compact_term_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompactLogRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 compact_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          compact_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 compact_term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          compact_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompactLogRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 compact_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 compact_term = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompactLogRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->compact_index(), output);
  }

  // uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->compact_term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompactLogRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->compact_index(), target);
  }

  // uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->compact_term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogRequest)
  return target;
}

size_t CompactLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompactLogRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->compact_index());
  }

  // uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->compact_term());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactLogRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompactLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactLogRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompactLogRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompactLogRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompactLogRequest)
    MergeFrom(*source);
  }
}

void CompactLogRequest::MergeFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompactLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compact_index() != 0) {
    set_compact_index(from.compact_index());
  }
  if (from.compact_term() != 0) {
    set_compact_term(from.compact_term());
  }
}

void CompactLogRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogRequest::CopyFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactLogRequest::IsInitialized() const {
  return true;
}

void CompactLogRequest::Swap(CompactLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogRequest::InternalSwap(CompactLogRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(compact_index_, other->compact_index_);
  swap(compact_term_, other->compact_term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactLogRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompactLogResponse::InitAsDefaultInstance() {
}
class CompactLogResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogResponse::CompactLogResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogResponse)
}
CompactLogResponse::CompactLogResponse(const CompactLogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogResponse)
}

void CompactLogResponse::SharedCtor() {
}

CompactLogResponse::~CompactLogResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogResponse)
  SharedDtor();
}

void CompactLogResponse::SharedDtor() {
}

void CompactLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactLogResponse& CompactLogResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompactLogResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void CompactLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompactLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompactLogResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompactLogResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompactLogResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompactLogResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogResponse)
  return target;
}

size_t CompactLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompactLogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactLogResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompactLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactLogResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompactLogResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompactLogResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompactLogResponse)
    MergeFrom(*source);
  }
}

void CompactLogResponse::MergeFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompactLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CompactLogResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogResponse::CopyFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactLogResponse::IsInitialized() const {
  return true;
}

void CompactLogResponse::Swap(CompactLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogResponse::InternalSwap(CompactLogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactLogResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferLeaderRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_TransferLeaderRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class TransferLeaderRequest::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const TransferLeaderRequest* msg);
};

const ::metapb::Peer&
TransferLeaderRequest::HasBitSetters::peer(const TransferLeaderRequest* msg) {
  return *msg->peer_;
}
void TransferLeaderRequest::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeaderRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderRequest::TransferLeaderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderRequest)
}
TransferLeaderRequest::TransferLeaderRequest(const TransferLeaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderRequest)
}

void TransferLeaderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto.base);
  peer_ = nullptr;
}

TransferLeaderRequest::~TransferLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderRequest)
  SharedDtor();
}

void TransferLeaderRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void TransferLeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferLeaderRequest& TransferLeaderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void TransferLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.TransferLeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferLeaderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .metapb.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferLeaderRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferLeaderRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::peer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferLeaderRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::peer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderRequest)
  return target;
}

size_t TransferLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.TransferLeaderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferLeaderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.TransferLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferLeaderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferLeaderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.TransferLeaderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.TransferLeaderRequest)
    MergeFrom(*source);
  }
}

void TransferLeaderRequest::MergeFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.TransferLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void TransferLeaderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderRequest::CopyFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderRequest::IsInitialized() const {
  return true;
}

void TransferLeaderRequest::Swap(TransferLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderRequest::InternalSwap(TransferLeaderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferLeaderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferLeaderResponse::InitAsDefaultInstance() {
}
class TransferLeaderResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderResponse::TransferLeaderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderResponse)
}
TransferLeaderResponse::TransferLeaderResponse(const TransferLeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderResponse)
}

void TransferLeaderResponse::SharedCtor() {
}

TransferLeaderResponse::~TransferLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderResponse)
  SharedDtor();
}

void TransferLeaderResponse::SharedDtor() {
}

void TransferLeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferLeaderResponse& TransferLeaderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void TransferLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.TransferLeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferLeaderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferLeaderResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferLeaderResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferLeaderResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderResponse)
  return target;
}

size_t TransferLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.TransferLeaderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferLeaderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.TransferLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferLeaderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferLeaderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.TransferLeaderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.TransferLeaderResponse)
    MergeFrom(*source);
  }
}

void TransferLeaderResponse::MergeFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.TransferLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransferLeaderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderResponse::CopyFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderResponse::IsInitialized() const {
  return true;
}

void TransferLeaderResponse::Swap(TransferLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderResponse::InternalSwap(TransferLeaderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferLeaderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->change_peer_ = const_cast< ::raft_cmdpb::ChangePeerRequest*>(
      ::raft_cmdpb::ChangePeerRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->compact_log_ = const_cast< ::raft_cmdpb::CompactLogRequest*>(
      ::raft_cmdpb::CompactLogRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderRequest*>(
      ::raft_cmdpb::TransferLeaderRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->split_ = const_cast< ::raft_cmdpb::SplitRequest*>(
      ::raft_cmdpb::SplitRequest::internal_default_instance());
}
class AdminRequest::HasBitSetters {
 public:
  static const ::raft_cmdpb::ChangePeerRequest& change_peer(const AdminRequest* msg);
  static const ::raft_cmdpb::CompactLogRequest& compact_log(const AdminRequest* msg);
  static const ::raft_cmdpb::TransferLeaderRequest& transfer_leader(const AdminRequest* msg);
  static const ::raft_cmdpb::SplitRequest& split(const AdminRequest* msg);
};

const ::raft_cmdpb::ChangePeerRequest&
AdminRequest::HasBitSetters::change_peer(const AdminRequest* msg) {
  return *msg->change_peer_;
}
const ::raft_cmdpb::CompactLogRequest&
AdminRequest::HasBitSetters::compact_log(const AdminRequest* msg) {
  return *msg->compact_log_;
}
const ::raft_cmdpb::TransferLeaderRequest&
AdminRequest::HasBitSetters::transfer_leader(const AdminRequest* msg) {
  return *msg->transfer_leader_;
}
const ::raft_cmdpb::SplitRequest&
AdminRequest::HasBitSetters::split(const AdminRequest* msg) {
  return *msg->split_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRequest::kCmdTypeFieldNumber;
const int AdminRequest::kChangePeerFieldNumber;
const int AdminRequest::kCompactLogFieldNumber;
const int AdminRequest::kTransferLeaderFieldNumber;
const int AdminRequest::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRequest::AdminRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminRequest)
}
AdminRequest::AdminRequest(const AdminRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_change_peer()) {
    change_peer_ = new ::raft_cmdpb::ChangePeerRequest(*from.change_peer_);
  } else {
    change_peer_ = nullptr;
  }
  if (from.has_compact_log()) {
    compact_log_ = new ::raft_cmdpb::CompactLogRequest(*from.compact_log_);
  } else {
    compact_log_ = nullptr;
  }
  if (from.has_transfer_leader()) {
    transfer_leader_ = new ::raft_cmdpb::TransferLeaderRequest(*from.transfer_leader_);
  } else {
    transfer_leader_ = nullptr;
  }
  if (from.has_split()) {
    split_ = new ::raft_cmdpb::SplitRequest(*from.split_);
  } else {
    split_ = nullptr;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminRequest)
}

void AdminRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdminRequest_raft_5fcmdpb_2eproto.base);
  ::memset(&change_peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&change_peer_)) + sizeof(cmd_type_));
}

AdminRequest::~AdminRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminRequest)
  SharedDtor();
}

void AdminRequest::SharedDtor() {
  if (this != internal_default_instance()) delete change_peer_;
  if (this != internal_default_instance()) delete compact_log_;
  if (this != internal_default_instance()) delete transfer_leader_;
  if (this != internal_default_instance()) delete split_;
}

void AdminRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminRequest& AdminRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void AdminRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.AdminRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && change_peer_ != nullptr) {
    delete change_peer_;
  }
  change_peer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && compact_log_ != nullptr) {
    delete compact_log_;
  }
  compact_log_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transfer_leader_ != nullptr) {
    delete transfer_leader_;
  }
  transfer_leader_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && split_ != nullptr) {
    delete split_;
  }
  split_ = nullptr;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdminRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_cmd_type(static_cast<::raft_cmdpb::AdminCmdType>(val));
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.ChangePeerRequest change_peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_change_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.CompactLogRequest compact_log = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_compact_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_transfer_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.SplitRequest split = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_split(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdminRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.ChangePeerRequest change_peer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.CompactLogRequest compact_log = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.SplitRequest split = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdminRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::change_peer(this), output);
  }

  // .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::compact_log(this), output);
  }

  // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::transfer_leader(this), output);
  }

  // .raft_cmdpb.SplitRequest split = 10;
  if (this->has_split()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::split(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::change_peer(this), target);
  }

  // .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::compact_log(this), target);
  }

  // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::transfer_leader(this), target);
  }

  // .raft_cmdpb.SplitRequest split = 10;
  if (this->has_split()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::split(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminRequest)
  return target;
}

size_t AdminRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.AdminRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *change_peer_);
  }

  // .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compact_log_);
  }

  // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transfer_leader_);
  }

  // .raft_cmdpb.SplitRequest split = 10;
  if (this->has_split()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *split_);
  }

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.AdminRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.AdminRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.AdminRequest)
    MergeFrom(*source);
  }
}

void AdminRequest::MergeFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.AdminRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_change_peer()) {
    mutable_change_peer()->::raft_cmdpb::ChangePeerRequest::MergeFrom(from.change_peer());
  }
  if (from.has_compact_log()) {
    mutable_compact_log()->::raft_cmdpb::CompactLogRequest::MergeFrom(from.compact_log());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::raft_cmdpb::TransferLeaderRequest::MergeFrom(from.transfer_leader());
  }
  if (from.has_split()) {
    mutable_split()->::raft_cmdpb::SplitRequest::MergeFrom(from.split());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void AdminRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminRequest::CopyFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRequest::IsInitialized() const {
  return true;
}

void AdminRequest::Swap(AdminRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRequest::InternalSwap(AdminRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(change_peer_, other->change_peer_);
  swap(compact_log_, other->compact_log_);
  swap(transfer_leader_, other->transfer_leader_);
  swap(split_, other->split_);
  swap(cmd_type_, other->cmd_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->change_peer_ = const_cast< ::raft_cmdpb::ChangePeerResponse*>(
      ::raft_cmdpb::ChangePeerResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->compact_log_ = const_cast< ::raft_cmdpb::CompactLogResponse*>(
      ::raft_cmdpb::CompactLogResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderResponse*>(
      ::raft_cmdpb::TransferLeaderResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->split_ = const_cast< ::raft_cmdpb::SplitResponse*>(
      ::raft_cmdpb::SplitResponse::internal_default_instance());
}
class AdminResponse::HasBitSetters {
 public:
  static const ::raft_cmdpb::ChangePeerResponse& change_peer(const AdminResponse* msg);
  static const ::raft_cmdpb::CompactLogResponse& compact_log(const AdminResponse* msg);
  static const ::raft_cmdpb::TransferLeaderResponse& transfer_leader(const AdminResponse* msg);
  static const ::raft_cmdpb::SplitResponse& split(const AdminResponse* msg);
};

const ::raft_cmdpb::ChangePeerResponse&
AdminResponse::HasBitSetters::change_peer(const AdminResponse* msg) {
  return *msg->change_peer_;
}
const ::raft_cmdpb::CompactLogResponse&
AdminResponse::HasBitSetters::compact_log(const AdminResponse* msg) {
  return *msg->compact_log_;
}
const ::raft_cmdpb::TransferLeaderResponse&
AdminResponse::HasBitSetters::transfer_leader(const AdminResponse* msg) {
  return *msg->transfer_leader_;
}
const ::raft_cmdpb::SplitResponse&
AdminResponse::HasBitSetters::split(const AdminResponse* msg) {
  return *msg->split_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminResponse::kCmdTypeFieldNumber;
const int AdminResponse::kChangePeerFieldNumber;
const int AdminResponse::kCompactLogFieldNumber;
const int AdminResponse::kTransferLeaderFieldNumber;
const int AdminResponse::kSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminResponse::AdminResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminResponse)
}
AdminResponse::AdminResponse(const AdminResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_change_peer()) {
    change_peer_ = new ::raft_cmdpb::ChangePeerResponse(*from.change_peer_);
  } else {
    change_peer_ = nullptr;
  }
  if (from.has_compact_log()) {
    compact_log_ = new ::raft_cmdpb::CompactLogResponse(*from.compact_log_);
  } else {
    compact_log_ = nullptr;
  }
  if (from.has_transfer_leader()) {
    transfer_leader_ = new ::raft_cmdpb::TransferLeaderResponse(*from.transfer_leader_);
  } else {
    transfer_leader_ = nullptr;
  }
  if (from.has_split()) {
    split_ = new ::raft_cmdpb::SplitResponse(*from.split_);
  } else {
    split_ = nullptr;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminResponse)
}

void AdminResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdminResponse_raft_5fcmdpb_2eproto.base);
  ::memset(&change_peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&change_peer_)) + sizeof(cmd_type_));
}

AdminResponse::~AdminResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminResponse)
  SharedDtor();
}

void AdminResponse::SharedDtor() {
  if (this != internal_default_instance()) delete change_peer_;
  if (this != internal_default_instance()) delete compact_log_;
  if (this != internal_default_instance()) delete transfer_leader_;
  if (this != internal_default_instance()) delete split_;
}

void AdminResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminResponse& AdminResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void AdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.AdminResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && change_peer_ != nullptr) {
    delete change_peer_;
  }
  change_peer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && compact_log_ != nullptr) {
    delete compact_log_;
  }
  compact_log_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transfer_leader_ != nullptr) {
    delete transfer_leader_;
  }
  transfer_leader_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && split_ != nullptr) {
    delete split_;
  }
  split_ = nullptr;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdminResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_cmd_type(static_cast<::raft_cmdpb::AdminCmdType>(val));
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.ChangePeerResponse change_peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_change_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.CompactLogResponse compact_log = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_compact_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_transfer_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.SplitResponse split = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_split(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdminResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.ChangePeerResponse change_peer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.CompactLogResponse compact_log = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.SplitResponse split = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdminResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::change_peer(this), output);
  }

  // .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::compact_log(this), output);
  }

  // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::transfer_leader(this), output);
  }

  // .raft_cmdpb.SplitResponse split = 10;
  if (this->has_split()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::split(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::change_peer(this), target);
  }

  // .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::compact_log(this), target);
  }

  // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::transfer_leader(this), target);
  }

  // .raft_cmdpb.SplitResponse split = 10;
  if (this->has_split()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::split(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminResponse)
  return target;
}

size_t AdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.AdminResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *change_peer_);
  }

  // .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compact_log_);
  }

  // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transfer_leader_);
  }

  // .raft_cmdpb.SplitResponse split = 10;
  if (this->has_split()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *split_);
  }

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.AdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.AdminResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.AdminResponse)
    MergeFrom(*source);
  }
}

void AdminResponse::MergeFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.AdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_change_peer()) {
    mutable_change_peer()->::raft_cmdpb::ChangePeerResponse::MergeFrom(from.change_peer());
  }
  if (from.has_compact_log()) {
    mutable_compact_log()->::raft_cmdpb::CompactLogResponse::MergeFrom(from.compact_log());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::raft_cmdpb::TransferLeaderResponse::MergeFrom(from.transfer_leader());
  }
  if (from.has_split()) {
    mutable_split()->::raft_cmdpb::SplitResponse::MergeFrom(from.split());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void AdminResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminResponse::CopyFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminResponse::IsInitialized() const {
  return true;
}

void AdminResponse::Swap(AdminResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminResponse::InternalSwap(AdminResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(change_peer_, other->change_peer_);
  swap(compact_log_, other->compact_log_);
  swap(transfer_leader_, other->transfer_leader_);
  swap(split_, other->split_);
  swap(cmd_type_, other->cmd_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftRequestHeader::InitAsDefaultInstance() {
  ::raft_cmdpb::_RaftRequestHeader_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  ::raft_cmdpb::_RaftRequestHeader_default_instance_._instance.get_mutable()->region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
}
class RaftRequestHeader::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const RaftRequestHeader* msg);
  static const ::metapb::RegionEpoch& region_epoch(const RaftRequestHeader* msg);
};

const ::metapb::Peer&
RaftRequestHeader::HasBitSetters::peer(const RaftRequestHeader* msg) {
  return *msg->peer_;
}
const ::metapb::RegionEpoch&
RaftRequestHeader::HasBitSetters::region_epoch(const RaftRequestHeader* msg) {
  return *msg->region_epoch_;
}
void RaftRequestHeader::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
void RaftRequestHeader::clear_region_epoch() {
  if (GetArenaNoVirtual() == nullptr && region_epoch_ != nullptr) {
    delete region_epoch_;
  }
  region_epoch_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftRequestHeader::kRegionIdFieldNumber;
const int RaftRequestHeader::kPeerFieldNumber;
const int RaftRequestHeader::kRegionEpochFieldNumber;
const int RaftRequestHeader::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftRequestHeader::RaftRequestHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftRequestHeader)
}
RaftRequestHeader::RaftRequestHeader(const RaftRequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  if (from.has_region_epoch()) {
    region_epoch_ = new ::metapb::RegionEpoch(*from.region_epoch_);
  } else {
    region_epoch_ = nullptr;
  }
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftRequestHeader)
}

void RaftRequestHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(term_));
}

RaftRequestHeader::~RaftRequestHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftRequestHeader)
  SharedDtor();
}

void RaftRequestHeader::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
  if (this != internal_default_instance()) delete region_epoch_;
}

void RaftRequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftRequestHeader& RaftRequestHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RaftRequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftRequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_epoch_ != nullptr) {
    delete region_epoch_;
  }
  region_epoch_ = nullptr;
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(term_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaftRequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 region_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Peer peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.RegionEpoch region_epoch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_region_epoch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaftRequestHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftRequestHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 region_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer peer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RegionEpoch region_epoch = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftRequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftRequestHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaftRequestHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftRequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peer(this), output);
  }

  // .metapb.RegionEpoch region_epoch = 4;
  if (this->has_region_epoch()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::region_epoch(this), output);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftRequestHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftRequestHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftRequestHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peer(this), target);
  }

  // .metapb.RegionEpoch region_epoch = 4;
  if (this->has_region_epoch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::region_epoch(this), target);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftRequestHeader)
  return target;
}

size_t RaftRequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftRequestHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .metapb.RegionEpoch region_epoch = 4;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_epoch_);
  }

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftRequestHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftRequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftRequestHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftRequestHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftRequestHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftRequestHeader)
    MergeFrom(*source);
  }
}

void RaftRequestHeader::MergeFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftRequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void RaftRequestHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftRequestHeader::CopyFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftRequestHeader::IsInitialized() const {
  return true;
}

void RaftRequestHeader::Swap(RaftRequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftRequestHeader::InternalSwap(RaftRequestHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
  swap(region_epoch_, other->region_epoch_);
  swap(region_id_, other->region_id_);
  swap(term_, other->term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftRequestHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftResponseHeader::InitAsDefaultInstance() {
  ::raft_cmdpb::_RaftResponseHeader_default_instance_._instance.get_mutable()->error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}
class RaftResponseHeader::HasBitSetters {
 public:
  static const ::errorpb::Error& error(const RaftResponseHeader* msg);
};

const ::errorpb::Error&
RaftResponseHeader::HasBitSetters::error(const RaftResponseHeader* msg) {
  return *msg->error_;
}
void RaftResponseHeader::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftResponseHeader::kErrorFieldNumber;
const int RaftResponseHeader::kUuidFieldNumber;
const int RaftResponseHeader::kCurrentTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftResponseHeader::RaftResponseHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftResponseHeader)
}
RaftResponseHeader::RaftResponseHeader(const RaftResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_error()) {
    error_ = new ::errorpb::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  current_term_ = from.current_term_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftResponseHeader)
}

void RaftResponseHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_term_) -
      reinterpret_cast<char*>(&error_)) + sizeof(current_term_));
}

RaftResponseHeader::~RaftResponseHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftResponseHeader)
  SharedDtor();
}

void RaftResponseHeader::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void RaftResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftResponseHeader& RaftResponseHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RaftResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  current_term_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaftResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_uuid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaftResponseHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftResponseHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes uuid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 current_term = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftResponseHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaftResponseHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error error = 1;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // bytes uuid = 2;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uuid(), output);
  }

  // uint64 current_term = 3;
  if (this->current_term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->current_term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftResponseHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftResponseHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error error = 1;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), target);
  }

  // bytes uuid = 2;
  if (this->uuid().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // uint64 current_term = 3;
  if (this->current_term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->current_term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftResponseHeader)
  return target;
}

size_t RaftResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftResponseHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // .errorpb.Error error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint64 current_term = 3;
  if (this->current_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->current_term());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftResponseHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftResponseHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftResponseHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftResponseHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftResponseHeader)
    MergeFrom(*source);
  }
}

void RaftResponseHeader::MergeFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_error()) {
    mutable_error()->::errorpb::Error::MergeFrom(from.error());
  }
  if (from.current_term() != 0) {
    set_current_term(from.current_term());
  }
}

void RaftResponseHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftResponseHeader::CopyFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftResponseHeader::IsInitialized() const {
  return true;
}

void RaftResponseHeader::Swap(RaftResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftResponseHeader::InternalSwap(RaftResponseHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(current_term_, other->current_term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftResponseHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftCmdRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_RaftCmdRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::raft_cmdpb::RaftRequestHeader*>(
      ::raft_cmdpb::RaftRequestHeader::internal_default_instance());
  ::raft_cmdpb::_RaftCmdRequest_default_instance_._instance.get_mutable()->admin_request_ = const_cast< ::raft_cmdpb::AdminRequest*>(
      ::raft_cmdpb::AdminRequest::internal_default_instance());
}
class RaftCmdRequest::HasBitSetters {
 public:
  static const ::raft_cmdpb::RaftRequestHeader& header(const RaftCmdRequest* msg);
  static const ::raft_cmdpb::AdminRequest& admin_request(const RaftCmdRequest* msg);
};

const ::raft_cmdpb::RaftRequestHeader&
RaftCmdRequest::HasBitSetters::header(const RaftCmdRequest* msg) {
  return *msg->header_;
}
const ::raft_cmdpb::AdminRequest&
RaftCmdRequest::HasBitSetters::admin_request(const RaftCmdRequest* msg) {
  return *msg->admin_request_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdRequest::kHeaderFieldNumber;
const int RaftCmdRequest::kRequestsFieldNumber;
const int RaftCmdRequest::kAdminRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdRequest::RaftCmdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdRequest)
}
RaftCmdRequest::RaftCmdRequest(const RaftCmdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::raft_cmdpb::RaftRequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_admin_request()) {
    admin_request_ = new ::raft_cmdpb::AdminRequest(*from.admin_request_);
  } else {
    admin_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdRequest)
}

void RaftCmdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RaftCmdRequest_raft_5fcmdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_request_) -
      reinterpret_cast<char*>(&header_)) + sizeof(admin_request_));
}

RaftCmdRequest::~RaftCmdRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdRequest)
  SharedDtor();
}

void RaftCmdRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete admin_request_;
}

void RaftCmdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftCmdRequest& RaftCmdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftCmdRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RaftCmdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftCmdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && admin_request_ != nullptr) {
    delete admin_request_;
  }
  admin_request_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaftCmdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .raft_cmdpb.RaftRequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raft_cmdpb.Request requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.AdminRequest admin_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_admin_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaftCmdRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.RaftRequestHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .raft_cmdpb.Request requests = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.AdminRequest admin_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaftCmdRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->requests(static_cast<int>(i)),
      output);
  }

  // .raft_cmdpb.AdminRequest admin_request = 3;
  if (this->has_admin_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::admin_request(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftCmdRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->requests(static_cast<int>(i)), target);
  }

  // .raft_cmdpb.AdminRequest admin_request = 3;
  if (this->has_admin_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::admin_request(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdRequest)
  return target;
}

size_t RaftCmdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftCmdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft_cmdpb.Request requests = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  // .raft_cmdpb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .raft_cmdpb.AdminRequest admin_request = 3;
  if (this->has_admin_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *admin_request_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftCmdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftCmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftCmdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftCmdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftCmdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftCmdRequest)
    MergeFrom(*source);
  }
}

void RaftCmdRequest::MergeFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftCmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_header()) {
    mutable_header()->::raft_cmdpb::RaftRequestHeader::MergeFrom(from.header());
  }
  if (from.has_admin_request()) {
    mutable_admin_request()->::raft_cmdpb::AdminRequest::MergeFrom(from.admin_request());
  }
}

void RaftCmdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdRequest::CopyFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCmdRequest::IsInitialized() const {
  return true;
}

void RaftCmdRequest::Swap(RaftCmdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdRequest::InternalSwap(RaftCmdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
  swap(header_, other->header_);
  swap(admin_request_, other->admin_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftCmdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaftCmdResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_RaftCmdResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::raft_cmdpb::RaftResponseHeader*>(
      ::raft_cmdpb::RaftResponseHeader::internal_default_instance());
  ::raft_cmdpb::_RaftCmdResponse_default_instance_._instance.get_mutable()->admin_response_ = const_cast< ::raft_cmdpb::AdminResponse*>(
      ::raft_cmdpb::AdminResponse::internal_default_instance());
}
class RaftCmdResponse::HasBitSetters {
 public:
  static const ::raft_cmdpb::RaftResponseHeader& header(const RaftCmdResponse* msg);
  static const ::raft_cmdpb::AdminResponse& admin_response(const RaftCmdResponse* msg);
};

const ::raft_cmdpb::RaftResponseHeader&
RaftCmdResponse::HasBitSetters::header(const RaftCmdResponse* msg) {
  return *msg->header_;
}
const ::raft_cmdpb::AdminResponse&
RaftCmdResponse::HasBitSetters::admin_response(const RaftCmdResponse* msg) {
  return *msg->admin_response_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdResponse::kHeaderFieldNumber;
const int RaftCmdResponse::kResponsesFieldNumber;
const int RaftCmdResponse::kAdminResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdResponse::RaftCmdResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdResponse)
}
RaftCmdResponse::RaftCmdResponse(const RaftCmdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::raft_cmdpb::RaftResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_admin_response()) {
    admin_response_ = new ::raft_cmdpb::AdminResponse(*from.admin_response_);
  } else {
    admin_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdResponse)
}

void RaftCmdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RaftCmdResponse_raft_5fcmdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&admin_response_) -
      reinterpret_cast<char*>(&header_)) + sizeof(admin_response_));
}

RaftCmdResponse::~RaftCmdResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdResponse)
  SharedDtor();
}

void RaftCmdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete admin_response_;
}

void RaftCmdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftCmdResponse& RaftCmdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaftCmdResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RaftCmdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftCmdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && admin_response_ != nullptr) {
    delete admin_response_;
  }
  admin_response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaftCmdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .raft_cmdpb.RaftResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raft_cmdpb.Response responses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .raft_cmdpb.AdminResponse admin_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_admin_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaftCmdResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.RaftResponseHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .raft_cmdpb.Response responses = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.AdminResponse admin_response = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaftCmdResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->responses(static_cast<int>(i)),
      output);
  }

  // .raft_cmdpb.AdminResponse admin_response = 3;
  if (this->has_admin_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::admin_response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RaftCmdResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->responses(static_cast<int>(i)), target);
  }

  // .raft_cmdpb.AdminResponse admin_response = 3;
  if (this->has_admin_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::admin_response(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdResponse)
  return target;
}

size_t RaftCmdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftCmdResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft_cmdpb.Response responses = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->responses(static_cast<int>(i)));
    }
  }

  // .raft_cmdpb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .raft_cmdpb.AdminResponse admin_response = 3;
  if (this->has_admin_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *admin_response_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftCmdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftCmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftCmdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaftCmdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftCmdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftCmdResponse)
    MergeFrom(*source);
  }
}

void RaftCmdResponse::MergeFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftCmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_header()) {
    mutable_header()->::raft_cmdpb::RaftResponseHeader::MergeFrom(from.header());
  }
  if (from.has_admin_response()) {
    mutable_admin_response()->::raft_cmdpb::AdminResponse::MergeFrom(from.admin_response());
  }
}

void RaftCmdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdResponse::CopyFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCmdResponse::IsInitialized() const {
  return true;
}

void RaftCmdResponse::Swap(RaftCmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdResponse::InternalSwap(RaftCmdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&responses_)->InternalSwap(CastToBase(&other->responses_));
  swap(header_, other->header_);
  swap(admin_response_, other->admin_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftCmdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace raft_cmdpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft_cmdpb::GetRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::GetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::GetResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::GetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::PutRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::PutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::PutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::PutResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::PutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::PutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::DeleteRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::DeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::DeleteResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::DeleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::SnapRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::SnapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::SnapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::SnapResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::SnapResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::SnapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::Request* Arena::CreateMaybeMessage< ::raft_cmdpb::Request >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::Response* Arena::CreateMaybeMessage< ::raft_cmdpb::Response >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::ChangePeerRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::ChangePeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::ChangePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::ChangePeerResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::ChangePeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::ChangePeerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::SplitRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::SplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::SplitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::SplitResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::SplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::SplitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::CompactLogRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::CompactLogRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::CompactLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::CompactLogResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::CompactLogResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::CompactLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::TransferLeaderRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::TransferLeaderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::TransferLeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::TransferLeaderResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::TransferLeaderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::TransferLeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::AdminRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::AdminRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::AdminRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::AdminResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::AdminResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::AdminResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::RaftRequestHeader* Arena::CreateMaybeMessage< ::raft_cmdpb::RaftRequestHeader >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RaftRequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::RaftResponseHeader* Arena::CreateMaybeMessage< ::raft_cmdpb::RaftResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RaftResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::RaftCmdRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::RaftCmdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RaftCmdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_cmdpb::RaftCmdResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::RaftCmdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RaftCmdResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
