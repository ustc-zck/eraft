// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocessor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_coprocessor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_coprocessor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "errorpb.pb.h"
#include "kvrpcpb.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_coprocessor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_coprocessor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coprocessor_2eproto;
namespace coprocessor {
class KeyRange;
class KeyRangeDefaultTypeInternal;
extern KeyRangeDefaultTypeInternal _KeyRange_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace coprocessor
PROTOBUF_NAMESPACE_OPEN
template<> ::coprocessor::KeyRange* Arena::CreateMaybeMessage<::coprocessor::KeyRange>(Arena*);
template<> ::coprocessor::Request* Arena::CreateMaybeMessage<::coprocessor::Request>(Arena*);
template<> ::coprocessor::Response* Arena::CreateMaybeMessage<::coprocessor::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace coprocessor {

// ===================================================================

class KeyRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coprocessor.KeyRange) */ {
 public:
  inline KeyRange() : KeyRange(nullptr) {}
  virtual ~KeyRange();

  KeyRange(const KeyRange& from);
  KeyRange(KeyRange&& from) noexcept
    : KeyRange() {
    *this = ::std::move(from);
  }

  inline KeyRange& operator=(const KeyRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyRange& operator=(KeyRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyRange& default_instance();

  static inline const KeyRange* internal_default_instance() {
    return reinterpret_cast<const KeyRange*>(
               &_KeyRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyRange& a, KeyRange& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyRange* New() const final {
    return CreateMaybeMessage<KeyRange>(nullptr);
  }

  KeyRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyRange& from);
  void MergeFrom(const KeyRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coprocessor.KeyRange";
  }
  protected:
  explicit KeyRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coprocessor_2eproto);
    return ::descriptor_table_coprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // bytes start = 1;
  void clear_start();
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const void* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // bytes end = 2;
  void clear_end();
  const std::string& end() const;
  void set_end(const std::string& value);
  void set_end(std::string&& value);
  void set_end(const char* value);
  void set_end(const void* value, size_t size);
  std::string* mutable_end();
  std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // @@protoc_insertion_point(class_scope:coprocessor.KeyRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coprocessor_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coprocessor.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coprocessor.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coprocessor_2eproto);
    return ::descriptor_table_coprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 4,
    kDataFieldNumber = 3,
    kContextFieldNumber = 1,
    kTpFieldNumber = 2,
    kStartTsFieldNumber = 7,
  };
  // repeated .coprocessor.KeyRange ranges = 4;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::coprocessor::KeyRange* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coprocessor::KeyRange >*
      mutable_ranges();
  private:
  const ::coprocessor::KeyRange& _internal_ranges(int index) const;
  ::coprocessor::KeyRange* _internal_add_ranges();
  public:
  const ::coprocessor::KeyRange& ranges(int index) const;
  ::coprocessor::KeyRange* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coprocessor::KeyRange >&
      ranges() const;

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // int64 tp = 2;
  void clear_tp();
  ::PROTOBUF_NAMESPACE_ID::int64 tp() const;
  void set_tp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tp() const;
  void _internal_set_tp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 start_ts = 7;
  void clear_start_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ts() const;
  void set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_ts() const;
  void _internal_set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:coprocessor.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coprocessor::KeyRange > ranges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::int64 tp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coprocessor_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coprocessor.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coprocessor.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coprocessor_2eproto);
    return ::descriptor_table_coprocessor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kOtherErrorFieldNumber = 4,
    kRegionErrorFieldNumber = 2,
    kLockedFieldNumber = 3,
    kRangeFieldNumber = 5,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string other_error = 4;
  void clear_other_error();
  const std::string& other_error() const;
  void set_other_error(const std::string& value);
  void set_other_error(std::string&& value);
  void set_other_error(const char* value);
  void set_other_error(const char* value, size_t size);
  std::string* mutable_other_error();
  std::string* release_other_error();
  void set_allocated_other_error(std::string* other_error);
  private:
  const std::string& _internal_other_error() const;
  void _internal_set_other_error(const std::string& value);
  std::string* _internal_mutable_other_error();
  public:

  // .errorpb.Error region_error = 2;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // .kvrpcpb.LockInfo locked = 3;
  bool has_locked() const;
  private:
  bool _internal_has_locked() const;
  public:
  void clear_locked();
  const ::kvrpcpb::LockInfo& locked() const;
  ::kvrpcpb::LockInfo* release_locked();
  ::kvrpcpb::LockInfo* mutable_locked();
  void set_allocated_locked(::kvrpcpb::LockInfo* locked);
  private:
  const ::kvrpcpb::LockInfo& _internal_locked() const;
  ::kvrpcpb::LockInfo* _internal_mutable_locked();
  public:
  void unsafe_arena_set_allocated_locked(
      ::kvrpcpb::LockInfo* locked);
  ::kvrpcpb::LockInfo* unsafe_arena_release_locked();

  // .coprocessor.KeyRange range = 5;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::coprocessor::KeyRange& range() const;
  ::coprocessor::KeyRange* release_range();
  ::coprocessor::KeyRange* mutable_range();
  void set_allocated_range(::coprocessor::KeyRange* range);
  private:
  const ::coprocessor::KeyRange& _internal_range() const;
  ::coprocessor::KeyRange* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::coprocessor::KeyRange* range);
  ::coprocessor::KeyRange* unsafe_arena_release_range();

  // @@protoc_insertion_point(class_scope:coprocessor.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_error_;
  ::errorpb::Error* region_error_;
  ::kvrpcpb::LockInfo* locked_;
  ::coprocessor::KeyRange* range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coprocessor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyRange

// bytes start = 1;
inline void KeyRange::clear_start() {
  start_.ClearToEmpty();
}
inline const std::string& KeyRange::start() const {
  // @@protoc_insertion_point(field_get:coprocessor.KeyRange.start)
  return _internal_start();
}
inline void KeyRange::set_start(const std::string& value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:coprocessor.KeyRange.start)
}
inline std::string* KeyRange::mutable_start() {
  // @@protoc_insertion_point(field_mutable:coprocessor.KeyRange.start)
  return _internal_mutable_start();
}
inline const std::string& KeyRange::_internal_start() const {
  return start_.Get();
}
inline void KeyRange::_internal_set_start(const std::string& value) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyRange::set_start(std::string&& value) {
  
  start_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:coprocessor.KeyRange.start)
}
inline void KeyRange::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:coprocessor.KeyRange.start)
}
inline void KeyRange::set_start(const void* value,
    size_t size) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:coprocessor.KeyRange.start)
}
inline std::string* KeyRange::_internal_mutable_start() {
  
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyRange::release_start() {
  // @@protoc_insertion_point(field_release:coprocessor.KeyRange.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyRange::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:coprocessor.KeyRange.start)
}

// bytes end = 2;
inline void KeyRange::clear_end() {
  end_.ClearToEmpty();
}
inline const std::string& KeyRange::end() const {
  // @@protoc_insertion_point(field_get:coprocessor.KeyRange.end)
  return _internal_end();
}
inline void KeyRange::set_end(const std::string& value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:coprocessor.KeyRange.end)
}
inline std::string* KeyRange::mutable_end() {
  // @@protoc_insertion_point(field_mutable:coprocessor.KeyRange.end)
  return _internal_mutable_end();
}
inline const std::string& KeyRange::_internal_end() const {
  return end_.Get();
}
inline void KeyRange::_internal_set_end(const std::string& value) {
  
  end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyRange::set_end(std::string&& value) {
  
  end_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:coprocessor.KeyRange.end)
}
inline void KeyRange::set_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:coprocessor.KeyRange.end)
}
inline void KeyRange::set_end(const void* value,
    size_t size) {
  
  end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:coprocessor.KeyRange.end)
}
inline std::string* KeyRange::_internal_mutable_end() {
  
  return end_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyRange::release_end() {
  // @@protoc_insertion_point(field_release:coprocessor.KeyRange.end)
  return end_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyRange::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:coprocessor.KeyRange.end)
}

// -------------------------------------------------------------------

// Request

// .kvrpcpb.Context context = 1;
inline bool Request::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool Request::has_context() const {
  return _internal_has_context();
}
inline const ::kvrpcpb::Context& Request::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& Request::context() const {
  // @@protoc_insertion_point(field_get:coprocessor.Request.context)
  return _internal_context();
}
inline void Request::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocessor.Request.context)
}
inline ::kvrpcpb::Context* Request::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* Request::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:coprocessor.Request.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* Request::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* Request::mutable_context() {
  // @@protoc_insertion_point(field_mutable:coprocessor.Request.context)
  return _internal_mutable_context();
}
inline void Request::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context)->GetArena();
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Request.context)
}

// int64 tp = 2;
inline void Request::clear_tp() {
  tp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::_internal_tp() const {
  return tp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::tp() const {
  // @@protoc_insertion_point(field_get:coprocessor.Request.tp)
  return _internal_tp();
}
inline void Request::_internal_set_tp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tp_ = value;
}
inline void Request::set_tp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:coprocessor.Request.tp)
}

// bytes data = 3;
inline void Request::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Request::data() const {
  // @@protoc_insertion_point(field_get:coprocessor.Request.data)
  return _internal_data();
}
inline void Request::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:coprocessor.Request.data)
}
inline std::string* Request::mutable_data() {
  // @@protoc_insertion_point(field_mutable:coprocessor.Request.data)
  return _internal_mutable_data();
}
inline const std::string& Request::_internal_data() const {
  return data_.Get();
}
inline void Request::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:coprocessor.Request.data)
}
inline void Request::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:coprocessor.Request.data)
}
inline void Request::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:coprocessor.Request.data)
}
inline std::string* Request::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_data() {
  // @@protoc_insertion_point(field_release:coprocessor.Request.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Request.data)
}

// uint64 start_ts = 7;
inline void Request::clear_start_ts() {
  start_ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::_internal_start_ts() const {
  return start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::start_ts() const {
  // @@protoc_insertion_point(field_get:coprocessor.Request.start_ts)
  return _internal_start_ts();
}
inline void Request::_internal_set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_ts_ = value;
}
inline void Request::set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_ts(value);
  // @@protoc_insertion_point(field_set:coprocessor.Request.start_ts)
}

// repeated .coprocessor.KeyRange ranges = 4;
inline int Request::_internal_ranges_size() const {
  return ranges_.size();
}
inline int Request::ranges_size() const {
  return _internal_ranges_size();
}
inline void Request::clear_ranges() {
  ranges_.Clear();
}
inline ::coprocessor::KeyRange* Request::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:coprocessor.Request.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coprocessor::KeyRange >*
Request::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:coprocessor.Request.ranges)
  return &ranges_;
}
inline const ::coprocessor::KeyRange& Request::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::coprocessor::KeyRange& Request::ranges(int index) const {
  // @@protoc_insertion_point(field_get:coprocessor.Request.ranges)
  return _internal_ranges(index);
}
inline ::coprocessor::KeyRange* Request::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::coprocessor::KeyRange* Request::add_ranges() {
  // @@protoc_insertion_point(field_add:coprocessor.Request.ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coprocessor::KeyRange >&
Request::ranges() const {
  // @@protoc_insertion_point(field_list:coprocessor.Request.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// Response

// bytes data = 1;
inline void Response::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Response::data() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.data)
  return _internal_data();
}
inline void Response::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:coprocessor.Response.data)
}
inline std::string* Response::mutable_data() {
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.data)
  return _internal_mutable_data();
}
inline const std::string& Response::_internal_data() const {
  return data_.Get();
}
inline void Response::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:coprocessor.Response.data)
}
inline void Response::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:coprocessor.Response.data)
}
inline void Response::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:coprocessor.Response.data)
}
inline std::string* Response::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_data() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.data)
}

// .errorpb.Error region_error = 2;
inline bool Response::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool Response::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& Response::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& Response::region_error() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.region_error)
  return _internal_region_error();
}
inline void Response::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocessor.Response.region_error)
}
inline ::errorpb::Error* Response::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* Response::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* Response::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* Response::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.region_error)
  return _internal_mutable_region_error();
}
inline void Response::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.region_error)
}

// .kvrpcpb.LockInfo locked = 3;
inline bool Response::_internal_has_locked() const {
  return this != internal_default_instance() && locked_ != nullptr;
}
inline bool Response::has_locked() const {
  return _internal_has_locked();
}
inline const ::kvrpcpb::LockInfo& Response::_internal_locked() const {
  const ::kvrpcpb::LockInfo* p = locked_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::LockInfo&>(
      ::kvrpcpb::_LockInfo_default_instance_);
}
inline const ::kvrpcpb::LockInfo& Response::locked() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.locked)
  return _internal_locked();
}
inline void Response::unsafe_arena_set_allocated_locked(
    ::kvrpcpb::LockInfo* locked) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locked_);
  }
  locked_ = locked;
  if (locked) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocessor.Response.locked)
}
inline ::kvrpcpb::LockInfo* Response::release_locked() {
  
  ::kvrpcpb::LockInfo* temp = locked_;
  locked_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::LockInfo* Response::unsafe_arena_release_locked() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.locked)
  
  ::kvrpcpb::LockInfo* temp = locked_;
  locked_ = nullptr;
  return temp;
}
inline ::kvrpcpb::LockInfo* Response::_internal_mutable_locked() {
  
  if (locked_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::LockInfo>(GetArena());
    locked_ = p;
  }
  return locked_;
}
inline ::kvrpcpb::LockInfo* Response::mutable_locked() {
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.locked)
  return _internal_mutable_locked();
}
inline void Response::set_allocated_locked(::kvrpcpb::LockInfo* locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(locked_);
  }
  if (locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locked)->GetArena();
    if (message_arena != submessage_arena) {
      locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locked, submessage_arena);
    }
    
  } else {
    
  }
  locked_ = locked;
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.locked)
}

// string other_error = 4;
inline void Response::clear_other_error() {
  other_error_.ClearToEmpty();
}
inline const std::string& Response::other_error() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.other_error)
  return _internal_other_error();
}
inline void Response::set_other_error(const std::string& value) {
  _internal_set_other_error(value);
  // @@protoc_insertion_point(field_set:coprocessor.Response.other_error)
}
inline std::string* Response::mutable_other_error() {
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.other_error)
  return _internal_mutable_other_error();
}
inline const std::string& Response::_internal_other_error() const {
  return other_error_.Get();
}
inline void Response::_internal_set_other_error(const std::string& value) {
  
  other_error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_other_error(std::string&& value) {
  
  other_error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:coprocessor.Response.other_error)
}
inline void Response::set_other_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  other_error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:coprocessor.Response.other_error)
}
inline void Response::set_other_error(const char* value,
    size_t size) {
  
  other_error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:coprocessor.Response.other_error)
}
inline std::string* Response::_internal_mutable_other_error() {
  
  return other_error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_other_error() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.other_error)
  return other_error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_other_error(std::string* other_error) {
  if (other_error != nullptr) {
    
  } else {
    
  }
  other_error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), other_error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.other_error)
}

// .coprocessor.KeyRange range = 5;
inline bool Response::_internal_has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline bool Response::has_range() const {
  return _internal_has_range();
}
inline void Response::clear_range() {
  if (GetArena() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
inline const ::coprocessor::KeyRange& Response::_internal_range() const {
  const ::coprocessor::KeyRange* p = range_;
  return p != nullptr ? *p : reinterpret_cast<const ::coprocessor::KeyRange&>(
      ::coprocessor::_KeyRange_default_instance_);
}
inline const ::coprocessor::KeyRange& Response::range() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.range)
  return _internal_range();
}
inline void Response::unsafe_arena_set_allocated_range(
    ::coprocessor::KeyRange* range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:coprocessor.Response.range)
}
inline ::coprocessor::KeyRange* Response::release_range() {
  
  ::coprocessor::KeyRange* temp = range_;
  range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::coprocessor::KeyRange* Response::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.range)
  
  ::coprocessor::KeyRange* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::coprocessor::KeyRange* Response::_internal_mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::coprocessor::KeyRange>(GetArena());
    range_ = p;
  }
  return range_;
}
inline ::coprocessor::KeyRange* Response::mutable_range() {
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.range)
  return _internal_mutable_range();
}
inline void Response::set_allocated_range(::coprocessor::KeyRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.range)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coprocessor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_coprocessor_2eproto
