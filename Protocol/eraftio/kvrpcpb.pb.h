// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvrpcpb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvrpcpb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kvrpcpb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
#include "errorpb.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kvrpcpb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvrpcpb_2eproto;
namespace kvrpcpb {
class BatchRollbackRequest;
class BatchRollbackRequestDefaultTypeInternal;
extern BatchRollbackRequestDefaultTypeInternal _BatchRollbackRequest_default_instance_;
class BatchRollbackResponse;
class BatchRollbackResponseDefaultTypeInternal;
extern BatchRollbackResponseDefaultTypeInternal _BatchRollbackResponse_default_instance_;
class CheckTxnStatusRequest;
class CheckTxnStatusRequestDefaultTypeInternal;
extern CheckTxnStatusRequestDefaultTypeInternal _CheckTxnStatusRequest_default_instance_;
class CheckTxnStatusResponse;
class CheckTxnStatusResponseDefaultTypeInternal;
extern CheckTxnStatusResponseDefaultTypeInternal _CheckTxnStatusResponse_default_instance_;
class CommitRequest;
class CommitRequestDefaultTypeInternal;
extern CommitRequestDefaultTypeInternal _CommitRequest_default_instance_;
class CommitResponse;
class CommitResponseDefaultTypeInternal;
extern CommitResponseDefaultTypeInternal _CommitResponse_default_instance_;
class Context;
class ContextDefaultTypeInternal;
extern ContextDefaultTypeInternal _Context_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class KeyError;
class KeyErrorDefaultTypeInternal;
extern KeyErrorDefaultTypeInternal _KeyError_default_instance_;
class KvPair;
class KvPairDefaultTypeInternal;
extern KvPairDefaultTypeInternal _KvPair_default_instance_;
class LockInfo;
class LockInfoDefaultTypeInternal;
extern LockInfoDefaultTypeInternal _LockInfo_default_instance_;
class Mutation;
class MutationDefaultTypeInternal;
extern MutationDefaultTypeInternal _Mutation_default_instance_;
class PrewriteRequest;
class PrewriteRequestDefaultTypeInternal;
extern PrewriteRequestDefaultTypeInternal _PrewriteRequest_default_instance_;
class PrewriteResponse;
class PrewriteResponseDefaultTypeInternal;
extern PrewriteResponseDefaultTypeInternal _PrewriteResponse_default_instance_;
class RawDeleteRequest;
class RawDeleteRequestDefaultTypeInternal;
extern RawDeleteRequestDefaultTypeInternal _RawDeleteRequest_default_instance_;
class RawDeleteResponse;
class RawDeleteResponseDefaultTypeInternal;
extern RawDeleteResponseDefaultTypeInternal _RawDeleteResponse_default_instance_;
class RawGetRequest;
class RawGetRequestDefaultTypeInternal;
extern RawGetRequestDefaultTypeInternal _RawGetRequest_default_instance_;
class RawGetResponse;
class RawGetResponseDefaultTypeInternal;
extern RawGetResponseDefaultTypeInternal _RawGetResponse_default_instance_;
class RawPutRequest;
class RawPutRequestDefaultTypeInternal;
extern RawPutRequestDefaultTypeInternal _RawPutRequest_default_instance_;
class RawPutResponse;
class RawPutResponseDefaultTypeInternal;
extern RawPutResponseDefaultTypeInternal _RawPutResponse_default_instance_;
class RawScanRequest;
class RawScanRequestDefaultTypeInternal;
extern RawScanRequestDefaultTypeInternal _RawScanRequest_default_instance_;
class RawScanResponse;
class RawScanResponseDefaultTypeInternal;
extern RawScanResponseDefaultTypeInternal _RawScanResponse_default_instance_;
class ResolveLockRequest;
class ResolveLockRequestDefaultTypeInternal;
extern ResolveLockRequestDefaultTypeInternal _ResolveLockRequest_default_instance_;
class ResolveLockResponse;
class ResolveLockResponseDefaultTypeInternal;
extern ResolveLockResponseDefaultTypeInternal _ResolveLockResponse_default_instance_;
class ScanRequest;
class ScanRequestDefaultTypeInternal;
extern ScanRequestDefaultTypeInternal _ScanRequest_default_instance_;
class ScanResponse;
class ScanResponseDefaultTypeInternal;
extern ScanResponseDefaultTypeInternal _ScanResponse_default_instance_;
class WriteConflict;
class WriteConflictDefaultTypeInternal;
extern WriteConflictDefaultTypeInternal _WriteConflict_default_instance_;
}  // namespace kvrpcpb
PROTOBUF_NAMESPACE_OPEN
template<> ::kvrpcpb::BatchRollbackRequest* Arena::CreateMaybeMessage<::kvrpcpb::BatchRollbackRequest>(Arena*);
template<> ::kvrpcpb::BatchRollbackResponse* Arena::CreateMaybeMessage<::kvrpcpb::BatchRollbackResponse>(Arena*);
template<> ::kvrpcpb::CheckTxnStatusRequest* Arena::CreateMaybeMessage<::kvrpcpb::CheckTxnStatusRequest>(Arena*);
template<> ::kvrpcpb::CheckTxnStatusResponse* Arena::CreateMaybeMessage<::kvrpcpb::CheckTxnStatusResponse>(Arena*);
template<> ::kvrpcpb::CommitRequest* Arena::CreateMaybeMessage<::kvrpcpb::CommitRequest>(Arena*);
template<> ::kvrpcpb::CommitResponse* Arena::CreateMaybeMessage<::kvrpcpb::CommitResponse>(Arena*);
template<> ::kvrpcpb::Context* Arena::CreateMaybeMessage<::kvrpcpb::Context>(Arena*);
template<> ::kvrpcpb::GetRequest* Arena::CreateMaybeMessage<::kvrpcpb::GetRequest>(Arena*);
template<> ::kvrpcpb::GetResponse* Arena::CreateMaybeMessage<::kvrpcpb::GetResponse>(Arena*);
template<> ::kvrpcpb::KeyError* Arena::CreateMaybeMessage<::kvrpcpb::KeyError>(Arena*);
template<> ::kvrpcpb::KvPair* Arena::CreateMaybeMessage<::kvrpcpb::KvPair>(Arena*);
template<> ::kvrpcpb::LockInfo* Arena::CreateMaybeMessage<::kvrpcpb::LockInfo>(Arena*);
template<> ::kvrpcpb::Mutation* Arena::CreateMaybeMessage<::kvrpcpb::Mutation>(Arena*);
template<> ::kvrpcpb::PrewriteRequest* Arena::CreateMaybeMessage<::kvrpcpb::PrewriteRequest>(Arena*);
template<> ::kvrpcpb::PrewriteResponse* Arena::CreateMaybeMessage<::kvrpcpb::PrewriteResponse>(Arena*);
template<> ::kvrpcpb::RawDeleteRequest* Arena::CreateMaybeMessage<::kvrpcpb::RawDeleteRequest>(Arena*);
template<> ::kvrpcpb::RawDeleteResponse* Arena::CreateMaybeMessage<::kvrpcpb::RawDeleteResponse>(Arena*);
template<> ::kvrpcpb::RawGetRequest* Arena::CreateMaybeMessage<::kvrpcpb::RawGetRequest>(Arena*);
template<> ::kvrpcpb::RawGetResponse* Arena::CreateMaybeMessage<::kvrpcpb::RawGetResponse>(Arena*);
template<> ::kvrpcpb::RawPutRequest* Arena::CreateMaybeMessage<::kvrpcpb::RawPutRequest>(Arena*);
template<> ::kvrpcpb::RawPutResponse* Arena::CreateMaybeMessage<::kvrpcpb::RawPutResponse>(Arena*);
template<> ::kvrpcpb::RawScanRequest* Arena::CreateMaybeMessage<::kvrpcpb::RawScanRequest>(Arena*);
template<> ::kvrpcpb::RawScanResponse* Arena::CreateMaybeMessage<::kvrpcpb::RawScanResponse>(Arena*);
template<> ::kvrpcpb::ResolveLockRequest* Arena::CreateMaybeMessage<::kvrpcpb::ResolveLockRequest>(Arena*);
template<> ::kvrpcpb::ResolveLockResponse* Arena::CreateMaybeMessage<::kvrpcpb::ResolveLockResponse>(Arena*);
template<> ::kvrpcpb::ScanRequest* Arena::CreateMaybeMessage<::kvrpcpb::ScanRequest>(Arena*);
template<> ::kvrpcpb::ScanResponse* Arena::CreateMaybeMessage<::kvrpcpb::ScanResponse>(Arena*);
template<> ::kvrpcpb::WriteConflict* Arena::CreateMaybeMessage<::kvrpcpb::WriteConflict>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kvrpcpb {

enum Op : int {
  Put = 0,
  Del = 1,
  Rollback = 2,
  Lock = 3,
  Op_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Op_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Op_IsValid(int value);
constexpr Op Op_MIN = Put;
constexpr Op Op_MAX = Lock;
constexpr int Op_ARRAYSIZE = Op_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Op_descriptor();
template<typename T>
inline const std::string& Op_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Op>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Op_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Op_descriptor(), enum_t_value);
}
inline bool Op_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Op* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Op>(
    Op_descriptor(), name, value);
}
enum Action : int {
  NoAction = 0,
  TTLExpireRollback = 1,
  LockNotExistRollback = 2,
  Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Action_IsValid(int value);
constexpr Action Action_MIN = NoAction;
constexpr Action Action_MAX = LockNotExistRollback;
constexpr int Action_ARRAYSIZE = Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor();
template<typename T>
inline const std::string& Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Action_descriptor(), enum_t_value);
}
inline bool Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
// ===================================================================

class RawGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.RawGetRequest) */ {
 public:
  inline RawGetRequest() : RawGetRequest(nullptr) {}
  virtual ~RawGetRequest();

  RawGetRequest(const RawGetRequest& from);
  RawGetRequest(RawGetRequest&& from) noexcept
    : RawGetRequest() {
    *this = ::std::move(from);
  }

  inline RawGetRequest& operator=(const RawGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawGetRequest& operator=(RawGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawGetRequest& default_instance();

  static inline const RawGetRequest* internal_default_instance() {
    return reinterpret_cast<const RawGetRequest*>(
               &_RawGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RawGetRequest& a, RawGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RawGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawGetRequest* New() const final {
    return CreateMaybeMessage<RawGetRequest>(nullptr);
  }

  RawGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawGetRequest& from);
  void MergeFrom(const RawGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.RawGetRequest";
  }
  protected:
  explicit RawGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kCfFieldNumber = 3,
    kContextFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string cf = 3;
  void clear_cf();
  const std::string& cf() const;
  void set_cf(const std::string& value);
  void set_cf(std::string&& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  std::string* mutable_cf();
  std::string* release_cf();
  void set_allocated_cf(std::string* cf);
  private:
  const std::string& _internal_cf() const;
  void _internal_set_cf(const std::string& value);
  std::string* _internal_mutable_cf();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:kvrpcpb.RawGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_;
  ::kvrpcpb::Context* context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class RawGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.RawGetResponse) */ {
 public:
  inline RawGetResponse() : RawGetResponse(nullptr) {}
  virtual ~RawGetResponse();

  RawGetResponse(const RawGetResponse& from);
  RawGetResponse(RawGetResponse&& from) noexcept
    : RawGetResponse() {
    *this = ::std::move(from);
  }

  inline RawGetResponse& operator=(const RawGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawGetResponse& operator=(RawGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawGetResponse& default_instance();

  static inline const RawGetResponse* internal_default_instance() {
    return reinterpret_cast<const RawGetResponse*>(
               &_RawGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RawGetResponse& a, RawGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RawGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawGetResponse* New() const final {
    return CreateMaybeMessage<RawGetResponse>(nullptr);
  }

  RawGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawGetResponse& from);
  void MergeFrom(const RawGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.RawGetResponse";
  }
  protected:
  explicit RawGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kValueFieldNumber = 3,
    kRegionErrorFieldNumber = 1,
    kNotFoundFieldNumber = 4,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // bool not_found = 4;
  void clear_not_found();
  bool not_found() const;
  void set_not_found(bool value);
  private:
  bool _internal_not_found() const;
  void _internal_set_not_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.RawGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::errorpb::Error* region_error_;
  bool not_found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class RawPutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.RawPutRequest) */ {
 public:
  inline RawPutRequest() : RawPutRequest(nullptr) {}
  virtual ~RawPutRequest();

  RawPutRequest(const RawPutRequest& from);
  RawPutRequest(RawPutRequest&& from) noexcept
    : RawPutRequest() {
    *this = ::std::move(from);
  }

  inline RawPutRequest& operator=(const RawPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawPutRequest& operator=(RawPutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawPutRequest& default_instance();

  static inline const RawPutRequest* internal_default_instance() {
    return reinterpret_cast<const RawPutRequest*>(
               &_RawPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RawPutRequest& a, RawPutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RawPutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawPutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawPutRequest* New() const final {
    return CreateMaybeMessage<RawPutRequest>(nullptr);
  }

  RawPutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawPutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawPutRequest& from);
  void MergeFrom(const RawPutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawPutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.RawPutRequest";
  }
  protected:
  explicit RawPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kCfFieldNumber = 4,
    kContextFieldNumber = 1,
    kIdFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string cf = 4;
  void clear_cf();
  const std::string& cf() const;
  void set_cf(const std::string& value);
  void set_cf(std::string&& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  std::string* mutable_cf();
  std::string* release_cf();
  void set_allocated_cf(std::string* cf);
  private:
  const std::string& _internal_cf() const;
  void _internal_set_cf(const std::string& value);
  std::string* _internal_mutable_cf();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // uint64 id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 type = 6;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.RawPutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class RawPutResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.RawPutResponse) */ {
 public:
  inline RawPutResponse() : RawPutResponse(nullptr) {}
  virtual ~RawPutResponse();

  RawPutResponse(const RawPutResponse& from);
  RawPutResponse(RawPutResponse&& from) noexcept
    : RawPutResponse() {
    *this = ::std::move(from);
  }

  inline RawPutResponse& operator=(const RawPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawPutResponse& operator=(RawPutResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawPutResponse& default_instance();

  static inline const RawPutResponse* internal_default_instance() {
    return reinterpret_cast<const RawPutResponse*>(
               &_RawPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RawPutResponse& a, RawPutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RawPutResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawPutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawPutResponse* New() const final {
    return CreateMaybeMessage<RawPutResponse>(nullptr);
  }

  RawPutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawPutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawPutResponse& from);
  void MergeFrom(const RawPutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawPutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.RawPutResponse";
  }
  protected:
  explicit RawPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kRegionErrorFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // @@protoc_insertion_point(class_scope:kvrpcpb.RawPutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::errorpb::Error* region_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class RawDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.RawDeleteRequest) */ {
 public:
  inline RawDeleteRequest() : RawDeleteRequest(nullptr) {}
  virtual ~RawDeleteRequest();

  RawDeleteRequest(const RawDeleteRequest& from);
  RawDeleteRequest(RawDeleteRequest&& from) noexcept
    : RawDeleteRequest() {
    *this = ::std::move(from);
  }

  inline RawDeleteRequest& operator=(const RawDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawDeleteRequest& operator=(RawDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawDeleteRequest& default_instance();

  static inline const RawDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const RawDeleteRequest*>(
               &_RawDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RawDeleteRequest& a, RawDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RawDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawDeleteRequest* New() const final {
    return CreateMaybeMessage<RawDeleteRequest>(nullptr);
  }

  RawDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawDeleteRequest& from);
  void MergeFrom(const RawDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.RawDeleteRequest";
  }
  protected:
  explicit RawDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kCfFieldNumber = 3,
    kContextFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string cf = 3;
  void clear_cf();
  const std::string& cf() const;
  void set_cf(const std::string& value);
  void set_cf(std::string&& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  std::string* mutable_cf();
  std::string* release_cf();
  void set_allocated_cf(std::string* cf);
  private:
  const std::string& _internal_cf() const;
  void _internal_set_cf(const std::string& value);
  std::string* _internal_mutable_cf();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:kvrpcpb.RawDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_;
  ::kvrpcpb::Context* context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class RawDeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.RawDeleteResponse) */ {
 public:
  inline RawDeleteResponse() : RawDeleteResponse(nullptr) {}
  virtual ~RawDeleteResponse();

  RawDeleteResponse(const RawDeleteResponse& from);
  RawDeleteResponse(RawDeleteResponse&& from) noexcept
    : RawDeleteResponse() {
    *this = ::std::move(from);
  }

  inline RawDeleteResponse& operator=(const RawDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawDeleteResponse& operator=(RawDeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawDeleteResponse& default_instance();

  static inline const RawDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const RawDeleteResponse*>(
               &_RawDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RawDeleteResponse& a, RawDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RawDeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawDeleteResponse* New() const final {
    return CreateMaybeMessage<RawDeleteResponse>(nullptr);
  }

  RawDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawDeleteResponse& from);
  void MergeFrom(const RawDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.RawDeleteResponse";
  }
  protected:
  explicit RawDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kRegionErrorFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // @@protoc_insertion_point(class_scope:kvrpcpb.RawDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::errorpb::Error* region_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class RawScanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.RawScanRequest) */ {
 public:
  inline RawScanRequest() : RawScanRequest(nullptr) {}
  virtual ~RawScanRequest();

  RawScanRequest(const RawScanRequest& from);
  RawScanRequest(RawScanRequest&& from) noexcept
    : RawScanRequest() {
    *this = ::std::move(from);
  }

  inline RawScanRequest& operator=(const RawScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawScanRequest& operator=(RawScanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawScanRequest& default_instance();

  static inline const RawScanRequest* internal_default_instance() {
    return reinterpret_cast<const RawScanRequest*>(
               &_RawScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RawScanRequest& a, RawScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RawScanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawScanRequest* New() const final {
    return CreateMaybeMessage<RawScanRequest>(nullptr);
  }

  RawScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawScanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawScanRequest& from);
  void MergeFrom(const RawScanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawScanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.RawScanRequest";
  }
  protected:
  explicit RawScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyFieldNumber = 2,
    kCfFieldNumber = 4,
    kContextFieldNumber = 1,
    kLimitFieldNumber = 3,
  };
  // bytes start_key = 2;
  void clear_start_key();
  const std::string& start_key() const;
  void set_start_key(const std::string& value);
  void set_start_key(std::string&& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  std::string* mutable_start_key();
  std::string* release_start_key();
  void set_allocated_start_key(std::string* start_key);
  private:
  const std::string& _internal_start_key() const;
  void _internal_set_start_key(const std::string& value);
  std::string* _internal_mutable_start_key();
  public:

  // string cf = 4;
  void clear_cf();
  const std::string& cf() const;
  void set_cf(const std::string& value);
  void set_cf(std::string&& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  std::string* mutable_cf();
  std::string* release_cf();
  void set_allocated_cf(std::string* cf);
  private:
  const std::string& _internal_cf() const;
  void _internal_set_cf(const std::string& value);
  std::string* _internal_mutable_cf();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // uint32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.RawScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class RawScanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.RawScanResponse) */ {
 public:
  inline RawScanResponse() : RawScanResponse(nullptr) {}
  virtual ~RawScanResponse();

  RawScanResponse(const RawScanResponse& from);
  RawScanResponse(RawScanResponse&& from) noexcept
    : RawScanResponse() {
    *this = ::std::move(from);
  }

  inline RawScanResponse& operator=(const RawScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawScanResponse& operator=(RawScanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawScanResponse& default_instance();

  static inline const RawScanResponse* internal_default_instance() {
    return reinterpret_cast<const RawScanResponse*>(
               &_RawScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RawScanResponse& a, RawScanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RawScanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawScanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawScanResponse* New() const final {
    return CreateMaybeMessage<RawScanResponse>(nullptr);
  }

  RawScanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawScanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawScanResponse& from);
  void MergeFrom(const RawScanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawScanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.RawScanResponse";
  }
  protected:
  explicit RawScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 3,
    kErrorFieldNumber = 2,
    kRegionErrorFieldNumber = 1,
  };
  // repeated .kvrpcpb.KvPair kvs = 3;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::kvrpcpb::KvPair* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair >*
      mutable_kvs();
  private:
  const ::kvrpcpb::KvPair& _internal_kvs(int index) const;
  ::kvrpcpb::KvPair* _internal_add_kvs();
  public:
  const ::kvrpcpb::KvPair& kvs(int index) const;
  ::kvrpcpb::KvPair* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair >&
      kvs() const;

  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // @@protoc_insertion_point(class_scope:kvrpcpb.RawScanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair > kvs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::errorpb::Error* region_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class GetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRequest& default_instance();

  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kContextFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // uint64 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class GetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponse& default_instance();

  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(nullptr);
  }

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.GetResponse";
  }
  protected:
  explicit GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kRegionErrorFieldNumber = 1,
    kErrorFieldNumber = 2,
    kNotFoundFieldNumber = 4,
  };
  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // .kvrpcpb.KeyError error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::kvrpcpb::KeyError& error() const;
  ::kvrpcpb::KeyError* release_error();
  ::kvrpcpb::KeyError* mutable_error();
  void set_allocated_error(::kvrpcpb::KeyError* error);
  private:
  const ::kvrpcpb::KeyError& _internal_error() const;
  ::kvrpcpb::KeyError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::kvrpcpb::KeyError* error);
  ::kvrpcpb::KeyError* unsafe_arena_release_error();

  // bool not_found = 4;
  void clear_not_found();
  bool not_found() const;
  void set_not_found(bool value);
  private:
  bool _internal_not_found() const;
  void _internal_set_not_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.GetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::errorpb::Error* region_error_;
  ::kvrpcpb::KeyError* error_;
  bool not_found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class PrewriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.PrewriteRequest) */ {
 public:
  inline PrewriteRequest() : PrewriteRequest(nullptr) {}
  virtual ~PrewriteRequest();

  PrewriteRequest(const PrewriteRequest& from);
  PrewriteRequest(PrewriteRequest&& from) noexcept
    : PrewriteRequest() {
    *this = ::std::move(from);
  }

  inline PrewriteRequest& operator=(const PrewriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrewriteRequest& operator=(PrewriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrewriteRequest& default_instance();

  static inline const PrewriteRequest* internal_default_instance() {
    return reinterpret_cast<const PrewriteRequest*>(
               &_PrewriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PrewriteRequest& a, PrewriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrewriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrewriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrewriteRequest* New() const final {
    return CreateMaybeMessage<PrewriteRequest>(nullptr);
  }

  PrewriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrewriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrewriteRequest& from);
  void MergeFrom(const PrewriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrewriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.PrewriteRequest";
  }
  protected:
  explicit PrewriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationsFieldNumber = 2,
    kPrimaryLockFieldNumber = 3,
    kContextFieldNumber = 1,
    kStartVersionFieldNumber = 4,
    kLockTtlFieldNumber = 5,
  };
  // repeated .kvrpcpb.Mutation mutations = 2;
  int mutations_size() const;
  private:
  int _internal_mutations_size() const;
  public:
  void clear_mutations();
  ::kvrpcpb::Mutation* mutable_mutations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::Mutation >*
      mutable_mutations();
  private:
  const ::kvrpcpb::Mutation& _internal_mutations(int index) const;
  ::kvrpcpb::Mutation* _internal_add_mutations();
  public:
  const ::kvrpcpb::Mutation& mutations(int index) const;
  ::kvrpcpb::Mutation* add_mutations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::Mutation >&
      mutations() const;

  // bytes primary_lock = 3;
  void clear_primary_lock();
  const std::string& primary_lock() const;
  void set_primary_lock(const std::string& value);
  void set_primary_lock(std::string&& value);
  void set_primary_lock(const char* value);
  void set_primary_lock(const void* value, size_t size);
  std::string* mutable_primary_lock();
  std::string* release_primary_lock();
  void set_allocated_primary_lock(std::string* primary_lock);
  private:
  const std::string& _internal_primary_lock() const;
  void _internal_set_primary_lock(const std::string& value);
  std::string* _internal_mutable_primary_lock();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // uint64 start_version = 4;
  void clear_start_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_version() const;
  void set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_version() const;
  void _internal_set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lock_ttl = 5;
  void clear_lock_ttl();
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_ttl() const;
  void set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lock_ttl() const;
  void _internal_set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.PrewriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::Mutation > mutations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_lock_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class PrewriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.PrewriteResponse) */ {
 public:
  inline PrewriteResponse() : PrewriteResponse(nullptr) {}
  virtual ~PrewriteResponse();

  PrewriteResponse(const PrewriteResponse& from);
  PrewriteResponse(PrewriteResponse&& from) noexcept
    : PrewriteResponse() {
    *this = ::std::move(from);
  }

  inline PrewriteResponse& operator=(const PrewriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrewriteResponse& operator=(PrewriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrewriteResponse& default_instance();

  static inline const PrewriteResponse* internal_default_instance() {
    return reinterpret_cast<const PrewriteResponse*>(
               &_PrewriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PrewriteResponse& a, PrewriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrewriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrewriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrewriteResponse* New() const final {
    return CreateMaybeMessage<PrewriteResponse>(nullptr);
  }

  PrewriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrewriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrewriteResponse& from);
  void MergeFrom(const PrewriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrewriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.PrewriteResponse";
  }
  protected:
  explicit PrewriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 2,
    kRegionErrorFieldNumber = 1,
  };
  // repeated .kvrpcpb.KeyError errors = 2;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::kvrpcpb::KeyError* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KeyError >*
      mutable_errors();
  private:
  const ::kvrpcpb::KeyError& _internal_errors(int index) const;
  ::kvrpcpb::KeyError* _internal_add_errors();
  public:
  const ::kvrpcpb::KeyError& errors(int index) const;
  ::kvrpcpb::KeyError* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KeyError >&
      errors() const;

  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // @@protoc_insertion_point(class_scope:kvrpcpb.PrewriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KeyError > errors_;
  ::errorpb::Error* region_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class CommitRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.CommitRequest) */ {
 public:
  inline CommitRequest() : CommitRequest(nullptr) {}
  virtual ~CommitRequest();

  CommitRequest(const CommitRequest& from);
  CommitRequest(CommitRequest&& from) noexcept
    : CommitRequest() {
    *this = ::std::move(from);
  }

  inline CommitRequest& operator=(const CommitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitRequest& operator=(CommitRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommitRequest& default_instance();

  static inline const CommitRequest* internal_default_instance() {
    return reinterpret_cast<const CommitRequest*>(
               &_CommitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CommitRequest& a, CommitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitRequest* New() const final {
    return CreateMaybeMessage<CommitRequest>(nullptr);
  }

  CommitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommitRequest& from);
  void MergeFrom(const CommitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.CommitRequest";
  }
  protected:
  explicit CommitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kContextFieldNumber = 1,
    kStartVersionFieldNumber = 2,
    kCommitVersionFieldNumber = 4,
  };
  // repeated bytes keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // uint64 start_version = 2;
  void clear_start_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_version() const;
  void set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_version() const;
  void _internal_set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 commit_version = 4;
  void clear_commit_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_version() const;
  void set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_version() const;
  void _internal_set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.CommitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class CommitResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.CommitResponse) */ {
 public:
  inline CommitResponse() : CommitResponse(nullptr) {}
  virtual ~CommitResponse();

  CommitResponse(const CommitResponse& from);
  CommitResponse(CommitResponse&& from) noexcept
    : CommitResponse() {
    *this = ::std::move(from);
  }

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitResponse& operator=(CommitResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommitResponse& default_instance();

  static inline const CommitResponse* internal_default_instance() {
    return reinterpret_cast<const CommitResponse*>(
               &_CommitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CommitResponse& a, CommitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitResponse* New() const final {
    return CreateMaybeMessage<CommitResponse>(nullptr);
  }

  CommitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommitResponse& from);
  void MergeFrom(const CommitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.CommitResponse";
  }
  protected:
  explicit CommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionErrorFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // .kvrpcpb.KeyError error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::kvrpcpb::KeyError& error() const;
  ::kvrpcpb::KeyError* release_error();
  ::kvrpcpb::KeyError* mutable_error();
  void set_allocated_error(::kvrpcpb::KeyError* error);
  private:
  const ::kvrpcpb::KeyError& _internal_error() const;
  ::kvrpcpb::KeyError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::kvrpcpb::KeyError* error);
  ::kvrpcpb::KeyError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:kvrpcpb.CommitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::errorpb::Error* region_error_;
  ::kvrpcpb::KeyError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class ScanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.ScanRequest) */ {
 public:
  inline ScanRequest() : ScanRequest(nullptr) {}
  virtual ~ScanRequest();

  ScanRequest(const ScanRequest& from);
  ScanRequest(ScanRequest&& from) noexcept
    : ScanRequest() {
    *this = ::std::move(from);
  }

  inline ScanRequest& operator=(const ScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanRequest& operator=(ScanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanRequest& default_instance();

  static inline const ScanRequest* internal_default_instance() {
    return reinterpret_cast<const ScanRequest*>(
               &_ScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ScanRequest& a, ScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanRequest* New() const final {
    return CreateMaybeMessage<ScanRequest>(nullptr);
  }

  ScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanRequest& from);
  void MergeFrom(const ScanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.ScanRequest";
  }
  protected:
  explicit ScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyFieldNumber = 2,
    kContextFieldNumber = 1,
    kVersionFieldNumber = 4,
    kLimitFieldNumber = 3,
  };
  // bytes start_key = 2;
  void clear_start_key();
  const std::string& start_key() const;
  void set_start_key(const std::string& value);
  void set_start_key(std::string&& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  std::string* mutable_start_key();
  std::string* release_start_key();
  void set_allocated_start_key(std::string* start_key);
  private:
  const std::string& _internal_start_key() const;
  void _internal_set_start_key(const std::string& value);
  std::string* _internal_mutable_start_key();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // uint64 version = 4;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.ScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class ScanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.ScanResponse) */ {
 public:
  inline ScanResponse() : ScanResponse(nullptr) {}
  virtual ~ScanResponse();

  ScanResponse(const ScanResponse& from);
  ScanResponse(ScanResponse&& from) noexcept
    : ScanResponse() {
    *this = ::std::move(from);
  }

  inline ScanResponse& operator=(const ScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanResponse& operator=(ScanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanResponse& default_instance();

  static inline const ScanResponse* internal_default_instance() {
    return reinterpret_cast<const ScanResponse*>(
               &_ScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ScanResponse& a, ScanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanResponse* New() const final {
    return CreateMaybeMessage<ScanResponse>(nullptr);
  }

  ScanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanResponse& from);
  void MergeFrom(const ScanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.ScanResponse";
  }
  protected:
  explicit ScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 2,
    kRegionErrorFieldNumber = 1,
  };
  // repeated .kvrpcpb.KvPair pairs = 2;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::kvrpcpb::KvPair* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair >*
      mutable_pairs();
  private:
  const ::kvrpcpb::KvPair& _internal_pairs(int index) const;
  ::kvrpcpb::KvPair* _internal_add_pairs();
  public:
  const ::kvrpcpb::KvPair& pairs(int index) const;
  ::kvrpcpb::KvPair* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair >&
      pairs() const;

  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // @@protoc_insertion_point(class_scope:kvrpcpb.ScanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair > pairs_;
  ::errorpb::Error* region_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class BatchRollbackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.BatchRollbackRequest) */ {
 public:
  inline BatchRollbackRequest() : BatchRollbackRequest(nullptr) {}
  virtual ~BatchRollbackRequest();

  BatchRollbackRequest(const BatchRollbackRequest& from);
  BatchRollbackRequest(BatchRollbackRequest&& from) noexcept
    : BatchRollbackRequest() {
    *this = ::std::move(from);
  }

  inline BatchRollbackRequest& operator=(const BatchRollbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchRollbackRequest& operator=(BatchRollbackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchRollbackRequest& default_instance();

  static inline const BatchRollbackRequest* internal_default_instance() {
    return reinterpret_cast<const BatchRollbackRequest*>(
               &_BatchRollbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BatchRollbackRequest& a, BatchRollbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchRollbackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchRollbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchRollbackRequest* New() const final {
    return CreateMaybeMessage<BatchRollbackRequest>(nullptr);
  }

  BatchRollbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchRollbackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchRollbackRequest& from);
  void MergeFrom(const BatchRollbackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchRollbackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.BatchRollbackRequest";
  }
  protected:
  explicit BatchRollbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kContextFieldNumber = 1,
    kStartVersionFieldNumber = 2,
  };
  // repeated bytes keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // uint64 start_version = 2;
  void clear_start_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_version() const;
  void set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_version() const;
  void _internal_set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.BatchRollbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class BatchRollbackResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.BatchRollbackResponse) */ {
 public:
  inline BatchRollbackResponse() : BatchRollbackResponse(nullptr) {}
  virtual ~BatchRollbackResponse();

  BatchRollbackResponse(const BatchRollbackResponse& from);
  BatchRollbackResponse(BatchRollbackResponse&& from) noexcept
    : BatchRollbackResponse() {
    *this = ::std::move(from);
  }

  inline BatchRollbackResponse& operator=(const BatchRollbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchRollbackResponse& operator=(BatchRollbackResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchRollbackResponse& default_instance();

  static inline const BatchRollbackResponse* internal_default_instance() {
    return reinterpret_cast<const BatchRollbackResponse*>(
               &_BatchRollbackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BatchRollbackResponse& a, BatchRollbackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchRollbackResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchRollbackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchRollbackResponse* New() const final {
    return CreateMaybeMessage<BatchRollbackResponse>(nullptr);
  }

  BatchRollbackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchRollbackResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchRollbackResponse& from);
  void MergeFrom(const BatchRollbackResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchRollbackResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.BatchRollbackResponse";
  }
  protected:
  explicit BatchRollbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionErrorFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // .kvrpcpb.KeyError error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::kvrpcpb::KeyError& error() const;
  ::kvrpcpb::KeyError* release_error();
  ::kvrpcpb::KeyError* mutable_error();
  void set_allocated_error(::kvrpcpb::KeyError* error);
  private:
  const ::kvrpcpb::KeyError& _internal_error() const;
  ::kvrpcpb::KeyError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::kvrpcpb::KeyError* error);
  ::kvrpcpb::KeyError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:kvrpcpb.BatchRollbackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::errorpb::Error* region_error_;
  ::kvrpcpb::KeyError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class CheckTxnStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.CheckTxnStatusRequest) */ {
 public:
  inline CheckTxnStatusRequest() : CheckTxnStatusRequest(nullptr) {}
  virtual ~CheckTxnStatusRequest();

  CheckTxnStatusRequest(const CheckTxnStatusRequest& from);
  CheckTxnStatusRequest(CheckTxnStatusRequest&& from) noexcept
    : CheckTxnStatusRequest() {
    *this = ::std::move(from);
  }

  inline CheckTxnStatusRequest& operator=(const CheckTxnStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckTxnStatusRequest& operator=(CheckTxnStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckTxnStatusRequest& default_instance();

  static inline const CheckTxnStatusRequest* internal_default_instance() {
    return reinterpret_cast<const CheckTxnStatusRequest*>(
               &_CheckTxnStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CheckTxnStatusRequest& a, CheckTxnStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckTxnStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckTxnStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckTxnStatusRequest* New() const final {
    return CreateMaybeMessage<CheckTxnStatusRequest>(nullptr);
  }

  CheckTxnStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckTxnStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckTxnStatusRequest& from);
  void MergeFrom(const CheckTxnStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckTxnStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.CheckTxnStatusRequest";
  }
  protected:
  explicit CheckTxnStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryKeyFieldNumber = 2,
    kContextFieldNumber = 1,
    kLockTsFieldNumber = 3,
    kCurrentTsFieldNumber = 4,
  };
  // bytes primary_key = 2;
  void clear_primary_key();
  const std::string& primary_key() const;
  void set_primary_key(const std::string& value);
  void set_primary_key(std::string&& value);
  void set_primary_key(const char* value);
  void set_primary_key(const void* value, size_t size);
  std::string* mutable_primary_key();
  std::string* release_primary_key();
  void set_allocated_primary_key(std::string* primary_key);
  private:
  const std::string& _internal_primary_key() const;
  void _internal_set_primary_key(const std::string& value);
  std::string* _internal_mutable_primary_key();
  public:

  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // uint64 lock_ts = 3;
  void clear_lock_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_ts() const;
  void set_lock_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lock_ts() const;
  void _internal_set_lock_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 current_ts = 4;
  void clear_current_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_ts() const;
  void set_current_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_ts() const;
  void _internal_set_current_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.CheckTxnStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_key_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_ts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class CheckTxnStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.CheckTxnStatusResponse) */ {
 public:
  inline CheckTxnStatusResponse() : CheckTxnStatusResponse(nullptr) {}
  virtual ~CheckTxnStatusResponse();

  CheckTxnStatusResponse(const CheckTxnStatusResponse& from);
  CheckTxnStatusResponse(CheckTxnStatusResponse&& from) noexcept
    : CheckTxnStatusResponse() {
    *this = ::std::move(from);
  }

  inline CheckTxnStatusResponse& operator=(const CheckTxnStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckTxnStatusResponse& operator=(CheckTxnStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckTxnStatusResponse& default_instance();

  static inline const CheckTxnStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CheckTxnStatusResponse*>(
               &_CheckTxnStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CheckTxnStatusResponse& a, CheckTxnStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckTxnStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckTxnStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckTxnStatusResponse* New() const final {
    return CreateMaybeMessage<CheckTxnStatusResponse>(nullptr);
  }

  CheckTxnStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckTxnStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckTxnStatusResponse& from);
  void MergeFrom(const CheckTxnStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckTxnStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.CheckTxnStatusResponse";
  }
  protected:
  explicit CheckTxnStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionErrorFieldNumber = 1,
    kLockTtlFieldNumber = 2,
    kCommitVersionFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // uint64 lock_ttl = 2;
  void clear_lock_ttl();
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_ttl() const;
  void set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lock_ttl() const;
  void _internal_set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 commit_version = 3;
  void clear_commit_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_version() const;
  void set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_version() const;
  void _internal_set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .kvrpcpb.Action action = 4;
  void clear_action();
  ::kvrpcpb::Action action() const;
  void set_action(::kvrpcpb::Action value);
  private:
  ::kvrpcpb::Action _internal_action() const;
  void _internal_set_action(::kvrpcpb::Action value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.CheckTxnStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::errorpb::Error* region_error_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_ttl_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_version_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class ResolveLockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.ResolveLockRequest) */ {
 public:
  inline ResolveLockRequest() : ResolveLockRequest(nullptr) {}
  virtual ~ResolveLockRequest();

  ResolveLockRequest(const ResolveLockRequest& from);
  ResolveLockRequest(ResolveLockRequest&& from) noexcept
    : ResolveLockRequest() {
    *this = ::std::move(from);
  }

  inline ResolveLockRequest& operator=(const ResolveLockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveLockRequest& operator=(ResolveLockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveLockRequest& default_instance();

  static inline const ResolveLockRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveLockRequest*>(
               &_ResolveLockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ResolveLockRequest& a, ResolveLockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveLockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveLockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveLockRequest* New() const final {
    return CreateMaybeMessage<ResolveLockRequest>(nullptr);
  }

  ResolveLockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveLockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveLockRequest& from);
  void MergeFrom(const ResolveLockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveLockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.ResolveLockRequest";
  }
  protected:
  explicit ResolveLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextFieldNumber = 1,
    kStartVersionFieldNumber = 2,
    kCommitVersionFieldNumber = 3,
  };
  // .kvrpcpb.Context context = 1;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::kvrpcpb::Context& context() const;
  ::kvrpcpb::Context* release_context();
  ::kvrpcpb::Context* mutable_context();
  void set_allocated_context(::kvrpcpb::Context* context);
  private:
  const ::kvrpcpb::Context& _internal_context() const;
  ::kvrpcpb::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::kvrpcpb::Context* context);
  ::kvrpcpb::Context* unsafe_arena_release_context();

  // uint64 start_version = 2;
  void clear_start_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_version() const;
  void set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_version() const;
  void _internal_set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 commit_version = 3;
  void clear_commit_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_version() const;
  void set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_version() const;
  void _internal_set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.ResolveLockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kvrpcpb::Context* context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class ResolveLockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.ResolveLockResponse) */ {
 public:
  inline ResolveLockResponse() : ResolveLockResponse(nullptr) {}
  virtual ~ResolveLockResponse();

  ResolveLockResponse(const ResolveLockResponse& from);
  ResolveLockResponse(ResolveLockResponse&& from) noexcept
    : ResolveLockResponse() {
    *this = ::std::move(from);
  }

  inline ResolveLockResponse& operator=(const ResolveLockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveLockResponse& operator=(ResolveLockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveLockResponse& default_instance();

  static inline const ResolveLockResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveLockResponse*>(
               &_ResolveLockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ResolveLockResponse& a, ResolveLockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveLockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveLockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveLockResponse* New() const final {
    return CreateMaybeMessage<ResolveLockResponse>(nullptr);
  }

  ResolveLockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveLockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveLockResponse& from);
  void MergeFrom(const ResolveLockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveLockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.ResolveLockResponse";
  }
  protected:
  explicit ResolveLockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionErrorFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .errorpb.Error region_error = 1;
  bool has_region_error() const;
  private:
  bool _internal_has_region_error() const;
  public:
  void clear_region_error();
  const ::errorpb::Error& region_error() const;
  ::errorpb::Error* release_region_error();
  ::errorpb::Error* mutable_region_error();
  void set_allocated_region_error(::errorpb::Error* region_error);
  private:
  const ::errorpb::Error& _internal_region_error() const;
  ::errorpb::Error* _internal_mutable_region_error();
  public:
  void unsafe_arena_set_allocated_region_error(
      ::errorpb::Error* region_error);
  ::errorpb::Error* unsafe_arena_release_region_error();

  // .kvrpcpb.KeyError error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::kvrpcpb::KeyError& error() const;
  ::kvrpcpb::KeyError* release_error();
  ::kvrpcpb::KeyError* mutable_error();
  void set_allocated_error(::kvrpcpb::KeyError* error);
  private:
  const ::kvrpcpb::KeyError& _internal_error() const;
  ::kvrpcpb::KeyError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::kvrpcpb::KeyError* error);
  ::kvrpcpb::KeyError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:kvrpcpb.ResolveLockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::errorpb::Error* region_error_;
  ::kvrpcpb::KeyError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class KvPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.KvPair) */ {
 public:
  inline KvPair() : KvPair(nullptr) {}
  virtual ~KvPair();

  KvPair(const KvPair& from);
  KvPair(KvPair&& from) noexcept
    : KvPair() {
    *this = ::std::move(from);
  }

  inline KvPair& operator=(const KvPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvPair& operator=(KvPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvPair& default_instance();

  static inline const KvPair* internal_default_instance() {
    return reinterpret_cast<const KvPair*>(
               &_KvPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(KvPair& a, KvPair& b) {
    a.Swap(&b);
  }
  inline void Swap(KvPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvPair* New() const final {
    return CreateMaybeMessage<KvPair>(nullptr);
  }

  KvPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvPair& from);
  void MergeFrom(const KvPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.KvPair";
  }
  protected:
  explicit KvPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .kvrpcpb.KeyError error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::kvrpcpb::KeyError& error() const;
  ::kvrpcpb::KeyError* release_error();
  ::kvrpcpb::KeyError* mutable_error();
  void set_allocated_error(::kvrpcpb::KeyError* error);
  private:
  const ::kvrpcpb::KeyError& _internal_error() const;
  ::kvrpcpb::KeyError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::kvrpcpb::KeyError* error);
  ::kvrpcpb::KeyError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:kvrpcpb.KvPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::kvrpcpb::KeyError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class Mutation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.Mutation) */ {
 public:
  inline Mutation() : Mutation(nullptr) {}
  virtual ~Mutation();

  Mutation(const Mutation& from);
  Mutation(Mutation&& from) noexcept
    : Mutation() {
    *this = ::std::move(from);
  }

  inline Mutation& operator=(const Mutation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mutation& operator=(Mutation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mutation& default_instance();

  static inline const Mutation* internal_default_instance() {
    return reinterpret_cast<const Mutation*>(
               &_Mutation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Mutation& a, Mutation& b) {
    a.Swap(&b);
  }
  inline void Swap(Mutation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mutation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mutation* New() const final {
    return CreateMaybeMessage<Mutation>(nullptr);
  }

  Mutation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mutation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mutation& from);
  void MergeFrom(const Mutation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mutation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.Mutation";
  }
  protected:
  explicit Mutation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kOpFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .kvrpcpb.Op op = 1;
  void clear_op();
  ::kvrpcpb::Op op() const;
  void set_op(::kvrpcpb::Op value);
  private:
  ::kvrpcpb::Op _internal_op() const;
  void _internal_set_op(::kvrpcpb::Op value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.Mutation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class KeyError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.KeyError) */ {
 public:
  inline KeyError() : KeyError(nullptr) {}
  virtual ~KeyError();

  KeyError(const KeyError& from);
  KeyError(KeyError&& from) noexcept
    : KeyError() {
    *this = ::std::move(from);
  }

  inline KeyError& operator=(const KeyError& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyError& operator=(KeyError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyError& default_instance();

  static inline const KeyError* internal_default_instance() {
    return reinterpret_cast<const KeyError*>(
               &_KeyError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(KeyError& a, KeyError& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyError* New() const final {
    return CreateMaybeMessage<KeyError>(nullptr);
  }

  KeyError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyError& from);
  void MergeFrom(const KeyError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.KeyError";
  }
  protected:
  explicit KeyError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetryableFieldNumber = 2,
    kAbortFieldNumber = 3,
    kLockedFieldNumber = 1,
    kConflictFieldNumber = 4,
  };
  // string retryable = 2;
  void clear_retryable();
  const std::string& retryable() const;
  void set_retryable(const std::string& value);
  void set_retryable(std::string&& value);
  void set_retryable(const char* value);
  void set_retryable(const char* value, size_t size);
  std::string* mutable_retryable();
  std::string* release_retryable();
  void set_allocated_retryable(std::string* retryable);
  private:
  const std::string& _internal_retryable() const;
  void _internal_set_retryable(const std::string& value);
  std::string* _internal_mutable_retryable();
  public:

  // string abort = 3;
  void clear_abort();
  const std::string& abort() const;
  void set_abort(const std::string& value);
  void set_abort(std::string&& value);
  void set_abort(const char* value);
  void set_abort(const char* value, size_t size);
  std::string* mutable_abort();
  std::string* release_abort();
  void set_allocated_abort(std::string* abort);
  private:
  const std::string& _internal_abort() const;
  void _internal_set_abort(const std::string& value);
  std::string* _internal_mutable_abort();
  public:

  // .kvrpcpb.LockInfo locked = 1;
  bool has_locked() const;
  private:
  bool _internal_has_locked() const;
  public:
  void clear_locked();
  const ::kvrpcpb::LockInfo& locked() const;
  ::kvrpcpb::LockInfo* release_locked();
  ::kvrpcpb::LockInfo* mutable_locked();
  void set_allocated_locked(::kvrpcpb::LockInfo* locked);
  private:
  const ::kvrpcpb::LockInfo& _internal_locked() const;
  ::kvrpcpb::LockInfo* _internal_mutable_locked();
  public:
  void unsafe_arena_set_allocated_locked(
      ::kvrpcpb::LockInfo* locked);
  ::kvrpcpb::LockInfo* unsafe_arena_release_locked();

  // .kvrpcpb.WriteConflict conflict = 4;
  bool has_conflict() const;
  private:
  bool _internal_has_conflict() const;
  public:
  void clear_conflict();
  const ::kvrpcpb::WriteConflict& conflict() const;
  ::kvrpcpb::WriteConflict* release_conflict();
  ::kvrpcpb::WriteConflict* mutable_conflict();
  void set_allocated_conflict(::kvrpcpb::WriteConflict* conflict);
  private:
  const ::kvrpcpb::WriteConflict& _internal_conflict() const;
  ::kvrpcpb::WriteConflict* _internal_mutable_conflict();
  public:
  void unsafe_arena_set_allocated_conflict(
      ::kvrpcpb::WriteConflict* conflict);
  ::kvrpcpb::WriteConflict* unsafe_arena_release_conflict();

  // @@protoc_insertion_point(class_scope:kvrpcpb.KeyError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr retryable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abort_;
  ::kvrpcpb::LockInfo* locked_;
  ::kvrpcpb::WriteConflict* conflict_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class LockInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.LockInfo) */ {
 public:
  inline LockInfo() : LockInfo(nullptr) {}
  virtual ~LockInfo();

  LockInfo(const LockInfo& from);
  LockInfo(LockInfo&& from) noexcept
    : LockInfo() {
    *this = ::std::move(from);
  }

  inline LockInfo& operator=(const LockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockInfo& operator=(LockInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockInfo& default_instance();

  static inline const LockInfo* internal_default_instance() {
    return reinterpret_cast<const LockInfo*>(
               &_LockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LockInfo& a, LockInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LockInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockInfo* New() const final {
    return CreateMaybeMessage<LockInfo>(nullptr);
  }

  LockInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockInfo& from);
  void MergeFrom(const LockInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.LockInfo";
  }
  protected:
  explicit LockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryLockFieldNumber = 1,
    kKeyFieldNumber = 3,
    kLockVersionFieldNumber = 2,
    kLockTtlFieldNumber = 4,
  };
  // bytes primary_lock = 1;
  void clear_primary_lock();
  const std::string& primary_lock() const;
  void set_primary_lock(const std::string& value);
  void set_primary_lock(std::string&& value);
  void set_primary_lock(const char* value);
  void set_primary_lock(const void* value, size_t size);
  std::string* mutable_primary_lock();
  std::string* release_primary_lock();
  void set_allocated_primary_lock(std::string* primary_lock);
  private:
  const std::string& _internal_primary_lock() const;
  void _internal_set_primary_lock(const std::string& value);
  std::string* _internal_mutable_primary_lock();
  public:

  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 lock_version = 2;
  void clear_lock_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_version() const;
  void set_lock_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lock_version() const;
  void _internal_set_lock_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lock_ttl = 4;
  void clear_lock_ttl();
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_ttl() const;
  void set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lock_ttl() const;
  void _internal_set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.LockInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_lock_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class WriteConflict PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.WriteConflict) */ {
 public:
  inline WriteConflict() : WriteConflict(nullptr) {}
  virtual ~WriteConflict();

  WriteConflict(const WriteConflict& from);
  WriteConflict(WriteConflict&& from) noexcept
    : WriteConflict() {
    *this = ::std::move(from);
  }

  inline WriteConflict& operator=(const WriteConflict& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteConflict& operator=(WriteConflict&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteConflict& default_instance();

  static inline const WriteConflict* internal_default_instance() {
    return reinterpret_cast<const WriteConflict*>(
               &_WriteConflict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(WriteConflict& a, WriteConflict& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteConflict* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteConflict* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteConflict* New() const final {
    return CreateMaybeMessage<WriteConflict>(nullptr);
  }

  WriteConflict* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteConflict>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteConflict& from);
  void MergeFrom(const WriteConflict& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteConflict* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.WriteConflict";
  }
  protected:
  explicit WriteConflict(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kPrimaryFieldNumber = 4,
    kStartTsFieldNumber = 1,
    kConflictTsFieldNumber = 2,
  };
  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes primary = 4;
  void clear_primary();
  const std::string& primary() const;
  void set_primary(const std::string& value);
  void set_primary(std::string&& value);
  void set_primary(const char* value);
  void set_primary(const void* value, size_t size);
  std::string* mutable_primary();
  std::string* release_primary();
  void set_allocated_primary(std::string* primary);
  private:
  const std::string& _internal_primary() const;
  void _internal_set_primary(const std::string& value);
  std::string* _internal_mutable_primary();
  public:

  // uint64 start_ts = 1;
  void clear_start_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ts() const;
  void set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_ts() const;
  void _internal_set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 conflict_ts = 2;
  void clear_conflict_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 conflict_ts() const;
  void set_conflict_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_conflict_ts() const;
  void _internal_set_conflict_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.WriteConflict)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 conflict_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// -------------------------------------------------------------------

class Context PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kvrpcpb.Context) */ {
 public:
  inline Context() : Context(nullptr) {}
  virtual ~Context();

  Context(const Context& from);
  Context(Context&& from) noexcept
    : Context() {
    *this = ::std::move(from);
  }

  inline Context& operator=(const Context& from) {
    CopyFrom(from);
    return *this;
  }
  inline Context& operator=(Context&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Context& default_instance();

  static inline const Context* internal_default_instance() {
    return reinterpret_cast<const Context*>(
               &_Context_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Context& a, Context& b) {
    a.Swap(&b);
  }
  inline void Swap(Context* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Context* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Context* New() const final {
    return CreateMaybeMessage<Context>(nullptr);
  }

  Context* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Context>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Context& from);
  void MergeFrom(const Context& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Context* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kvrpcpb.Context";
  }
  protected:
  explicit Context(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvrpcpb_2eproto);
    return ::descriptor_table_kvrpcpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionEpochFieldNumber = 2,
    kPeerFieldNumber = 3,
    kRegionIdFieldNumber = 1,
    kTermFieldNumber = 5,
  };
  // .metapb.RegionEpoch region_epoch = 2;
  bool has_region_epoch() const;
  private:
  bool _internal_has_region_epoch() const;
  public:
  void clear_region_epoch();
  const ::metapb::RegionEpoch& region_epoch() const;
  ::metapb::RegionEpoch* release_region_epoch();
  ::metapb::RegionEpoch* mutable_region_epoch();
  void set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch);
  private:
  const ::metapb::RegionEpoch& _internal_region_epoch() const;
  ::metapb::RegionEpoch* _internal_mutable_region_epoch();
  public:
  void unsafe_arena_set_allocated_region_epoch(
      ::metapb::RegionEpoch* region_epoch);
  ::metapb::RegionEpoch* unsafe_arena_release_region_epoch();

  // .metapb.Peer peer = 3;
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* release_peer();
  ::metapb::Peer* mutable_peer();
  void set_allocated_peer(::metapb::Peer* peer);
  private:
  const ::metapb::Peer& _internal_peer() const;
  ::metapb::Peer* _internal_mutable_peer();
  public:
  void unsafe_arena_set_allocated_peer(
      ::metapb::Peer* peer);
  ::metapb::Peer* unsafe_arena_release_peer();

  // uint64 region_id = 1;
  void clear_region_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 region_id() const;
  void set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_region_id() const;
  void _internal_set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 term = 5;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kvrpcpb.Context)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::metapb::RegionEpoch* region_epoch_;
  ::metapb::Peer* peer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 region_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvrpcpb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RawGetRequest

// .kvrpcpb.Context context = 1;
inline bool RawGetRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool RawGetRequest::has_context() const {
  return _internal_has_context();
}
inline void RawGetRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& RawGetRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& RawGetRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetRequest.context)
  return _internal_context();
}
inline void RawGetRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.RawGetRequest.context)
}
inline ::kvrpcpb::Context* RawGetRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* RawGetRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* RawGetRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* RawGetRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetRequest.context)
  return _internal_mutable_context();
}
inline void RawGetRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetRequest.context)
}

// bytes key = 2;
inline void RawGetRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& RawGetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetRequest.key)
  return _internal_key();
}
inline void RawGetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawGetRequest.key)
}
inline std::string* RawGetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& RawGetRequest::_internal_key() const {
  return key_.Get();
}
inline void RawGetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawGetRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawGetRequest.key)
}
inline void RawGetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawGetRequest.key)
}
inline void RawGetRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawGetRequest.key)
}
inline std::string* RawGetRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawGetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetRequest.key)
}

// string cf = 3;
inline void RawGetRequest::clear_cf() {
  cf_.ClearToEmpty();
}
inline const std::string& RawGetRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetRequest.cf)
  return _internal_cf();
}
inline void RawGetRequest::set_cf(const std::string& value) {
  _internal_set_cf(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawGetRequest.cf)
}
inline std::string* RawGetRequest::mutable_cf() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetRequest.cf)
  return _internal_mutable_cf();
}
inline const std::string& RawGetRequest::_internal_cf() const {
  return cf_.Get();
}
inline void RawGetRequest::_internal_set_cf(const std::string& value) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawGetRequest::set_cf(std::string&& value) {
  
  cf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawGetRequest.cf)
}
inline void RawGetRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawGetRequest.cf)
}
inline void RawGetRequest::set_cf(const char* value,
    size_t size) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawGetRequest.cf)
}
inline std::string* RawGetRequest::_internal_mutable_cf() {
  
  return cf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawGetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetRequest.cf)
  return cf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawGetRequest::set_allocated_cf(std::string* cf) {
  if (cf != nullptr) {
    
  } else {
    
  }
  cf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetRequest.cf)
}

// -------------------------------------------------------------------

// RawGetResponse

// .errorpb.Error region_error = 1;
inline bool RawGetResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool RawGetResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& RawGetResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& RawGetResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetResponse.region_error)
  return _internal_region_error();
}
inline void RawGetResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.RawGetResponse.region_error)
}
inline ::errorpb::Error* RawGetResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* RawGetResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* RawGetResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* RawGetResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetResponse.region_error)
  return _internal_mutable_region_error();
}
inline void RawGetResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetResponse.region_error)
}

// string error = 2;
inline void RawGetResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& RawGetResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetResponse.error)
  return _internal_error();
}
inline void RawGetResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawGetResponse.error)
}
inline std::string* RawGetResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetResponse.error)
  return _internal_mutable_error();
}
inline const std::string& RawGetResponse::_internal_error() const {
  return error_.Get();
}
inline void RawGetResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawGetResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawGetResponse.error)
}
inline void RawGetResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawGetResponse.error)
}
inline void RawGetResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawGetResponse.error)
}
inline std::string* RawGetResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawGetResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawGetResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetResponse.error)
}

// bytes value = 3;
inline void RawGetResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& RawGetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetResponse.value)
  return _internal_value();
}
inline void RawGetResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawGetResponse.value)
}
inline std::string* RawGetResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetResponse.value)
  return _internal_mutable_value();
}
inline const std::string& RawGetResponse::_internal_value() const {
  return value_.Get();
}
inline void RawGetResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawGetResponse::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawGetResponse.value)
}
inline void RawGetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawGetResponse.value)
}
inline void RawGetResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawGetResponse.value)
}
inline std::string* RawGetResponse::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawGetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetResponse.value)
}

// bool not_found = 4;
inline void RawGetResponse::clear_not_found() {
  not_found_ = false;
}
inline bool RawGetResponse::_internal_not_found() const {
  return not_found_;
}
inline bool RawGetResponse::not_found() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetResponse.not_found)
  return _internal_not_found();
}
inline void RawGetResponse::_internal_set_not_found(bool value) {
  
  not_found_ = value;
}
inline void RawGetResponse::set_not_found(bool value) {
  _internal_set_not_found(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawGetResponse.not_found)
}

// -------------------------------------------------------------------

// RawPutRequest

// .kvrpcpb.Context context = 1;
inline bool RawPutRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool RawPutRequest::has_context() const {
  return _internal_has_context();
}
inline void RawPutRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& RawPutRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& RawPutRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.context)
  return _internal_context();
}
inline void RawPutRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.RawPutRequest.context)
}
inline ::kvrpcpb::Context* RawPutRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* RawPutRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* RawPutRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* RawPutRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutRequest.context)
  return _internal_mutable_context();
}
inline void RawPutRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutRequest.context)
}

// bytes key = 2;
inline void RawPutRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& RawPutRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.key)
  return _internal_key();
}
inline void RawPutRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutRequest.key)
}
inline std::string* RawPutRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutRequest.key)
  return _internal_mutable_key();
}
inline const std::string& RawPutRequest::_internal_key() const {
  return key_.Get();
}
inline void RawPutRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawPutRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawPutRequest.key)
}
inline void RawPutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawPutRequest.key)
}
inline void RawPutRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawPutRequest.key)
}
inline std::string* RawPutRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawPutRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawPutRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutRequest.key)
}

// bytes value = 3;
inline void RawPutRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& RawPutRequest::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.value)
  return _internal_value();
}
inline void RawPutRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutRequest.value)
}
inline std::string* RawPutRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutRequest.value)
  return _internal_mutable_value();
}
inline const std::string& RawPutRequest::_internal_value() const {
  return value_.Get();
}
inline void RawPutRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawPutRequest::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawPutRequest.value)
}
inline void RawPutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawPutRequest.value)
}
inline void RawPutRequest::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawPutRequest.value)
}
inline std::string* RawPutRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawPutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutRequest.value)
}

// string cf = 4;
inline void RawPutRequest::clear_cf() {
  cf_.ClearToEmpty();
}
inline const std::string& RawPutRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.cf)
  return _internal_cf();
}
inline void RawPutRequest::set_cf(const std::string& value) {
  _internal_set_cf(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutRequest.cf)
}
inline std::string* RawPutRequest::mutable_cf() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutRequest.cf)
  return _internal_mutable_cf();
}
inline const std::string& RawPutRequest::_internal_cf() const {
  return cf_.Get();
}
inline void RawPutRequest::_internal_set_cf(const std::string& value) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawPutRequest::set_cf(std::string&& value) {
  
  cf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawPutRequest.cf)
}
inline void RawPutRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawPutRequest.cf)
}
inline void RawPutRequest::set_cf(const char* value,
    size_t size) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawPutRequest.cf)
}
inline std::string* RawPutRequest::_internal_mutable_cf() {
  
  return cf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawPutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutRequest.cf)
  return cf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawPutRequest::set_allocated_cf(std::string* cf) {
  if (cf != nullptr) {
    
  } else {
    
  }
  cf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutRequest.cf)
}

// uint64 id = 5;
inline void RawPutRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawPutRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RawPutRequest::id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.id)
  return _internal_id();
}
inline void RawPutRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void RawPutRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutRequest.id)
}

// uint32 type = 6;
inline void RawPutRequest::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RawPutRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RawPutRequest::type() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.type)
  return _internal_type();
}
inline void RawPutRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void RawPutRequest::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutRequest.type)
}

// -------------------------------------------------------------------

// RawPutResponse

// .errorpb.Error region_error = 1;
inline bool RawPutResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool RawPutResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& RawPutResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& RawPutResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutResponse.region_error)
  return _internal_region_error();
}
inline void RawPutResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.RawPutResponse.region_error)
}
inline ::errorpb::Error* RawPutResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* RawPutResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* RawPutResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* RawPutResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutResponse.region_error)
  return _internal_mutable_region_error();
}
inline void RawPutResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutResponse.region_error)
}

// string error = 2;
inline void RawPutResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& RawPutResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutResponse.error)
  return _internal_error();
}
inline void RawPutResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutResponse.error)
}
inline std::string* RawPutResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutResponse.error)
  return _internal_mutable_error();
}
inline const std::string& RawPutResponse::_internal_error() const {
  return error_.Get();
}
inline void RawPutResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawPutResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawPutResponse.error)
}
inline void RawPutResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawPutResponse.error)
}
inline void RawPutResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawPutResponse.error)
}
inline std::string* RawPutResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawPutResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawPutResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutResponse.error)
}

// -------------------------------------------------------------------

// RawDeleteRequest

// .kvrpcpb.Context context = 1;
inline bool RawDeleteRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool RawDeleteRequest::has_context() const {
  return _internal_has_context();
}
inline void RawDeleteRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& RawDeleteRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& RawDeleteRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRequest.context)
  return _internal_context();
}
inline void RawDeleteRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.RawDeleteRequest.context)
}
inline ::kvrpcpb::Context* RawDeleteRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* RawDeleteRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* RawDeleteRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* RawDeleteRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRequest.context)
  return _internal_mutable_context();
}
inline void RawDeleteRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRequest.context)
}

// bytes key = 2;
inline void RawDeleteRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& RawDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRequest.key)
  return _internal_key();
}
inline void RawDeleteRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteRequest.key)
}
inline std::string* RawDeleteRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRequest.key)
  return _internal_mutable_key();
}
inline const std::string& RawDeleteRequest::_internal_key() const {
  return key_.Get();
}
inline void RawDeleteRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawDeleteRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawDeleteRequest.key)
}
inline void RawDeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteRequest.key)
}
inline void RawDeleteRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteRequest.key)
}
inline std::string* RawDeleteRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawDeleteRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRequest.key)
}

// string cf = 3;
inline void RawDeleteRequest::clear_cf() {
  cf_.ClearToEmpty();
}
inline const std::string& RawDeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRequest.cf)
  return _internal_cf();
}
inline void RawDeleteRequest::set_cf(const std::string& value) {
  _internal_set_cf(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteRequest.cf)
}
inline std::string* RawDeleteRequest::mutable_cf() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRequest.cf)
  return _internal_mutable_cf();
}
inline const std::string& RawDeleteRequest::_internal_cf() const {
  return cf_.Get();
}
inline void RawDeleteRequest::_internal_set_cf(const std::string& value) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawDeleteRequest::set_cf(std::string&& value) {
  
  cf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawDeleteRequest.cf)
}
inline void RawDeleteRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteRequest.cf)
}
inline void RawDeleteRequest::set_cf(const char* value,
    size_t size) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteRequest.cf)
}
inline std::string* RawDeleteRequest::_internal_mutable_cf() {
  
  return cf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawDeleteRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRequest.cf)
  return cf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawDeleteRequest::set_allocated_cf(std::string* cf) {
  if (cf != nullptr) {
    
  } else {
    
  }
  cf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRequest.cf)
}

// -------------------------------------------------------------------

// RawDeleteResponse

// .errorpb.Error region_error = 1;
inline bool RawDeleteResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool RawDeleteResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& RawDeleteResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& RawDeleteResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteResponse.region_error)
  return _internal_region_error();
}
inline void RawDeleteResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.RawDeleteResponse.region_error)
}
inline ::errorpb::Error* RawDeleteResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* RawDeleteResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* RawDeleteResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* RawDeleteResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteResponse.region_error)
  return _internal_mutable_region_error();
}
inline void RawDeleteResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteResponse.region_error)
}

// string error = 2;
inline void RawDeleteResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& RawDeleteResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteResponse.error)
  return _internal_error();
}
inline void RawDeleteResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteResponse.error)
}
inline std::string* RawDeleteResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteResponse.error)
  return _internal_mutable_error();
}
inline const std::string& RawDeleteResponse::_internal_error() const {
  return error_.Get();
}
inline void RawDeleteResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawDeleteResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawDeleteResponse.error)
}
inline void RawDeleteResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteResponse.error)
}
inline void RawDeleteResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteResponse.error)
}
inline std::string* RawDeleteResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawDeleteResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawDeleteResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteResponse.error)
}

// -------------------------------------------------------------------

// RawScanRequest

// .kvrpcpb.Context context = 1;
inline bool RawScanRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool RawScanRequest::has_context() const {
  return _internal_has_context();
}
inline void RawScanRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& RawScanRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& RawScanRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.context)
  return _internal_context();
}
inline void RawScanRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.RawScanRequest.context)
}
inline ::kvrpcpb::Context* RawScanRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* RawScanRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawScanRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* RawScanRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* RawScanRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanRequest.context)
  return _internal_mutable_context();
}
inline void RawScanRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawScanRequest.context)
}

// bytes start_key = 2;
inline void RawScanRequest::clear_start_key() {
  start_key_.ClearToEmpty();
}
inline const std::string& RawScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.start_key)
  return _internal_start_key();
}
inline void RawScanRequest::set_start_key(const std::string& value) {
  _internal_set_start_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawScanRequest.start_key)
}
inline std::string* RawScanRequest::mutable_start_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanRequest.start_key)
  return _internal_mutable_start_key();
}
inline const std::string& RawScanRequest::_internal_start_key() const {
  return start_key_.Get();
}
inline void RawScanRequest::_internal_set_start_key(const std::string& value) {
  
  start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawScanRequest::set_start_key(std::string&& value) {
  
  start_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawScanRequest.start_key)
}
inline void RawScanRequest::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawScanRequest.start_key)
}
inline void RawScanRequest::set_start_key(const void* value,
    size_t size) {
  
  start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawScanRequest.start_key)
}
inline std::string* RawScanRequest::_internal_mutable_start_key() {
  
  return start_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawScanRequest.start_key)
  return start_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawScanRequest::set_allocated_start_key(std::string* start_key) {
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawScanRequest.start_key)
}

// uint32 limit = 3;
inline void RawScanRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RawScanRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RawScanRequest::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.limit)
  return _internal_limit();
}
inline void RawScanRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void RawScanRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawScanRequest.limit)
}

// string cf = 4;
inline void RawScanRequest::clear_cf() {
  cf_.ClearToEmpty();
}
inline const std::string& RawScanRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.cf)
  return _internal_cf();
}
inline void RawScanRequest::set_cf(const std::string& value) {
  _internal_set_cf(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawScanRequest.cf)
}
inline std::string* RawScanRequest::mutable_cf() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanRequest.cf)
  return _internal_mutable_cf();
}
inline const std::string& RawScanRequest::_internal_cf() const {
  return cf_.Get();
}
inline void RawScanRequest::_internal_set_cf(const std::string& value) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawScanRequest::set_cf(std::string&& value) {
  
  cf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawScanRequest.cf)
}
inline void RawScanRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawScanRequest.cf)
}
inline void RawScanRequest::set_cf(const char* value,
    size_t size) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawScanRequest.cf)
}
inline std::string* RawScanRequest::_internal_mutable_cf() {
  
  return cf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawScanRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawScanRequest.cf)
  return cf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawScanRequest::set_allocated_cf(std::string* cf) {
  if (cf != nullptr) {
    
  } else {
    
  }
  cf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawScanRequest.cf)
}

// -------------------------------------------------------------------

// RawScanResponse

// .errorpb.Error region_error = 1;
inline bool RawScanResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool RawScanResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& RawScanResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& RawScanResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanResponse.region_error)
  return _internal_region_error();
}
inline void RawScanResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.RawScanResponse.region_error)
}
inline ::errorpb::Error* RawScanResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* RawScanResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawScanResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* RawScanResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* RawScanResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanResponse.region_error)
  return _internal_mutable_region_error();
}
inline void RawScanResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawScanResponse.region_error)
}

// string error = 2;
inline void RawScanResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& RawScanResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanResponse.error)
  return _internal_error();
}
inline void RawScanResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawScanResponse.error)
}
inline std::string* RawScanResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanResponse.error)
  return _internal_mutable_error();
}
inline const std::string& RawScanResponse::_internal_error() const {
  return error_.Get();
}
inline void RawScanResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RawScanResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.RawScanResponse.error)
}
inline void RawScanResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawScanResponse.error)
}
inline void RawScanResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawScanResponse.error)
}
inline std::string* RawScanResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RawScanResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawScanResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawScanResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawScanResponse.error)
}

// repeated .kvrpcpb.KvPair kvs = 3;
inline int RawScanResponse::_internal_kvs_size() const {
  return kvs_.size();
}
inline int RawScanResponse::kvs_size() const {
  return _internal_kvs_size();
}
inline void RawScanResponse::clear_kvs() {
  kvs_.Clear();
}
inline ::kvrpcpb::KvPair* RawScanResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanResponse.kvs)
  return kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair >*
RawScanResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.RawScanResponse.kvs)
  return &kvs_;
}
inline const ::kvrpcpb::KvPair& RawScanResponse::_internal_kvs(int index) const {
  return kvs_.Get(index);
}
inline const ::kvrpcpb::KvPair& RawScanResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanResponse.kvs)
  return _internal_kvs(index);
}
inline ::kvrpcpb::KvPair* RawScanResponse::_internal_add_kvs() {
  return kvs_.Add();
}
inline ::kvrpcpb::KvPair* RawScanResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.RawScanResponse.kvs)
  return _internal_add_kvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair >&
RawScanResponse::kvs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.RawScanResponse.kvs)
  return kvs_;
}

// -------------------------------------------------------------------

// GetRequest

// .kvrpcpb.Context context = 1;
inline bool GetRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool GetRequest::has_context() const {
  return _internal_has_context();
}
inline void GetRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& GetRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& GetRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetRequest.context)
  return _internal_context();
}
inline void GetRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.GetRequest.context)
}
inline ::kvrpcpb::Context* GetRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* GetRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* GetRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* GetRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetRequest.context)
  return _internal_mutable_context();
}
inline void GetRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetRequest.context)
}

// bytes key = 2;
inline void GetRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetRequest.key)
  return _internal_key();
}
inline void GetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.GetRequest.key)
}
inline std::string* GetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& GetRequest::_internal_key() const {
  return key_.Get();
}
inline void GetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.GetRequest.key)
}
inline void GetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.GetRequest.key)
}
inline void GetRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.GetRequest.key)
}
inline std::string* GetRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetRequest.key)
}

// uint64 version = 3;
inline void GetRequest::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetRequest::version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetRequest.version)
  return _internal_version();
}
inline void GetRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void GetRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.GetRequest.version)
}

// -------------------------------------------------------------------

// GetResponse

// .errorpb.Error region_error = 1;
inline bool GetResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool GetResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& GetResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& GetResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetResponse.region_error)
  return _internal_region_error();
}
inline void GetResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.GetResponse.region_error)
}
inline ::errorpb::Error* GetResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* GetResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* GetResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* GetResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetResponse.region_error)
  return _internal_mutable_region_error();
}
inline void GetResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetResponse.region_error)
}

// .kvrpcpb.KeyError error = 2;
inline bool GetResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetResponse::has_error() const {
  return _internal_has_error();
}
inline void GetResponse::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::kvrpcpb::KeyError& GetResponse::_internal_error() const {
  const ::kvrpcpb::KeyError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::KeyError&>(
      ::kvrpcpb::_KeyError_default_instance_);
}
inline const ::kvrpcpb::KeyError& GetResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetResponse.error)
  return _internal_error();
}
inline void GetResponse::unsafe_arena_set_allocated_error(
    ::kvrpcpb::KeyError* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.GetResponse.error)
}
inline ::kvrpcpb::KeyError* GetResponse::release_error() {
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::KeyError* GetResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::kvrpcpb::KeyError* GetResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::KeyError>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::kvrpcpb::KeyError* GetResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetResponse.error)
  return _internal_mutable_error();
}
inline void GetResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetResponse.error)
}

// bytes value = 3;
inline void GetResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetResponse.value)
  return _internal_value();
}
inline void GetResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.GetResponse.value)
}
inline std::string* GetResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetResponse.value)
  return _internal_mutable_value();
}
inline const std::string& GetResponse::_internal_value() const {
  return value_.Get();
}
inline void GetResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetResponse::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.GetResponse.value)
}
inline void GetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.GetResponse.value)
}
inline void GetResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.GetResponse.value)
}
inline std::string* GetResponse::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetResponse.value)
}

// bool not_found = 4;
inline void GetResponse::clear_not_found() {
  not_found_ = false;
}
inline bool GetResponse::_internal_not_found() const {
  return not_found_;
}
inline bool GetResponse::not_found() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetResponse.not_found)
  return _internal_not_found();
}
inline void GetResponse::_internal_set_not_found(bool value) {
  
  not_found_ = value;
}
inline void GetResponse::set_not_found(bool value) {
  _internal_set_not_found(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.GetResponse.not_found)
}

// -------------------------------------------------------------------

// PrewriteRequest

// .kvrpcpb.Context context = 1;
inline bool PrewriteRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool PrewriteRequest::has_context() const {
  return _internal_has_context();
}
inline void PrewriteRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& PrewriteRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& PrewriteRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.context)
  return _internal_context();
}
inline void PrewriteRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.PrewriteRequest.context)
}
inline ::kvrpcpb::Context* PrewriteRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* PrewriteRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.PrewriteRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* PrewriteRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* PrewriteRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteRequest.context)
  return _internal_mutable_context();
}
inline void PrewriteRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.PrewriteRequest.context)
}

// repeated .kvrpcpb.Mutation mutations = 2;
inline int PrewriteRequest::_internal_mutations_size() const {
  return mutations_.size();
}
inline int PrewriteRequest::mutations_size() const {
  return _internal_mutations_size();
}
inline void PrewriteRequest::clear_mutations() {
  mutations_.Clear();
}
inline ::kvrpcpb::Mutation* PrewriteRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteRequest.mutations)
  return mutations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::Mutation >*
PrewriteRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.PrewriteRequest.mutations)
  return &mutations_;
}
inline const ::kvrpcpb::Mutation& PrewriteRequest::_internal_mutations(int index) const {
  return mutations_.Get(index);
}
inline const ::kvrpcpb::Mutation& PrewriteRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.mutations)
  return _internal_mutations(index);
}
inline ::kvrpcpb::Mutation* PrewriteRequest::_internal_add_mutations() {
  return mutations_.Add();
}
inline ::kvrpcpb::Mutation* PrewriteRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:kvrpcpb.PrewriteRequest.mutations)
  return _internal_add_mutations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::Mutation >&
PrewriteRequest::mutations() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.PrewriteRequest.mutations)
  return mutations_;
}

// bytes primary_lock = 3;
inline void PrewriteRequest::clear_primary_lock() {
  primary_lock_.ClearToEmpty();
}
inline const std::string& PrewriteRequest::primary_lock() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.primary_lock)
  return _internal_primary_lock();
}
inline void PrewriteRequest::set_primary_lock(const std::string& value) {
  _internal_set_primary_lock(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.PrewriteRequest.primary_lock)
}
inline std::string* PrewriteRequest::mutable_primary_lock() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteRequest.primary_lock)
  return _internal_mutable_primary_lock();
}
inline const std::string& PrewriteRequest::_internal_primary_lock() const {
  return primary_lock_.Get();
}
inline void PrewriteRequest::_internal_set_primary_lock(const std::string& value) {
  
  primary_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrewriteRequest::set_primary_lock(std::string&& value) {
  
  primary_lock_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.PrewriteRequest.primary_lock)
}
inline void PrewriteRequest::set_primary_lock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.PrewriteRequest.primary_lock)
}
inline void PrewriteRequest::set_primary_lock(const void* value,
    size_t size) {
  
  primary_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.PrewriteRequest.primary_lock)
}
inline std::string* PrewriteRequest::_internal_mutable_primary_lock() {
  
  return primary_lock_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrewriteRequest::release_primary_lock() {
  // @@protoc_insertion_point(field_release:kvrpcpb.PrewriteRequest.primary_lock)
  return primary_lock_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrewriteRequest::set_allocated_primary_lock(std::string* primary_lock) {
  if (primary_lock != nullptr) {
    
  } else {
    
  }
  primary_lock_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_lock,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.PrewriteRequest.primary_lock)
}

// uint64 start_version = 4;
inline void PrewriteRequest::clear_start_version() {
  start_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrewriteRequest::_internal_start_version() const {
  return start_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrewriteRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.start_version)
  return _internal_start_version();
}
inline void PrewriteRequest::_internal_set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_version_ = value;
}
inline void PrewriteRequest::set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.PrewriteRequest.start_version)
}

// uint64 lock_ttl = 5;
inline void PrewriteRequest::clear_lock_ttl() {
  lock_ttl_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrewriteRequest::_internal_lock_ttl() const {
  return lock_ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrewriteRequest::lock_ttl() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.lock_ttl)
  return _internal_lock_ttl();
}
inline void PrewriteRequest::_internal_set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lock_ttl_ = value;
}
inline void PrewriteRequest::set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lock_ttl(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.PrewriteRequest.lock_ttl)
}

// -------------------------------------------------------------------

// PrewriteResponse

// .errorpb.Error region_error = 1;
inline bool PrewriteResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool PrewriteResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& PrewriteResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& PrewriteResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteResponse.region_error)
  return _internal_region_error();
}
inline void PrewriteResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.PrewriteResponse.region_error)
}
inline ::errorpb::Error* PrewriteResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* PrewriteResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.PrewriteResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* PrewriteResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* PrewriteResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteResponse.region_error)
  return _internal_mutable_region_error();
}
inline void PrewriteResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.PrewriteResponse.region_error)
}

// repeated .kvrpcpb.KeyError errors = 2;
inline int PrewriteResponse::_internal_errors_size() const {
  return errors_.size();
}
inline int PrewriteResponse::errors_size() const {
  return _internal_errors_size();
}
inline void PrewriteResponse::clear_errors() {
  errors_.Clear();
}
inline ::kvrpcpb::KeyError* PrewriteResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteResponse.errors)
  return errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KeyError >*
PrewriteResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.PrewriteResponse.errors)
  return &errors_;
}
inline const ::kvrpcpb::KeyError& PrewriteResponse::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const ::kvrpcpb::KeyError& PrewriteResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteResponse.errors)
  return _internal_errors(index);
}
inline ::kvrpcpb::KeyError* PrewriteResponse::_internal_add_errors() {
  return errors_.Add();
}
inline ::kvrpcpb::KeyError* PrewriteResponse::add_errors() {
  // @@protoc_insertion_point(field_add:kvrpcpb.PrewriteResponse.errors)
  return _internal_add_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KeyError >&
PrewriteResponse::errors() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.PrewriteResponse.errors)
  return errors_;
}

// -------------------------------------------------------------------

// CommitRequest

// .kvrpcpb.Context context = 1;
inline bool CommitRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool CommitRequest::has_context() const {
  return _internal_has_context();
}
inline void CommitRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& CommitRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& CommitRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitRequest.context)
  return _internal_context();
}
inline void CommitRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.CommitRequest.context)
}
inline ::kvrpcpb::Context* CommitRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* CommitRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CommitRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* CommitRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* CommitRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CommitRequest.context)
  return _internal_mutable_context();
}
inline void CommitRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CommitRequest.context)
}

// uint64 start_version = 2;
inline void CommitRequest::clear_start_version() {
  start_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitRequest::_internal_start_version() const {
  return start_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitRequest.start_version)
  return _internal_start_version();
}
inline void CommitRequest::_internal_set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_version_ = value;
}
inline void CommitRequest::set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CommitRequest.start_version)
}

// repeated bytes keys = 3;
inline int CommitRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int CommitRequest::keys_size() const {
  return _internal_keys_size();
}
inline void CommitRequest::clear_keys() {
  keys_.Clear();
}
inline std::string* CommitRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.CommitRequest.keys)
  return _internal_add_keys();
}
inline const std::string& CommitRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& CommitRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitRequest.keys)
  return _internal_keys(index);
}
inline std::string* CommitRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CommitRequest.keys)
  return keys_.Mutable(index);
}
inline void CommitRequest::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.CommitRequest.keys)
  keys_.Mutable(index)->assign(value);
}
inline void CommitRequest::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.CommitRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void CommitRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CommitRequest.keys)
}
inline void CommitRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CommitRequest.keys)
}
inline std::string* CommitRequest::_internal_add_keys() {
  return keys_.Add();
}
inline void CommitRequest::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.CommitRequest.keys)
}
inline void CommitRequest::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kvrpcpb.CommitRequest.keys)
}
inline void CommitRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.CommitRequest.keys)
}
inline void CommitRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.CommitRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommitRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CommitRequest.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommitRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CommitRequest.keys)
  return &keys_;
}

// uint64 commit_version = 4;
inline void CommitRequest::clear_commit_version() {
  commit_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitRequest::_internal_commit_version() const {
  return commit_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommitRequest::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitRequest.commit_version)
  return _internal_commit_version();
}
inline void CommitRequest::_internal_set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_version_ = value;
}
inline void CommitRequest::set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CommitRequest.commit_version)
}

// -------------------------------------------------------------------

// CommitResponse

// .errorpb.Error region_error = 1;
inline bool CommitResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool CommitResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& CommitResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& CommitResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitResponse.region_error)
  return _internal_region_error();
}
inline void CommitResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.CommitResponse.region_error)
}
inline ::errorpb::Error* CommitResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* CommitResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CommitResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* CommitResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* CommitResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CommitResponse.region_error)
  return _internal_mutable_region_error();
}
inline void CommitResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CommitResponse.region_error)
}

// .kvrpcpb.KeyError error = 2;
inline bool CommitResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool CommitResponse::has_error() const {
  return _internal_has_error();
}
inline void CommitResponse::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::kvrpcpb::KeyError& CommitResponse::_internal_error() const {
  const ::kvrpcpb::KeyError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::KeyError&>(
      ::kvrpcpb::_KeyError_default_instance_);
}
inline const ::kvrpcpb::KeyError& CommitResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitResponse.error)
  return _internal_error();
}
inline void CommitResponse::unsafe_arena_set_allocated_error(
    ::kvrpcpb::KeyError* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.CommitResponse.error)
}
inline ::kvrpcpb::KeyError* CommitResponse::release_error() {
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::KeyError* CommitResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CommitResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::kvrpcpb::KeyError* CommitResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::KeyError>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::kvrpcpb::KeyError* CommitResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CommitResponse.error)
  return _internal_mutable_error();
}
inline void CommitResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CommitResponse.error)
}

// -------------------------------------------------------------------

// ScanRequest

// .kvrpcpb.Context context = 1;
inline bool ScanRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool ScanRequest::has_context() const {
  return _internal_has_context();
}
inline void ScanRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& ScanRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& ScanRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.context)
  return _internal_context();
}
inline void ScanRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.ScanRequest.context)
}
inline ::kvrpcpb::Context* ScanRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* ScanRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* ScanRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* ScanRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanRequest.context)
  return _internal_mutable_context();
}
inline void ScanRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanRequest.context)
}

// bytes start_key = 2;
inline void ScanRequest::clear_start_key() {
  start_key_.ClearToEmpty();
}
inline const std::string& ScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.start_key)
  return _internal_start_key();
}
inline void ScanRequest::set_start_key(const std::string& value) {
  _internal_set_start_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanRequest.start_key)
}
inline std::string* ScanRequest::mutable_start_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanRequest.start_key)
  return _internal_mutable_start_key();
}
inline const std::string& ScanRequest::_internal_start_key() const {
  return start_key_.Get();
}
inline void ScanRequest::_internal_set_start_key(const std::string& value) {
  
  start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScanRequest::set_start_key(std::string&& value) {
  
  start_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.ScanRequest.start_key)
}
inline void ScanRequest::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.ScanRequest.start_key)
}
inline void ScanRequest::set_start_key(const void* value,
    size_t size) {
  
  start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.ScanRequest.start_key)
}
inline std::string* ScanRequest::_internal_mutable_start_key() {
  
  return start_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanRequest.start_key)
  return start_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanRequest::set_allocated_start_key(std::string* start_key) {
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanRequest.start_key)
}

// uint32 limit = 3;
inline void ScanRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScanRequest::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.limit)
  return _internal_limit();
}
inline void ScanRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void ScanRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanRequest.limit)
}

// uint64 version = 4;
inline void ScanRequest::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScanRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScanRequest::version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.version)
  return _internal_version();
}
inline void ScanRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void ScanRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanRequest.version)
}

// -------------------------------------------------------------------

// ScanResponse

// .errorpb.Error region_error = 1;
inline bool ScanResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool ScanResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& ScanResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& ScanResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanResponse.region_error)
  return _internal_region_error();
}
inline void ScanResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.ScanResponse.region_error)
}
inline ::errorpb::Error* ScanResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* ScanResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* ScanResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* ScanResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanResponse.region_error)
  return _internal_mutable_region_error();
}
inline void ScanResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanResponse.region_error)
}

// repeated .kvrpcpb.KvPair pairs = 2;
inline int ScanResponse::_internal_pairs_size() const {
  return pairs_.size();
}
inline int ScanResponse::pairs_size() const {
  return _internal_pairs_size();
}
inline void ScanResponse::clear_pairs() {
  pairs_.Clear();
}
inline ::kvrpcpb::KvPair* ScanResponse::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanResponse.pairs)
  return pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair >*
ScanResponse::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.ScanResponse.pairs)
  return &pairs_;
}
inline const ::kvrpcpb::KvPair& ScanResponse::_internal_pairs(int index) const {
  return pairs_.Get(index);
}
inline const ::kvrpcpb::KvPair& ScanResponse::pairs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanResponse.pairs)
  return _internal_pairs(index);
}
inline ::kvrpcpb::KvPair* ScanResponse::_internal_add_pairs() {
  return pairs_.Add();
}
inline ::kvrpcpb::KvPair* ScanResponse::add_pairs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.ScanResponse.pairs)
  return _internal_add_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kvrpcpb::KvPair >&
ScanResponse::pairs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.ScanResponse.pairs)
  return pairs_;
}

// -------------------------------------------------------------------

// BatchRollbackRequest

// .kvrpcpb.Context context = 1;
inline bool BatchRollbackRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool BatchRollbackRequest::has_context() const {
  return _internal_has_context();
}
inline void BatchRollbackRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& BatchRollbackRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& BatchRollbackRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackRequest.context)
  return _internal_context();
}
inline void BatchRollbackRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.BatchRollbackRequest.context)
}
inline ::kvrpcpb::Context* BatchRollbackRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* BatchRollbackRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.BatchRollbackRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* BatchRollbackRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* BatchRollbackRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchRollbackRequest.context)
  return _internal_mutable_context();
}
inline void BatchRollbackRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.BatchRollbackRequest.context)
}

// uint64 start_version = 2;
inline void BatchRollbackRequest::clear_start_version() {
  start_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchRollbackRequest::_internal_start_version() const {
  return start_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BatchRollbackRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackRequest.start_version)
  return _internal_start_version();
}
inline void BatchRollbackRequest::_internal_set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_version_ = value;
}
inline void BatchRollbackRequest::set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.BatchRollbackRequest.start_version)
}

// repeated bytes keys = 3;
inline int BatchRollbackRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int BatchRollbackRequest::keys_size() const {
  return _internal_keys_size();
}
inline void BatchRollbackRequest::clear_keys() {
  keys_.Clear();
}
inline std::string* BatchRollbackRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.BatchRollbackRequest.keys)
  return _internal_add_keys();
}
inline const std::string& BatchRollbackRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& BatchRollbackRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackRequest.keys)
  return _internal_keys(index);
}
inline std::string* BatchRollbackRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchRollbackRequest.keys)
  return keys_.Mutable(index);
}
inline void BatchRollbackRequest::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.BatchRollbackRequest.keys)
  keys_.Mutable(index)->assign(value);
}
inline void BatchRollbackRequest::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.BatchRollbackRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void BatchRollbackRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.BatchRollbackRequest.keys)
}
inline void BatchRollbackRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.BatchRollbackRequest.keys)
}
inline std::string* BatchRollbackRequest::_internal_add_keys() {
  return keys_.Add();
}
inline void BatchRollbackRequest::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.BatchRollbackRequest.keys)
}
inline void BatchRollbackRequest::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kvrpcpb.BatchRollbackRequest.keys)
}
inline void BatchRollbackRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.BatchRollbackRequest.keys)
}
inline void BatchRollbackRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.BatchRollbackRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatchRollbackRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.BatchRollbackRequest.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatchRollbackRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.BatchRollbackRequest.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// BatchRollbackResponse

// .errorpb.Error region_error = 1;
inline bool BatchRollbackResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool BatchRollbackResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& BatchRollbackResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& BatchRollbackResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackResponse.region_error)
  return _internal_region_error();
}
inline void BatchRollbackResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.BatchRollbackResponse.region_error)
}
inline ::errorpb::Error* BatchRollbackResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* BatchRollbackResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.BatchRollbackResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* BatchRollbackResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* BatchRollbackResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchRollbackResponse.region_error)
  return _internal_mutable_region_error();
}
inline void BatchRollbackResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.BatchRollbackResponse.region_error)
}

// .kvrpcpb.KeyError error = 2;
inline bool BatchRollbackResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool BatchRollbackResponse::has_error() const {
  return _internal_has_error();
}
inline void BatchRollbackResponse::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::kvrpcpb::KeyError& BatchRollbackResponse::_internal_error() const {
  const ::kvrpcpb::KeyError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::KeyError&>(
      ::kvrpcpb::_KeyError_default_instance_);
}
inline const ::kvrpcpb::KeyError& BatchRollbackResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackResponse.error)
  return _internal_error();
}
inline void BatchRollbackResponse::unsafe_arena_set_allocated_error(
    ::kvrpcpb::KeyError* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.BatchRollbackResponse.error)
}
inline ::kvrpcpb::KeyError* BatchRollbackResponse::release_error() {
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::KeyError* BatchRollbackResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.BatchRollbackResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::kvrpcpb::KeyError* BatchRollbackResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::KeyError>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::kvrpcpb::KeyError* BatchRollbackResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchRollbackResponse.error)
  return _internal_mutable_error();
}
inline void BatchRollbackResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.BatchRollbackResponse.error)
}

// -------------------------------------------------------------------

// CheckTxnStatusRequest

// .kvrpcpb.Context context = 1;
inline bool CheckTxnStatusRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool CheckTxnStatusRequest::has_context() const {
  return _internal_has_context();
}
inline void CheckTxnStatusRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& CheckTxnStatusRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& CheckTxnStatusRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CheckTxnStatusRequest.context)
  return _internal_context();
}
inline void CheckTxnStatusRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.CheckTxnStatusRequest.context)
}
inline ::kvrpcpb::Context* CheckTxnStatusRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* CheckTxnStatusRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CheckTxnStatusRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* CheckTxnStatusRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* CheckTxnStatusRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CheckTxnStatusRequest.context)
  return _internal_mutable_context();
}
inline void CheckTxnStatusRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CheckTxnStatusRequest.context)
}

// bytes primary_key = 2;
inline void CheckTxnStatusRequest::clear_primary_key() {
  primary_key_.ClearToEmpty();
}
inline const std::string& CheckTxnStatusRequest::primary_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CheckTxnStatusRequest.primary_key)
  return _internal_primary_key();
}
inline void CheckTxnStatusRequest::set_primary_key(const std::string& value) {
  _internal_set_primary_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CheckTxnStatusRequest.primary_key)
}
inline std::string* CheckTxnStatusRequest::mutable_primary_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CheckTxnStatusRequest.primary_key)
  return _internal_mutable_primary_key();
}
inline const std::string& CheckTxnStatusRequest::_internal_primary_key() const {
  return primary_key_.Get();
}
inline void CheckTxnStatusRequest::_internal_set_primary_key(const std::string& value) {
  
  primary_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckTxnStatusRequest::set_primary_key(std::string&& value) {
  
  primary_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.CheckTxnStatusRequest.primary_key)
}
inline void CheckTxnStatusRequest::set_primary_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CheckTxnStatusRequest.primary_key)
}
inline void CheckTxnStatusRequest::set_primary_key(const void* value,
    size_t size) {
  
  primary_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CheckTxnStatusRequest.primary_key)
}
inline std::string* CheckTxnStatusRequest::_internal_mutable_primary_key() {
  
  return primary_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckTxnStatusRequest::release_primary_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CheckTxnStatusRequest.primary_key)
  return primary_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckTxnStatusRequest::set_allocated_primary_key(std::string* primary_key) {
  if (primary_key != nullptr) {
    
  } else {
    
  }
  primary_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CheckTxnStatusRequest.primary_key)
}

// uint64 lock_ts = 3;
inline void CheckTxnStatusRequest::clear_lock_ts() {
  lock_ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckTxnStatusRequest::_internal_lock_ts() const {
  return lock_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckTxnStatusRequest::lock_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CheckTxnStatusRequest.lock_ts)
  return _internal_lock_ts();
}
inline void CheckTxnStatusRequest::_internal_set_lock_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lock_ts_ = value;
}
inline void CheckTxnStatusRequest::set_lock_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lock_ts(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CheckTxnStatusRequest.lock_ts)
}

// uint64 current_ts = 4;
inline void CheckTxnStatusRequest::clear_current_ts() {
  current_ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckTxnStatusRequest::_internal_current_ts() const {
  return current_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckTxnStatusRequest::current_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CheckTxnStatusRequest.current_ts)
  return _internal_current_ts();
}
inline void CheckTxnStatusRequest::_internal_set_current_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_ts_ = value;
}
inline void CheckTxnStatusRequest::set_current_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_ts(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CheckTxnStatusRequest.current_ts)
}

// -------------------------------------------------------------------

// CheckTxnStatusResponse

// .errorpb.Error region_error = 1;
inline bool CheckTxnStatusResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool CheckTxnStatusResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& CheckTxnStatusResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& CheckTxnStatusResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CheckTxnStatusResponse.region_error)
  return _internal_region_error();
}
inline void CheckTxnStatusResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.CheckTxnStatusResponse.region_error)
}
inline ::errorpb::Error* CheckTxnStatusResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* CheckTxnStatusResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CheckTxnStatusResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* CheckTxnStatusResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* CheckTxnStatusResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CheckTxnStatusResponse.region_error)
  return _internal_mutable_region_error();
}
inline void CheckTxnStatusResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CheckTxnStatusResponse.region_error)
}

// uint64 lock_ttl = 2;
inline void CheckTxnStatusResponse::clear_lock_ttl() {
  lock_ttl_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckTxnStatusResponse::_internal_lock_ttl() const {
  return lock_ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckTxnStatusResponse::lock_ttl() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CheckTxnStatusResponse.lock_ttl)
  return _internal_lock_ttl();
}
inline void CheckTxnStatusResponse::_internal_set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lock_ttl_ = value;
}
inline void CheckTxnStatusResponse::set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lock_ttl(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CheckTxnStatusResponse.lock_ttl)
}

// uint64 commit_version = 3;
inline void CheckTxnStatusResponse::clear_commit_version() {
  commit_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckTxnStatusResponse::_internal_commit_version() const {
  return commit_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckTxnStatusResponse::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CheckTxnStatusResponse.commit_version)
  return _internal_commit_version();
}
inline void CheckTxnStatusResponse::_internal_set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_version_ = value;
}
inline void CheckTxnStatusResponse::set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CheckTxnStatusResponse.commit_version)
}

// .kvrpcpb.Action action = 4;
inline void CheckTxnStatusResponse::clear_action() {
  action_ = 0;
}
inline ::kvrpcpb::Action CheckTxnStatusResponse::_internal_action() const {
  return static_cast< ::kvrpcpb::Action >(action_);
}
inline ::kvrpcpb::Action CheckTxnStatusResponse::action() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CheckTxnStatusResponse.action)
  return _internal_action();
}
inline void CheckTxnStatusResponse::_internal_set_action(::kvrpcpb::Action value) {
  
  action_ = value;
}
inline void CheckTxnStatusResponse::set_action(::kvrpcpb::Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CheckTxnStatusResponse.action)
}

// -------------------------------------------------------------------

// ResolveLockRequest

// .kvrpcpb.Context context = 1;
inline bool ResolveLockRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool ResolveLockRequest::has_context() const {
  return _internal_has_context();
}
inline void ResolveLockRequest::clear_context() {
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
inline const ::kvrpcpb::Context& ResolveLockRequest::_internal_context() const {
  const ::kvrpcpb::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::Context&>(
      ::kvrpcpb::_Context_default_instance_);
}
inline const ::kvrpcpb::Context& ResolveLockRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockRequest.context)
  return _internal_context();
}
inline void ResolveLockRequest::unsafe_arena_set_allocated_context(
    ::kvrpcpb::Context* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.ResolveLockRequest.context)
}
inline ::kvrpcpb::Context* ResolveLockRequest::release_context() {
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::Context* ResolveLockRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ResolveLockRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::kvrpcpb::Context* ResolveLockRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::Context>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::kvrpcpb::Context* ResolveLockRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResolveLockRequest.context)
  return _internal_mutable_context();
}
inline void ResolveLockRequest::set_allocated_context(::kvrpcpb::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ResolveLockRequest.context)
}

// uint64 start_version = 2;
inline void ResolveLockRequest::clear_start_version() {
  start_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResolveLockRequest::_internal_start_version() const {
  return start_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResolveLockRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockRequest.start_version)
  return _internal_start_version();
}
inline void ResolveLockRequest::_internal_set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_version_ = value;
}
inline void ResolveLockRequest::set_start_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.ResolveLockRequest.start_version)
}

// uint64 commit_version = 3;
inline void ResolveLockRequest::clear_commit_version() {
  commit_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResolveLockRequest::_internal_commit_version() const {
  return commit_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResolveLockRequest::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockRequest.commit_version)
  return _internal_commit_version();
}
inline void ResolveLockRequest::_internal_set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_version_ = value;
}
inline void ResolveLockRequest::set_commit_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.ResolveLockRequest.commit_version)
}

// -------------------------------------------------------------------

// ResolveLockResponse

// .errorpb.Error region_error = 1;
inline bool ResolveLockResponse::_internal_has_region_error() const {
  return this != internal_default_instance() && region_error_ != nullptr;
}
inline bool ResolveLockResponse::has_region_error() const {
  return _internal_has_region_error();
}
inline const ::errorpb::Error& ResolveLockResponse::_internal_region_error() const {
  const ::errorpb::Error* p = region_error_;
  return p != nullptr ? *p : reinterpret_cast<const ::errorpb::Error&>(
      ::errorpb::_Error_default_instance_);
}
inline const ::errorpb::Error& ResolveLockResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockResponse.region_error)
  return _internal_region_error();
}
inline void ResolveLockResponse::unsafe_arena_set_allocated_region_error(
    ::errorpb::Error* region_error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.ResolveLockResponse.region_error)
}
inline ::errorpb::Error* ResolveLockResponse::release_region_error() {
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::errorpb::Error* ResolveLockResponse::unsafe_arena_release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ResolveLockResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = nullptr;
  return temp;
}
inline ::errorpb::Error* ResolveLockResponse::_internal_mutable_region_error() {
  
  if (region_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArena());
    region_error_ = p;
  }
  return region_error_;
}
inline ::errorpb::Error* ResolveLockResponse::mutable_region_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResolveLockResponse.region_error)
  return _internal_mutable_region_error();
}
inline void ResolveLockResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error_);
  }
  if (region_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_error)->GetArena();
    if (message_arena != submessage_arena) {
      region_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_error, submessage_arena);
    }
    
  } else {
    
  }
  region_error_ = region_error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ResolveLockResponse.region_error)
}

// .kvrpcpb.KeyError error = 2;
inline bool ResolveLockResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool ResolveLockResponse::has_error() const {
  return _internal_has_error();
}
inline void ResolveLockResponse::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::kvrpcpb::KeyError& ResolveLockResponse::_internal_error() const {
  const ::kvrpcpb::KeyError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::KeyError&>(
      ::kvrpcpb::_KeyError_default_instance_);
}
inline const ::kvrpcpb::KeyError& ResolveLockResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockResponse.error)
  return _internal_error();
}
inline void ResolveLockResponse::unsafe_arena_set_allocated_error(
    ::kvrpcpb::KeyError* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.ResolveLockResponse.error)
}
inline ::kvrpcpb::KeyError* ResolveLockResponse::release_error() {
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::KeyError* ResolveLockResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ResolveLockResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::kvrpcpb::KeyError* ResolveLockResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::KeyError>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::kvrpcpb::KeyError* ResolveLockResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResolveLockResponse.error)
  return _internal_mutable_error();
}
inline void ResolveLockResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ResolveLockResponse.error)
}

// -------------------------------------------------------------------

// KvPair

// .kvrpcpb.KeyError error = 1;
inline bool KvPair::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool KvPair::has_error() const {
  return _internal_has_error();
}
inline void KvPair::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::kvrpcpb::KeyError& KvPair::_internal_error() const {
  const ::kvrpcpb::KeyError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::KeyError&>(
      ::kvrpcpb::_KeyError_default_instance_);
}
inline const ::kvrpcpb::KeyError& KvPair::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.error)
  return _internal_error();
}
inline void KvPair::unsafe_arena_set_allocated_error(
    ::kvrpcpb::KeyError* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.KvPair.error)
}
inline ::kvrpcpb::KeyError* KvPair::release_error() {
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::KeyError* KvPair::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::kvrpcpb::KeyError* KvPair::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::KeyError>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::kvrpcpb::KeyError* KvPair::mutable_error() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.error)
  return _internal_mutable_error();
}
inline void KvPair::set_allocated_error(::kvrpcpb::KeyError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.error)
}

// bytes key = 2;
inline void KvPair::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KvPair::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.key)
  return _internal_key();
}
inline void KvPair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvPair.key)
}
inline std::string* KvPair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.key)
  return _internal_mutable_key();
}
inline const std::string& KvPair::_internal_key() const {
  return key_.Get();
}
inline void KvPair::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KvPair::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvPair.key)
}
inline void KvPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvPair.key)
}
inline void KvPair::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvPair.key)
}
inline std::string* KvPair::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KvPair::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KvPair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.key)
}

// bytes value = 3;
inline void KvPair::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KvPair::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.value)
  return _internal_value();
}
inline void KvPair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvPair.value)
}
inline std::string* KvPair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.value)
  return _internal_mutable_value();
}
inline const std::string& KvPair::_internal_value() const {
  return value_.Get();
}
inline void KvPair::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KvPair::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KvPair.value)
}
inline void KvPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvPair.value)
}
inline void KvPair::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvPair.value)
}
inline std::string* KvPair::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KvPair::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KvPair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.value)
}

// -------------------------------------------------------------------

// Mutation

// .kvrpcpb.Op op = 1;
inline void Mutation::clear_op() {
  op_ = 0;
}
inline ::kvrpcpb::Op Mutation::_internal_op() const {
  return static_cast< ::kvrpcpb::Op >(op_);
}
inline ::kvrpcpb::Op Mutation::op() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Mutation.op)
  return _internal_op();
}
inline void Mutation::_internal_set_op(::kvrpcpb::Op value) {
  
  op_ = value;
}
inline void Mutation::set_op(::kvrpcpb::Op value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Mutation.op)
}

// bytes key = 2;
inline void Mutation::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Mutation::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Mutation.key)
  return _internal_key();
}
inline void Mutation::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Mutation.key)
}
inline std::string* Mutation::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Mutation.key)
  return _internal_mutable_key();
}
inline const std::string& Mutation::_internal_key() const {
  return key_.Get();
}
inline void Mutation::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.Mutation.key)
}
inline void Mutation::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Mutation.key)
}
inline void Mutation::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Mutation.key)
}
inline std::string* Mutation::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Mutation.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Mutation.key)
}

// bytes value = 3;
inline void Mutation::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Mutation::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Mutation.value)
  return _internal_value();
}
inline void Mutation::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Mutation.value)
}
inline std::string* Mutation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Mutation.value)
  return _internal_mutable_value();
}
inline const std::string& Mutation::_internal_value() const {
  return value_.Get();
}
inline void Mutation::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Mutation::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.Mutation.value)
}
inline void Mutation::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Mutation.value)
}
inline void Mutation::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Mutation.value)
}
inline std::string* Mutation::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Mutation::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Mutation.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mutation::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Mutation.value)
}

// -------------------------------------------------------------------

// KeyError

// .kvrpcpb.LockInfo locked = 1;
inline bool KeyError::_internal_has_locked() const {
  return this != internal_default_instance() && locked_ != nullptr;
}
inline bool KeyError::has_locked() const {
  return _internal_has_locked();
}
inline void KeyError::clear_locked() {
  if (GetArena() == nullptr && locked_ != nullptr) {
    delete locked_;
  }
  locked_ = nullptr;
}
inline const ::kvrpcpb::LockInfo& KeyError::_internal_locked() const {
  const ::kvrpcpb::LockInfo* p = locked_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::LockInfo&>(
      ::kvrpcpb::_LockInfo_default_instance_);
}
inline const ::kvrpcpb::LockInfo& KeyError::locked() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.locked)
  return _internal_locked();
}
inline void KeyError::unsafe_arena_set_allocated_locked(
    ::kvrpcpb::LockInfo* locked) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locked_);
  }
  locked_ = locked;
  if (locked) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.KeyError.locked)
}
inline ::kvrpcpb::LockInfo* KeyError::release_locked() {
  
  ::kvrpcpb::LockInfo* temp = locked_;
  locked_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::LockInfo* KeyError::unsafe_arena_release_locked() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.locked)
  
  ::kvrpcpb::LockInfo* temp = locked_;
  locked_ = nullptr;
  return temp;
}
inline ::kvrpcpb::LockInfo* KeyError::_internal_mutable_locked() {
  
  if (locked_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::LockInfo>(GetArena());
    locked_ = p;
  }
  return locked_;
}
inline ::kvrpcpb::LockInfo* KeyError::mutable_locked() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.locked)
  return _internal_mutable_locked();
}
inline void KeyError::set_allocated_locked(::kvrpcpb::LockInfo* locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete locked_;
  }
  if (locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(locked);
    if (message_arena != submessage_arena) {
      locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locked, submessage_arena);
    }
    
  } else {
    
  }
  locked_ = locked;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.locked)
}

// string retryable = 2;
inline void KeyError::clear_retryable() {
  retryable_.ClearToEmpty();
}
inline const std::string& KeyError::retryable() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.retryable)
  return _internal_retryable();
}
inline void KeyError::set_retryable(const std::string& value) {
  _internal_set_retryable(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyError.retryable)
}
inline std::string* KeyError::mutable_retryable() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.retryable)
  return _internal_mutable_retryable();
}
inline const std::string& KeyError::_internal_retryable() const {
  return retryable_.Get();
}
inline void KeyError::_internal_set_retryable(const std::string& value) {
  
  retryable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyError::set_retryable(std::string&& value) {
  
  retryable_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KeyError.retryable)
}
inline void KeyError::set_retryable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  retryable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyError.retryable)
}
inline void KeyError::set_retryable(const char* value,
    size_t size) {
  
  retryable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyError.retryable)
}
inline std::string* KeyError::_internal_mutable_retryable() {
  
  return retryable_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyError::release_retryable() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.retryable)
  return retryable_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyError::set_allocated_retryable(std::string* retryable) {
  if (retryable != nullptr) {
    
  } else {
    
  }
  retryable_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), retryable,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.retryable)
}

// string abort = 3;
inline void KeyError::clear_abort() {
  abort_.ClearToEmpty();
}
inline const std::string& KeyError::abort() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.abort)
  return _internal_abort();
}
inline void KeyError::set_abort(const std::string& value) {
  _internal_set_abort(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyError.abort)
}
inline std::string* KeyError::mutable_abort() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.abort)
  return _internal_mutable_abort();
}
inline const std::string& KeyError::_internal_abort() const {
  return abort_.Get();
}
inline void KeyError::_internal_set_abort(const std::string& value) {
  
  abort_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyError::set_abort(std::string&& value) {
  
  abort_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.KeyError.abort)
}
inline void KeyError::set_abort(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  abort_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyError.abort)
}
inline void KeyError::set_abort(const char* value,
    size_t size) {
  
  abort_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyError.abort)
}
inline std::string* KeyError::_internal_mutable_abort() {
  
  return abort_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyError::release_abort() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.abort)
  return abort_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyError::set_allocated_abort(std::string* abort) {
  if (abort != nullptr) {
    
  } else {
    
  }
  abort_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), abort,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.abort)
}

// .kvrpcpb.WriteConflict conflict = 4;
inline bool KeyError::_internal_has_conflict() const {
  return this != internal_default_instance() && conflict_ != nullptr;
}
inline bool KeyError::has_conflict() const {
  return _internal_has_conflict();
}
inline void KeyError::clear_conflict() {
  if (GetArena() == nullptr && conflict_ != nullptr) {
    delete conflict_;
  }
  conflict_ = nullptr;
}
inline const ::kvrpcpb::WriteConflict& KeyError::_internal_conflict() const {
  const ::kvrpcpb::WriteConflict* p = conflict_;
  return p != nullptr ? *p : reinterpret_cast<const ::kvrpcpb::WriteConflict&>(
      ::kvrpcpb::_WriteConflict_default_instance_);
}
inline const ::kvrpcpb::WriteConflict& KeyError::conflict() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.conflict)
  return _internal_conflict();
}
inline void KeyError::unsafe_arena_set_allocated_conflict(
    ::kvrpcpb::WriteConflict* conflict) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conflict_);
  }
  conflict_ = conflict;
  if (conflict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.KeyError.conflict)
}
inline ::kvrpcpb::WriteConflict* KeyError::release_conflict() {
  
  ::kvrpcpb::WriteConflict* temp = conflict_;
  conflict_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kvrpcpb::WriteConflict* KeyError::unsafe_arena_release_conflict() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.conflict)
  
  ::kvrpcpb::WriteConflict* temp = conflict_;
  conflict_ = nullptr;
  return temp;
}
inline ::kvrpcpb::WriteConflict* KeyError::_internal_mutable_conflict() {
  
  if (conflict_ == nullptr) {
    auto* p = CreateMaybeMessage<::kvrpcpb::WriteConflict>(GetArena());
    conflict_ = p;
  }
  return conflict_;
}
inline ::kvrpcpb::WriteConflict* KeyError::mutable_conflict() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.conflict)
  return _internal_mutable_conflict();
}
inline void KeyError::set_allocated_conflict(::kvrpcpb::WriteConflict* conflict) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conflict_;
  }
  if (conflict) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conflict);
    if (message_arena != submessage_arena) {
      conflict = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conflict, submessage_arena);
    }
    
  } else {
    
  }
  conflict_ = conflict;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.conflict)
}

// -------------------------------------------------------------------

// LockInfo

// bytes primary_lock = 1;
inline void LockInfo::clear_primary_lock() {
  primary_lock_.ClearToEmpty();
}
inline const std::string& LockInfo::primary_lock() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.primary_lock)
  return _internal_primary_lock();
}
inline void LockInfo::set_primary_lock(const std::string& value) {
  _internal_set_primary_lock(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.primary_lock)
}
inline std::string* LockInfo::mutable_primary_lock() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockInfo.primary_lock)
  return _internal_mutable_primary_lock();
}
inline const std::string& LockInfo::_internal_primary_lock() const {
  return primary_lock_.Get();
}
inline void LockInfo::_internal_set_primary_lock(const std::string& value) {
  
  primary_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LockInfo::set_primary_lock(std::string&& value) {
  
  primary_lock_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockInfo.primary_lock)
}
inline void LockInfo::set_primary_lock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockInfo.primary_lock)
}
inline void LockInfo::set_primary_lock(const void* value,
    size_t size) {
  
  primary_lock_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockInfo.primary_lock)
}
inline std::string* LockInfo::_internal_mutable_primary_lock() {
  
  return primary_lock_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LockInfo::release_primary_lock() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockInfo.primary_lock)
  return primary_lock_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LockInfo::set_allocated_primary_lock(std::string* primary_lock) {
  if (primary_lock != nullptr) {
    
  } else {
    
  }
  primary_lock_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_lock,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockInfo.primary_lock)
}

// uint64 lock_version = 2;
inline void LockInfo::clear_lock_version() {
  lock_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockInfo::_internal_lock_version() const {
  return lock_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockInfo::lock_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.lock_version)
  return _internal_lock_version();
}
inline void LockInfo::_internal_set_lock_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lock_version_ = value;
}
inline void LockInfo::set_lock_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lock_version(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.lock_version)
}

// bytes key = 3;
inline void LockInfo::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& LockInfo::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.key)
  return _internal_key();
}
inline void LockInfo::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.key)
}
inline std::string* LockInfo::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockInfo.key)
  return _internal_mutable_key();
}
inline const std::string& LockInfo::_internal_key() const {
  return key_.Get();
}
inline void LockInfo::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LockInfo::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.LockInfo.key)
}
inline void LockInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockInfo.key)
}
inline void LockInfo::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockInfo.key)
}
inline std::string* LockInfo::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LockInfo::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockInfo.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LockInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockInfo.key)
}

// uint64 lock_ttl = 4;
inline void LockInfo::clear_lock_ttl() {
  lock_ttl_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockInfo::_internal_lock_ttl() const {
  return lock_ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockInfo::lock_ttl() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.lock_ttl)
  return _internal_lock_ttl();
}
inline void LockInfo::_internal_set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lock_ttl_ = value;
}
inline void LockInfo::set_lock_ttl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lock_ttl(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.lock_ttl)
}

// -------------------------------------------------------------------

// WriteConflict

// uint64 start_ts = 1;
inline void WriteConflict::clear_start_ts() {
  start_ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteConflict::_internal_start_ts() const {
  return start_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteConflict::start_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.WriteConflict.start_ts)
  return _internal_start_ts();
}
inline void WriteConflict::_internal_set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_ts_ = value;
}
inline void WriteConflict::set_start_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_ts(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.WriteConflict.start_ts)
}

// uint64 conflict_ts = 2;
inline void WriteConflict::clear_conflict_ts() {
  conflict_ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteConflict::_internal_conflict_ts() const {
  return conflict_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteConflict::conflict_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.WriteConflict.conflict_ts)
  return _internal_conflict_ts();
}
inline void WriteConflict::_internal_set_conflict_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  conflict_ts_ = value;
}
inline void WriteConflict::set_conflict_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_conflict_ts(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.WriteConflict.conflict_ts)
}

// bytes key = 3;
inline void WriteConflict::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& WriteConflict::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.WriteConflict.key)
  return _internal_key();
}
inline void WriteConflict::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.WriteConflict.key)
}
inline std::string* WriteConflict::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.WriteConflict.key)
  return _internal_mutable_key();
}
inline const std::string& WriteConflict::_internal_key() const {
  return key_.Get();
}
inline void WriteConflict::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteConflict::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.WriteConflict.key)
}
inline void WriteConflict::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.WriteConflict.key)
}
inline void WriteConflict::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.WriteConflict.key)
}
inline std::string* WriteConflict::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteConflict::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.WriteConflict.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteConflict::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.WriteConflict.key)
}

// bytes primary = 4;
inline void WriteConflict::clear_primary() {
  primary_.ClearToEmpty();
}
inline const std::string& WriteConflict::primary() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.WriteConflict.primary)
  return _internal_primary();
}
inline void WriteConflict::set_primary(const std::string& value) {
  _internal_set_primary(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.WriteConflict.primary)
}
inline std::string* WriteConflict::mutable_primary() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.WriteConflict.primary)
  return _internal_mutable_primary();
}
inline const std::string& WriteConflict::_internal_primary() const {
  return primary_.Get();
}
inline void WriteConflict::_internal_set_primary(const std::string& value) {
  
  primary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteConflict::set_primary(std::string&& value) {
  
  primary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kvrpcpb.WriteConflict.primary)
}
inline void WriteConflict::set_primary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kvrpcpb.WriteConflict.primary)
}
inline void WriteConflict::set_primary(const void* value,
    size_t size) {
  
  primary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.WriteConflict.primary)
}
inline std::string* WriteConflict::_internal_mutable_primary() {
  
  return primary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteConflict::release_primary() {
  // @@protoc_insertion_point(field_release:kvrpcpb.WriteConflict.primary)
  return primary_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteConflict::set_allocated_primary(std::string* primary) {
  if (primary != nullptr) {
    
  } else {
    
  }
  primary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.WriteConflict.primary)
}

// -------------------------------------------------------------------

// Context

// uint64 region_id = 1;
inline void Context::clear_region_id() {
  region_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Context::_internal_region_id() const {
  return region_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Context::region_id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.region_id)
  return _internal_region_id();
}
inline void Context::_internal_set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  region_id_ = value;
}
inline void Context::set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.region_id)
}

// .metapb.RegionEpoch region_epoch = 2;
inline bool Context::_internal_has_region_epoch() const {
  return this != internal_default_instance() && region_epoch_ != nullptr;
}
inline bool Context::has_region_epoch() const {
  return _internal_has_region_epoch();
}
inline const ::metapb::RegionEpoch& Context::_internal_region_epoch() const {
  const ::metapb::RegionEpoch* p = region_epoch_;
  return p != nullptr ? *p : reinterpret_cast<const ::metapb::RegionEpoch&>(
      ::metapb::_RegionEpoch_default_instance_);
}
inline const ::metapb::RegionEpoch& Context::region_epoch() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.region_epoch)
  return _internal_region_epoch();
}
inline void Context::unsafe_arena_set_allocated_region_epoch(
    ::metapb::RegionEpoch* region_epoch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_epoch_);
  }
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.Context.region_epoch)
}
inline ::metapb::RegionEpoch* Context::release_region_epoch() {
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::metapb::RegionEpoch* Context::unsafe_arena_release_region_epoch() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Context.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = nullptr;
  return temp;
}
inline ::metapb::RegionEpoch* Context::_internal_mutable_region_epoch() {
  
  if (region_epoch_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::RegionEpoch>(GetArena());
    region_epoch_ = p;
  }
  return region_epoch_;
}
inline ::metapb::RegionEpoch* Context::mutable_region_epoch() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Context.region_epoch)
  return _internal_mutable_region_epoch();
}
inline void Context::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_epoch_);
  }
  if (region_epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_epoch)->GetArena();
    if (message_arena != submessage_arena) {
      region_epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_epoch, submessage_arena);
    }
    
  } else {
    
  }
  region_epoch_ = region_epoch;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Context.region_epoch)
}

// .metapb.Peer peer = 3;
inline bool Context::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool Context::has_peer() const {
  return _internal_has_peer();
}
inline const ::metapb::Peer& Context::_internal_peer() const {
  const ::metapb::Peer* p = peer_;
  return p != nullptr ? *p : reinterpret_cast<const ::metapb::Peer&>(
      ::metapb::_Peer_default_instance_);
}
inline const ::metapb::Peer& Context::peer() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.peer)
  return _internal_peer();
}
inline void Context::unsafe_arena_set_allocated_peer(
    ::metapb::Peer* peer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kvrpcpb.Context.peer)
}
inline ::metapb::Peer* Context::release_peer() {
  
  ::metapb::Peer* temp = peer_;
  peer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::metapb::Peer* Context::unsafe_arena_release_peer() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Context.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::metapb::Peer* Context::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArena());
    peer_ = p;
  }
  return peer_;
}
inline ::metapb::Peer* Context::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Context.peer)
  return _internal_mutable_peer();
}
inline void Context::set_allocated_peer(::metapb::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_);
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer)->GetArena();
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Context.peer)
}

// uint64 term = 5;
inline void Context::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Context::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Context::term() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.term)
  return _internal_term();
}
inline void Context::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void Context::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.term)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kvrpcpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kvrpcpb::Op> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kvrpcpb::Op>() {
  return ::kvrpcpb::Op_descriptor();
}
template <> struct is_proto_enum< ::kvrpcpb::Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kvrpcpb::Action>() {
  return ::kvrpcpb::Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kvrpcpb_2eproto
