// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_serverpb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_5fserverpb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_5fserverpb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "eraftpb.pb.h"
#include "metapb.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_5fserverpb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_5fserverpb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_5fserverpb_2eproto;
namespace raft_serverpb {
class Done;
class DoneDefaultTypeInternal;
extern DoneDefaultTypeInternal _Done_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class RaftApplyState;
class RaftApplyStateDefaultTypeInternal;
extern RaftApplyStateDefaultTypeInternal _RaftApplyState_default_instance_;
class RaftLocalState;
class RaftLocalStateDefaultTypeInternal;
extern RaftLocalStateDefaultTypeInternal _RaftLocalState_default_instance_;
class RaftMessage;
class RaftMessageDefaultTypeInternal;
extern RaftMessageDefaultTypeInternal _RaftMessage_default_instance_;
class RaftSnapshotData;
class RaftSnapshotDataDefaultTypeInternal;
extern RaftSnapshotDataDefaultTypeInternal _RaftSnapshotData_default_instance_;
class RaftTruncatedState;
class RaftTruncatedStateDefaultTypeInternal;
extern RaftTruncatedStateDefaultTypeInternal _RaftTruncatedState_default_instance_;
class RegionLocalState;
class RegionLocalStateDefaultTypeInternal;
extern RegionLocalStateDefaultTypeInternal _RegionLocalState_default_instance_;
class SnapshotCFFile;
class SnapshotCFFileDefaultTypeInternal;
extern SnapshotCFFileDefaultTypeInternal _SnapshotCFFile_default_instance_;
class SnapshotChunk;
class SnapshotChunkDefaultTypeInternal;
extern SnapshotChunkDefaultTypeInternal _SnapshotChunk_default_instance_;
class SnapshotMeta;
class SnapshotMetaDefaultTypeInternal;
extern SnapshotMetaDefaultTypeInternal _SnapshotMeta_default_instance_;
class StoreIdent;
class StoreIdentDefaultTypeInternal;
extern StoreIdentDefaultTypeInternal _StoreIdent_default_instance_;
}  // namespace raft_serverpb
PROTOBUF_NAMESPACE_OPEN
template<> ::raft_serverpb::Done* Arena::CreateMaybeMessage<::raft_serverpb::Done>(Arena*);
template<> ::raft_serverpb::KeyValue* Arena::CreateMaybeMessage<::raft_serverpb::KeyValue>(Arena*);
template<> ::raft_serverpb::RaftApplyState* Arena::CreateMaybeMessage<::raft_serverpb::RaftApplyState>(Arena*);
template<> ::raft_serverpb::RaftLocalState* Arena::CreateMaybeMessage<::raft_serverpb::RaftLocalState>(Arena*);
template<> ::raft_serverpb::RaftMessage* Arena::CreateMaybeMessage<::raft_serverpb::RaftMessage>(Arena*);
template<> ::raft_serverpb::RaftSnapshotData* Arena::CreateMaybeMessage<::raft_serverpb::RaftSnapshotData>(Arena*);
template<> ::raft_serverpb::RaftTruncatedState* Arena::CreateMaybeMessage<::raft_serverpb::RaftTruncatedState>(Arena*);
template<> ::raft_serverpb::RegionLocalState* Arena::CreateMaybeMessage<::raft_serverpb::RegionLocalState>(Arena*);
template<> ::raft_serverpb::SnapshotCFFile* Arena::CreateMaybeMessage<::raft_serverpb::SnapshotCFFile>(Arena*);
template<> ::raft_serverpb::SnapshotChunk* Arena::CreateMaybeMessage<::raft_serverpb::SnapshotChunk>(Arena*);
template<> ::raft_serverpb::SnapshotMeta* Arena::CreateMaybeMessage<::raft_serverpb::SnapshotMeta>(Arena*);
template<> ::raft_serverpb::StoreIdent* Arena::CreateMaybeMessage<::raft_serverpb::StoreIdent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft_serverpb {

enum RaftMessageType : int {
  RaftMsgNormal = 0,
  RaftMsgClientCmd = 1,
  RaftTransferLeader = 2,
  RaftConfChange = 3,
  RaftMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RaftMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RaftMessageType_IsValid(int value);
constexpr RaftMessageType RaftMessageType_MIN = RaftMsgNormal;
constexpr RaftMessageType RaftMessageType_MAX = RaftConfChange;
constexpr int RaftMessageType_ARRAYSIZE = RaftMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaftMessageType_descriptor();
template<typename T>
inline const std::string& RaftMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RaftMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RaftMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RaftMessageType_descriptor(), enum_t_value);
}
inline bool RaftMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RaftMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RaftMessageType>(
    RaftMessageType_descriptor(), name, value);
}
enum PeerState : int {
  Normal = 0,
  Tombstone = 2,
  PeerState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PeerState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PeerState_IsValid(int value);
constexpr PeerState PeerState_MIN = Normal;
constexpr PeerState PeerState_MAX = Tombstone;
constexpr int PeerState_ARRAYSIZE = PeerState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerState_descriptor();
template<typename T>
inline const std::string& PeerState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerState_descriptor(), enum_t_value);
}
inline bool PeerState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeerState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerState>(
    PeerState_descriptor(), name, value);
}
// ===================================================================

class RaftMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftMessage) */ {
 public:
  inline RaftMessage() : RaftMessage(nullptr) {}
  virtual ~RaftMessage();

  RaftMessage(const RaftMessage& from);
  RaftMessage(RaftMessage&& from) noexcept
    : RaftMessage() {
    *this = ::std::move(from);
  }

  inline RaftMessage& operator=(const RaftMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftMessage& operator=(RaftMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftMessage& default_instance();

  static inline const RaftMessage* internal_default_instance() {
    return reinterpret_cast<const RaftMessage*>(
               &_RaftMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RaftMessage& a, RaftMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RaftMessage* New() const final {
    return CreateMaybeMessage<RaftMessage>(nullptr);
  }

  RaftMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftMessage& from);
  void MergeFrom(const RaftMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.RaftMessage";
  }
  protected:
  explicit RaftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyFieldNumber = 7,
    kEndKeyFieldNumber = 8,
    kDataFieldNumber = 9,
    kFromPeerFieldNumber = 2,
    kToPeerFieldNumber = 3,
    kMessageFieldNumber = 4,
    kRegionEpochFieldNumber = 5,
    kRegionIdFieldNumber = 1,
    kIsTombstoneFieldNumber = 6,
    kRaftMsgTypeFieldNumber = 10,
  };
  // bytes start_key = 7;
  void clear_start_key();
  const std::string& start_key() const;
  void set_start_key(const std::string& value);
  void set_start_key(std::string&& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  std::string* mutable_start_key();
  std::string* release_start_key();
  void set_allocated_start_key(std::string* start_key);
  private:
  const std::string& _internal_start_key() const;
  void _internal_set_start_key(const std::string& value);
  std::string* _internal_mutable_start_key();
  public:

  // bytes end_key = 8;
  void clear_end_key();
  const std::string& end_key() const;
  void set_end_key(const std::string& value);
  void set_end_key(std::string&& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  std::string* mutable_end_key();
  std::string* release_end_key();
  void set_allocated_end_key(std::string* end_key);
  private:
  const std::string& _internal_end_key() const;
  void _internal_set_end_key(const std::string& value);
  std::string* _internal_mutable_end_key();
  public:

  // bytes data = 9;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .metapb.Peer from_peer = 2;
  bool has_from_peer() const;
  private:
  bool _internal_has_from_peer() const;
  public:
  void clear_from_peer();
  const ::metapb::Peer& from_peer() const;
  ::metapb::Peer* release_from_peer();
  ::metapb::Peer* mutable_from_peer();
  void set_allocated_from_peer(::metapb::Peer* from_peer);
  private:
  const ::metapb::Peer& _internal_from_peer() const;
  ::metapb::Peer* _internal_mutable_from_peer();
  public:
  void unsafe_arena_set_allocated_from_peer(
      ::metapb::Peer* from_peer);
  ::metapb::Peer* unsafe_arena_release_from_peer();

  // .metapb.Peer to_peer = 3;
  bool has_to_peer() const;
  private:
  bool _internal_has_to_peer() const;
  public:
  void clear_to_peer();
  const ::metapb::Peer& to_peer() const;
  ::metapb::Peer* release_to_peer();
  ::metapb::Peer* mutable_to_peer();
  void set_allocated_to_peer(::metapb::Peer* to_peer);
  private:
  const ::metapb::Peer& _internal_to_peer() const;
  ::metapb::Peer* _internal_mutable_to_peer();
  public:
  void unsafe_arena_set_allocated_to_peer(
      ::metapb::Peer* to_peer);
  ::metapb::Peer* unsafe_arena_release_to_peer();

  // .eraftpb.Message message = 4;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::eraftpb::Message& message() const;
  ::eraftpb::Message* release_message();
  ::eraftpb::Message* mutable_message();
  void set_allocated_message(::eraftpb::Message* message);
  private:
  const ::eraftpb::Message& _internal_message() const;
  ::eraftpb::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::eraftpb::Message* message);
  ::eraftpb::Message* unsafe_arena_release_message();

  // .metapb.RegionEpoch region_epoch = 5;
  bool has_region_epoch() const;
  private:
  bool _internal_has_region_epoch() const;
  public:
  void clear_region_epoch();
  const ::metapb::RegionEpoch& region_epoch() const;
  ::metapb::RegionEpoch* release_region_epoch();
  ::metapb::RegionEpoch* mutable_region_epoch();
  void set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch);
  private:
  const ::metapb::RegionEpoch& _internal_region_epoch() const;
  ::metapb::RegionEpoch* _internal_mutable_region_epoch();
  public:
  void unsafe_arena_set_allocated_region_epoch(
      ::metapb::RegionEpoch* region_epoch);
  ::metapb::RegionEpoch* unsafe_arena_release_region_epoch();

  // uint64 region_id = 1;
  void clear_region_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 region_id() const;
  void set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_region_id() const;
  void _internal_set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_tombstone = 6;
  void clear_is_tombstone();
  bool is_tombstone() const;
  void set_is_tombstone(bool value);
  private:
  bool _internal_is_tombstone() const;
  void _internal_set_is_tombstone(bool value);
  public:

  // .raft_serverpb.RaftMessageType raft_msg_type = 10;
  void clear_raft_msg_type();
  ::raft_serverpb::RaftMessageType raft_msg_type() const;
  void set_raft_msg_type(::raft_serverpb::RaftMessageType value);
  private:
  ::raft_serverpb::RaftMessageType _internal_raft_msg_type() const;
  void _internal_set_raft_msg_type(::raft_serverpb::RaftMessageType value);
  public:

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::metapb::Peer* from_peer_;
  ::metapb::Peer* to_peer_;
  ::eraftpb::Message* message_;
  ::metapb::RegionEpoch* region_epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 region_id_;
  bool is_tombstone_;
  int raft_msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class RaftLocalState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftLocalState) */ {
 public:
  inline RaftLocalState() : RaftLocalState(nullptr) {}
  virtual ~RaftLocalState();

  RaftLocalState(const RaftLocalState& from);
  RaftLocalState(RaftLocalState&& from) noexcept
    : RaftLocalState() {
    *this = ::std::move(from);
  }

  inline RaftLocalState& operator=(const RaftLocalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftLocalState& operator=(RaftLocalState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftLocalState& default_instance();

  static inline const RaftLocalState* internal_default_instance() {
    return reinterpret_cast<const RaftLocalState*>(
               &_RaftLocalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RaftLocalState& a, RaftLocalState& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftLocalState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftLocalState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RaftLocalState* New() const final {
    return CreateMaybeMessage<RaftLocalState>(nullptr);
  }

  RaftLocalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftLocalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftLocalState& from);
  void MergeFrom(const RaftLocalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftLocalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.RaftLocalState";
  }
  protected:
  explicit RaftLocalState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHardStateFieldNumber = 1,
    kLastIndexFieldNumber = 2,
    kLastTermFieldNumber = 3,
  };
  // .eraftpb.HardState hard_state = 1;
  bool has_hard_state() const;
  private:
  bool _internal_has_hard_state() const;
  public:
  void clear_hard_state();
  const ::eraftpb::HardState& hard_state() const;
  ::eraftpb::HardState* release_hard_state();
  ::eraftpb::HardState* mutable_hard_state();
  void set_allocated_hard_state(::eraftpb::HardState* hard_state);
  private:
  const ::eraftpb::HardState& _internal_hard_state() const;
  ::eraftpb::HardState* _internal_mutable_hard_state();
  public:
  void unsafe_arena_set_allocated_hard_state(
      ::eraftpb::HardState* hard_state);
  ::eraftpb::HardState* unsafe_arena_release_hard_state();

  // uint64 last_index = 2;
  void clear_last_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_index() const;
  void set_last_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_index() const;
  void _internal_set_last_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_term = 3;
  void clear_last_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_term() const;
  void set_last_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_term() const;
  void _internal_set_last_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftLocalState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::eraftpb::HardState* hard_state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class RaftApplyState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftApplyState) */ {
 public:
  inline RaftApplyState() : RaftApplyState(nullptr) {}
  virtual ~RaftApplyState();

  RaftApplyState(const RaftApplyState& from);
  RaftApplyState(RaftApplyState&& from) noexcept
    : RaftApplyState() {
    *this = ::std::move(from);
  }

  inline RaftApplyState& operator=(const RaftApplyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftApplyState& operator=(RaftApplyState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftApplyState& default_instance();

  static inline const RaftApplyState* internal_default_instance() {
    return reinterpret_cast<const RaftApplyState*>(
               &_RaftApplyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RaftApplyState& a, RaftApplyState& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftApplyState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftApplyState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RaftApplyState* New() const final {
    return CreateMaybeMessage<RaftApplyState>(nullptr);
  }

  RaftApplyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftApplyState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftApplyState& from);
  void MergeFrom(const RaftApplyState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftApplyState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.RaftApplyState";
  }
  protected:
  explicit RaftApplyState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTruncatedStateFieldNumber = 2,
    kAppliedIndexFieldNumber = 1,
  };
  // .raft_serverpb.RaftTruncatedState truncated_state = 2;
  bool has_truncated_state() const;
  private:
  bool _internal_has_truncated_state() const;
  public:
  void clear_truncated_state();
  const ::raft_serverpb::RaftTruncatedState& truncated_state() const;
  ::raft_serverpb::RaftTruncatedState* release_truncated_state();
  ::raft_serverpb::RaftTruncatedState* mutable_truncated_state();
  void set_allocated_truncated_state(::raft_serverpb::RaftTruncatedState* truncated_state);
  private:
  const ::raft_serverpb::RaftTruncatedState& _internal_truncated_state() const;
  ::raft_serverpb::RaftTruncatedState* _internal_mutable_truncated_state();
  public:
  void unsafe_arena_set_allocated_truncated_state(
      ::raft_serverpb::RaftTruncatedState* truncated_state);
  ::raft_serverpb::RaftTruncatedState* unsafe_arena_release_truncated_state();

  // uint64 applied_index = 1;
  void clear_applied_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 applied_index() const;
  void set_applied_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_applied_index() const;
  void _internal_set_applied_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftApplyState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::raft_serverpb::RaftTruncatedState* truncated_state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 applied_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class RaftTruncatedState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftTruncatedState) */ {
 public:
  inline RaftTruncatedState() : RaftTruncatedState(nullptr) {}
  virtual ~RaftTruncatedState();

  RaftTruncatedState(const RaftTruncatedState& from);
  RaftTruncatedState(RaftTruncatedState&& from) noexcept
    : RaftTruncatedState() {
    *this = ::std::move(from);
  }

  inline RaftTruncatedState& operator=(const RaftTruncatedState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftTruncatedState& operator=(RaftTruncatedState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftTruncatedState& default_instance();

  static inline const RaftTruncatedState* internal_default_instance() {
    return reinterpret_cast<const RaftTruncatedState*>(
               &_RaftTruncatedState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RaftTruncatedState& a, RaftTruncatedState& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftTruncatedState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftTruncatedState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RaftTruncatedState* New() const final {
    return CreateMaybeMessage<RaftTruncatedState>(nullptr);
  }

  RaftTruncatedState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftTruncatedState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftTruncatedState& from);
  void MergeFrom(const RaftTruncatedState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftTruncatedState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.RaftTruncatedState";
  }
  protected:
  explicit RaftTruncatedState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kTermFieldNumber = 2,
  };
  // uint64 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 term = 2;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftTruncatedState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class RegionLocalState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RegionLocalState) */ {
 public:
  inline RegionLocalState() : RegionLocalState(nullptr) {}
  virtual ~RegionLocalState();

  RegionLocalState(const RegionLocalState& from);
  RegionLocalState(RegionLocalState&& from) noexcept
    : RegionLocalState() {
    *this = ::std::move(from);
  }

  inline RegionLocalState& operator=(const RegionLocalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionLocalState& operator=(RegionLocalState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegionLocalState& default_instance();

  static inline const RegionLocalState* internal_default_instance() {
    return reinterpret_cast<const RegionLocalState*>(
               &_RegionLocalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegionLocalState& a, RegionLocalState& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionLocalState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionLocalState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionLocalState* New() const final {
    return CreateMaybeMessage<RegionLocalState>(nullptr);
  }

  RegionLocalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionLocalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionLocalState& from);
  void MergeFrom(const RegionLocalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionLocalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.RegionLocalState";
  }
  protected:
  explicit RegionLocalState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // .metapb.Region region = 2;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::metapb::Region& region() const;
  ::metapb::Region* release_region();
  ::metapb::Region* mutable_region();
  void set_allocated_region(::metapb::Region* region);
  private:
  const ::metapb::Region& _internal_region() const;
  ::metapb::Region* _internal_mutable_region();
  public:
  void unsafe_arena_set_allocated_region(
      ::metapb::Region* region);
  ::metapb::Region* unsafe_arena_release_region();

  // .raft_serverpb.PeerState state = 1;
  void clear_state();
  ::raft_serverpb::PeerState state() const;
  void set_state(::raft_serverpb::PeerState value);
  private:
  ::raft_serverpb::PeerState _internal_state() const;
  void _internal_set_state(::raft_serverpb::PeerState value);
  public:

  // @@protoc_insertion_point(class_scope:raft_serverpb.RegionLocalState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::metapb::Region* region_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class StoreIdent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.StoreIdent) */ {
 public:
  inline StoreIdent() : StoreIdent(nullptr) {}
  virtual ~StoreIdent();

  StoreIdent(const StoreIdent& from);
  StoreIdent(StoreIdent&& from) noexcept
    : StoreIdent() {
    *this = ::std::move(from);
  }

  inline StoreIdent& operator=(const StoreIdent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreIdent& operator=(StoreIdent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreIdent& default_instance();

  static inline const StoreIdent* internal_default_instance() {
    return reinterpret_cast<const StoreIdent*>(
               &_StoreIdent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StoreIdent& a, StoreIdent& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreIdent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreIdent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreIdent* New() const final {
    return CreateMaybeMessage<StoreIdent>(nullptr);
  }

  StoreIdent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreIdent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreIdent& from);
  void MergeFrom(const StoreIdent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreIdent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.StoreIdent";
  }
  protected:
  explicit StoreIdent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 3,
    kClusterIdFieldNumber = 1,
    kStoreIdFieldNumber = 2,
  };
  // string addr = 3;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // uint64 cluster_id = 1;
  void clear_cluster_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id() const;
  void set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cluster_id() const;
  void _internal_set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 store_id = 2;
  void clear_store_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 store_id() const;
  void set_store_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_store_id() const;
  void _internal_set_store_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_serverpb.StoreIdent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 store_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:raft_serverpb.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class RaftSnapshotData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftSnapshotData) */ {
 public:
  inline RaftSnapshotData() : RaftSnapshotData(nullptr) {}
  virtual ~RaftSnapshotData();

  RaftSnapshotData(const RaftSnapshotData& from);
  RaftSnapshotData(RaftSnapshotData&& from) noexcept
    : RaftSnapshotData() {
    *this = ::std::move(from);
  }

  inline RaftSnapshotData& operator=(const RaftSnapshotData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftSnapshotData& operator=(RaftSnapshotData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaftSnapshotData& default_instance();

  static inline const RaftSnapshotData* internal_default_instance() {
    return reinterpret_cast<const RaftSnapshotData*>(
               &_RaftSnapshotData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RaftSnapshotData& a, RaftSnapshotData& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftSnapshotData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftSnapshotData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RaftSnapshotData* New() const final {
    return CreateMaybeMessage<RaftSnapshotData>(nullptr);
  }

  RaftSnapshotData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaftSnapshotData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaftSnapshotData& from);
  void MergeFrom(const RaftSnapshotData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftSnapshotData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.RaftSnapshotData";
  }
  protected:
  explicit RaftSnapshotData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRegionFieldNumber = 1,
    kMetaFieldNumber = 5,
    kFileSizeFieldNumber = 2,
  };
  // repeated .raft_serverpb.KeyValue data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::raft_serverpb::KeyValue* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::KeyValue >*
      mutable_data();
  private:
  const ::raft_serverpb::KeyValue& _internal_data(int index) const;
  ::raft_serverpb::KeyValue* _internal_add_data();
  public:
  const ::raft_serverpb::KeyValue& data(int index) const;
  ::raft_serverpb::KeyValue* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::KeyValue >&
      data() const;

  // .metapb.Region region = 1;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::metapb::Region& region() const;
  ::metapb::Region* release_region();
  ::metapb::Region* mutable_region();
  void set_allocated_region(::metapb::Region* region);
  private:
  const ::metapb::Region& _internal_region() const;
  ::metapb::Region* _internal_mutable_region();
  public:
  void unsafe_arena_set_allocated_region(
      ::metapb::Region* region);
  ::metapb::Region* unsafe_arena_release_region();

  // .raft_serverpb.SnapshotMeta meta = 5;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::raft_serverpb::SnapshotMeta& meta() const;
  ::raft_serverpb::SnapshotMeta* release_meta();
  ::raft_serverpb::SnapshotMeta* mutable_meta();
  void set_allocated_meta(::raft_serverpb::SnapshotMeta* meta);
  private:
  const ::raft_serverpb::SnapshotMeta& _internal_meta() const;
  ::raft_serverpb::SnapshotMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::raft_serverpb::SnapshotMeta* meta);
  ::raft_serverpb::SnapshotMeta* unsafe_arena_release_meta();

  // uint64 file_size = 2;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftSnapshotData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::KeyValue > data_;
  ::metapb::Region* region_;
  ::raft_serverpb::SnapshotMeta* meta_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class SnapshotCFFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.SnapshotCFFile) */ {
 public:
  inline SnapshotCFFile() : SnapshotCFFile(nullptr) {}
  virtual ~SnapshotCFFile();

  SnapshotCFFile(const SnapshotCFFile& from);
  SnapshotCFFile(SnapshotCFFile&& from) noexcept
    : SnapshotCFFile() {
    *this = ::std::move(from);
  }

  inline SnapshotCFFile& operator=(const SnapshotCFFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotCFFile& operator=(SnapshotCFFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotCFFile& default_instance();

  static inline const SnapshotCFFile* internal_default_instance() {
    return reinterpret_cast<const SnapshotCFFile*>(
               &_SnapshotCFFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SnapshotCFFile& a, SnapshotCFFile& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotCFFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotCFFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotCFFile* New() const final {
    return CreateMaybeMessage<SnapshotCFFile>(nullptr);
  }

  SnapshotCFFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotCFFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotCFFile& from);
  void MergeFrom(const SnapshotCFFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotCFFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.SnapshotCFFile";
  }
  protected:
  explicit SnapshotCFFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCfFieldNumber = 1,
    kSizeFieldNumber = 2,
    kChecksumFieldNumber = 3,
  };
  // string cf = 1;
  void clear_cf();
  const std::string& cf() const;
  void set_cf(const std::string& value);
  void set_cf(std::string&& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  std::string* mutable_cf();
  std::string* release_cf();
  void set_allocated_cf(std::string* cf);
  private:
  const std::string& _internal_cf() const;
  void _internal_set_cf(const std::string& value);
  std::string* _internal_mutable_cf();
  public:

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 checksum = 3;
  void clear_checksum();
  ::PROTOBUF_NAMESPACE_ID::uint32 checksum() const;
  void set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_checksum() const;
  void _internal_set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:raft_serverpb.SnapshotCFFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 checksum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class SnapshotMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.SnapshotMeta) */ {
 public:
  inline SnapshotMeta() : SnapshotMeta(nullptr) {}
  virtual ~SnapshotMeta();

  SnapshotMeta(const SnapshotMeta& from);
  SnapshotMeta(SnapshotMeta&& from) noexcept
    : SnapshotMeta() {
    *this = ::std::move(from);
  }

  inline SnapshotMeta& operator=(const SnapshotMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotMeta& operator=(SnapshotMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotMeta& default_instance();

  static inline const SnapshotMeta* internal_default_instance() {
    return reinterpret_cast<const SnapshotMeta*>(
               &_SnapshotMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SnapshotMeta& a, SnapshotMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotMeta* New() const final {
    return CreateMaybeMessage<SnapshotMeta>(nullptr);
  }

  SnapshotMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotMeta& from);
  void MergeFrom(const SnapshotMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.SnapshotMeta";
  }
  protected:
  explicit SnapshotMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCfFilesFieldNumber = 1,
  };
  // repeated .raft_serverpb.SnapshotCFFile cf_files = 1;
  int cf_files_size() const;
  private:
  int _internal_cf_files_size() const;
  public:
  void clear_cf_files();
  ::raft_serverpb::SnapshotCFFile* mutable_cf_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >*
      mutable_cf_files();
  private:
  const ::raft_serverpb::SnapshotCFFile& _internal_cf_files(int index) const;
  ::raft_serverpb::SnapshotCFFile* _internal_add_cf_files();
  public:
  const ::raft_serverpb::SnapshotCFFile& cf_files(int index) const;
  ::raft_serverpb::SnapshotCFFile* add_cf_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >&
      cf_files() const;

  // @@protoc_insertion_point(class_scope:raft_serverpb.SnapshotMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile > cf_files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class SnapshotChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.SnapshotChunk) */ {
 public:
  inline SnapshotChunk() : SnapshotChunk(nullptr) {}
  virtual ~SnapshotChunk();

  SnapshotChunk(const SnapshotChunk& from);
  SnapshotChunk(SnapshotChunk&& from) noexcept
    : SnapshotChunk() {
    *this = ::std::move(from);
  }

  inline SnapshotChunk& operator=(const SnapshotChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotChunk& operator=(SnapshotChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotChunk& default_instance();

  static inline const SnapshotChunk* internal_default_instance() {
    return reinterpret_cast<const SnapshotChunk*>(
               &_SnapshotChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SnapshotChunk& a, SnapshotChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapshotChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotChunk* New() const final {
    return CreateMaybeMessage<SnapshotChunk>(nullptr);
  }

  SnapshotChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotChunk& from);
  void MergeFrom(const SnapshotChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.SnapshotChunk";
  }
  protected:
  explicit SnapshotChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMessageFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .raft_serverpb.RaftMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::raft_serverpb::RaftMessage& message() const;
  ::raft_serverpb::RaftMessage* release_message();
  ::raft_serverpb::RaftMessage* mutable_message();
  void set_allocated_message(::raft_serverpb::RaftMessage* message);
  private:
  const ::raft_serverpb::RaftMessage& _internal_message() const;
  ::raft_serverpb::RaftMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::raft_serverpb::RaftMessage* message);
  ::raft_serverpb::RaftMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:raft_serverpb.SnapshotChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::raft_serverpb::RaftMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// -------------------------------------------------------------------

class Done PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.Done) */ {
 public:
  inline Done() : Done(nullptr) {}
  virtual ~Done();

  Done(const Done& from);
  Done(Done&& from) noexcept
    : Done() {
    *this = ::std::move(from);
  }

  inline Done& operator=(const Done& from) {
    CopyFrom(from);
    return *this;
  }
  inline Done& operator=(Done&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Done& default_instance();

  static inline const Done* internal_default_instance() {
    return reinterpret_cast<const Done*>(
               &_Done_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Done& a, Done& b) {
    a.Swap(&b);
  }
  inline void Swap(Done* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Done* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Done* New() const final {
    return CreateMaybeMessage<Done>(nullptr);
  }

  Done* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Done>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Done& from);
  void MergeFrom(const Done& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Done* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_serverpb.Done";
  }
  protected:
  explicit Done(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fserverpb_2eproto);
    return ::descriptor_table_raft_5fserverpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_serverpb.Done)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_5fserverpb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RaftMessage

// uint64 region_id = 1;
inline void RaftMessage::clear_region_id() {
  region_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftMessage::_internal_region_id() const {
  return region_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftMessage::region_id() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.region_id)
  return _internal_region_id();
}
inline void RaftMessage::_internal_set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  region_id_ = value;
}
inline void RaftMessage::set_region_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.region_id)
}

// .metapb.Peer from_peer = 2;
inline bool RaftMessage::_internal_has_from_peer() const {
  return this != internal_default_instance() && from_peer_ != nullptr;
}
inline bool RaftMessage::has_from_peer() const {
  return _internal_has_from_peer();
}
inline const ::metapb::Peer& RaftMessage::_internal_from_peer() const {
  const ::metapb::Peer* p = from_peer_;
  return p != nullptr ? *p : reinterpret_cast<const ::metapb::Peer&>(
      ::metapb::_Peer_default_instance_);
}
inline const ::metapb::Peer& RaftMessage::from_peer() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.from_peer)
  return _internal_from_peer();
}
inline void RaftMessage::unsafe_arena_set_allocated_from_peer(
    ::metapb::Peer* from_peer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_peer_);
  }
  from_peer_ = from_peer;
  if (from_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.RaftMessage.from_peer)
}
inline ::metapb::Peer* RaftMessage::release_from_peer() {
  
  ::metapb::Peer* temp = from_peer_;
  from_peer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::metapb::Peer* RaftMessage::unsafe_arena_release_from_peer() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.from_peer)
  
  ::metapb::Peer* temp = from_peer_;
  from_peer_ = nullptr;
  return temp;
}
inline ::metapb::Peer* RaftMessage::_internal_mutable_from_peer() {
  
  if (from_peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArena());
    from_peer_ = p;
  }
  return from_peer_;
}
inline ::metapb::Peer* RaftMessage::mutable_from_peer() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.from_peer)
  return _internal_mutable_from_peer();
}
inline void RaftMessage::set_allocated_from_peer(::metapb::Peer* from_peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_peer_);
  }
  if (from_peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_peer)->GetArena();
    if (message_arena != submessage_arena) {
      from_peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_peer, submessage_arena);
    }
    
  } else {
    
  }
  from_peer_ = from_peer;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.from_peer)
}

// .metapb.Peer to_peer = 3;
inline bool RaftMessage::_internal_has_to_peer() const {
  return this != internal_default_instance() && to_peer_ != nullptr;
}
inline bool RaftMessage::has_to_peer() const {
  return _internal_has_to_peer();
}
inline const ::metapb::Peer& RaftMessage::_internal_to_peer() const {
  const ::metapb::Peer* p = to_peer_;
  return p != nullptr ? *p : reinterpret_cast<const ::metapb::Peer&>(
      ::metapb::_Peer_default_instance_);
}
inline const ::metapb::Peer& RaftMessage::to_peer() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.to_peer)
  return _internal_to_peer();
}
inline void RaftMessage::unsafe_arena_set_allocated_to_peer(
    ::metapb::Peer* to_peer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_peer_);
  }
  to_peer_ = to_peer;
  if (to_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.RaftMessage.to_peer)
}
inline ::metapb::Peer* RaftMessage::release_to_peer() {
  
  ::metapb::Peer* temp = to_peer_;
  to_peer_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::metapb::Peer* RaftMessage::unsafe_arena_release_to_peer() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.to_peer)
  
  ::metapb::Peer* temp = to_peer_;
  to_peer_ = nullptr;
  return temp;
}
inline ::metapb::Peer* RaftMessage::_internal_mutable_to_peer() {
  
  if (to_peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArena());
    to_peer_ = p;
  }
  return to_peer_;
}
inline ::metapb::Peer* RaftMessage::mutable_to_peer() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.to_peer)
  return _internal_mutable_to_peer();
}
inline void RaftMessage::set_allocated_to_peer(::metapb::Peer* to_peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_peer_);
  }
  if (to_peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_peer)->GetArena();
    if (message_arena != submessage_arena) {
      to_peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_peer, submessage_arena);
    }
    
  } else {
    
  }
  to_peer_ = to_peer;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.to_peer)
}

// .eraftpb.Message message = 4;
inline bool RaftMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool RaftMessage::has_message() const {
  return _internal_has_message();
}
inline const ::eraftpb::Message& RaftMessage::_internal_message() const {
  const ::eraftpb::Message* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::eraftpb::Message&>(
      ::eraftpb::_Message_default_instance_);
}
inline const ::eraftpb::Message& RaftMessage::message() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.message)
  return _internal_message();
}
inline void RaftMessage::unsafe_arena_set_allocated_message(
    ::eraftpb::Message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.RaftMessage.message)
}
inline ::eraftpb::Message* RaftMessage::release_message() {
  
  ::eraftpb::Message* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::eraftpb::Message* RaftMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.message)
  
  ::eraftpb::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::eraftpb::Message* RaftMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::eraftpb::Message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::eraftpb::Message* RaftMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.message)
  return _internal_mutable_message();
}
inline void RaftMessage::set_allocated_message(::eraftpb::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.message)
}

// .metapb.RegionEpoch region_epoch = 5;
inline bool RaftMessage::_internal_has_region_epoch() const {
  return this != internal_default_instance() && region_epoch_ != nullptr;
}
inline bool RaftMessage::has_region_epoch() const {
  return _internal_has_region_epoch();
}
inline const ::metapb::RegionEpoch& RaftMessage::_internal_region_epoch() const {
  const ::metapb::RegionEpoch* p = region_epoch_;
  return p != nullptr ? *p : reinterpret_cast<const ::metapb::RegionEpoch&>(
      ::metapb::_RegionEpoch_default_instance_);
}
inline const ::metapb::RegionEpoch& RaftMessage::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.region_epoch)
  return _internal_region_epoch();
}
inline void RaftMessage::unsafe_arena_set_allocated_region_epoch(
    ::metapb::RegionEpoch* region_epoch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_epoch_);
  }
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.RaftMessage.region_epoch)
}
inline ::metapb::RegionEpoch* RaftMessage::release_region_epoch() {
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::metapb::RegionEpoch* RaftMessage::unsafe_arena_release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = nullptr;
  return temp;
}
inline ::metapb::RegionEpoch* RaftMessage::_internal_mutable_region_epoch() {
  
  if (region_epoch_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::RegionEpoch>(GetArena());
    region_epoch_ = p;
  }
  return region_epoch_;
}
inline ::metapb::RegionEpoch* RaftMessage::mutable_region_epoch() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.region_epoch)
  return _internal_mutable_region_epoch();
}
inline void RaftMessage::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_epoch_);
  }
  if (region_epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_epoch)->GetArena();
    if (message_arena != submessage_arena) {
      region_epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region_epoch, submessage_arena);
    }
    
  } else {
    
  }
  region_epoch_ = region_epoch;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.region_epoch)
}

// bool is_tombstone = 6;
inline void RaftMessage::clear_is_tombstone() {
  is_tombstone_ = false;
}
inline bool RaftMessage::_internal_is_tombstone() const {
  return is_tombstone_;
}
inline bool RaftMessage::is_tombstone() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.is_tombstone)
  return _internal_is_tombstone();
}
inline void RaftMessage::_internal_set_is_tombstone(bool value) {
  
  is_tombstone_ = value;
}
inline void RaftMessage::set_is_tombstone(bool value) {
  _internal_set_is_tombstone(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.is_tombstone)
}

// bytes start_key = 7;
inline void RaftMessage::clear_start_key() {
  start_key_.ClearToEmpty();
}
inline const std::string& RaftMessage::start_key() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.start_key)
  return _internal_start_key();
}
inline void RaftMessage::set_start_key(const std::string& value) {
  _internal_set_start_key(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.start_key)
}
inline std::string* RaftMessage::mutable_start_key() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.start_key)
  return _internal_mutable_start_key();
}
inline const std::string& RaftMessage::_internal_start_key() const {
  return start_key_.Get();
}
inline void RaftMessage::_internal_set_start_key(const std::string& value) {
  
  start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RaftMessage::set_start_key(std::string&& value) {
  
  start_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft_serverpb.RaftMessage.start_key)
}
inline void RaftMessage::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raft_serverpb.RaftMessage.start_key)
}
inline void RaftMessage::set_start_key(const void* value,
    size_t size) {
  
  start_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.RaftMessage.start_key)
}
inline std::string* RaftMessage::_internal_mutable_start_key() {
  
  return start_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RaftMessage::release_start_key() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.start_key)
  return start_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RaftMessage::set_allocated_start_key(std::string* start_key) {
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.start_key)
}

// bytes end_key = 8;
inline void RaftMessage::clear_end_key() {
  end_key_.ClearToEmpty();
}
inline const std::string& RaftMessage::end_key() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.end_key)
  return _internal_end_key();
}
inline void RaftMessage::set_end_key(const std::string& value) {
  _internal_set_end_key(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.end_key)
}
inline std::string* RaftMessage::mutable_end_key() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.end_key)
  return _internal_mutable_end_key();
}
inline const std::string& RaftMessage::_internal_end_key() const {
  return end_key_.Get();
}
inline void RaftMessage::_internal_set_end_key(const std::string& value) {
  
  end_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RaftMessage::set_end_key(std::string&& value) {
  
  end_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft_serverpb.RaftMessage.end_key)
}
inline void RaftMessage::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raft_serverpb.RaftMessage.end_key)
}
inline void RaftMessage::set_end_key(const void* value,
    size_t size) {
  
  end_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.RaftMessage.end_key)
}
inline std::string* RaftMessage::_internal_mutable_end_key() {
  
  return end_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RaftMessage::release_end_key() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.end_key)
  return end_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RaftMessage::set_allocated_end_key(std::string* end_key) {
  if (end_key != nullptr) {
    
  } else {
    
  }
  end_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.end_key)
}

// bytes data = 9;
inline void RaftMessage::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RaftMessage::data() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.data)
  return _internal_data();
}
inline void RaftMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.data)
}
inline std::string* RaftMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.data)
  return _internal_mutable_data();
}
inline const std::string& RaftMessage::_internal_data() const {
  return data_.Get();
}
inline void RaftMessage::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RaftMessage::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft_serverpb.RaftMessage.data)
}
inline void RaftMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raft_serverpb.RaftMessage.data)
}
inline void RaftMessage::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.RaftMessage.data)
}
inline std::string* RaftMessage::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RaftMessage::release_data() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RaftMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.data)
}

// .raft_serverpb.RaftMessageType raft_msg_type = 10;
inline void RaftMessage::clear_raft_msg_type() {
  raft_msg_type_ = 0;
}
inline ::raft_serverpb::RaftMessageType RaftMessage::_internal_raft_msg_type() const {
  return static_cast< ::raft_serverpb::RaftMessageType >(raft_msg_type_);
}
inline ::raft_serverpb::RaftMessageType RaftMessage::raft_msg_type() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.raft_msg_type)
  return _internal_raft_msg_type();
}
inline void RaftMessage::_internal_set_raft_msg_type(::raft_serverpb::RaftMessageType value) {
  
  raft_msg_type_ = value;
}
inline void RaftMessage::set_raft_msg_type(::raft_serverpb::RaftMessageType value) {
  _internal_set_raft_msg_type(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.raft_msg_type)
}

// -------------------------------------------------------------------

// RaftLocalState

// .eraftpb.HardState hard_state = 1;
inline bool RaftLocalState::_internal_has_hard_state() const {
  return this != internal_default_instance() && hard_state_ != nullptr;
}
inline bool RaftLocalState::has_hard_state() const {
  return _internal_has_hard_state();
}
inline const ::eraftpb::HardState& RaftLocalState::_internal_hard_state() const {
  const ::eraftpb::HardState* p = hard_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::eraftpb::HardState&>(
      ::eraftpb::_HardState_default_instance_);
}
inline const ::eraftpb::HardState& RaftLocalState::hard_state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftLocalState.hard_state)
  return _internal_hard_state();
}
inline void RaftLocalState::unsafe_arena_set_allocated_hard_state(
    ::eraftpb::HardState* hard_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hard_state_);
  }
  hard_state_ = hard_state;
  if (hard_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.RaftLocalState.hard_state)
}
inline ::eraftpb::HardState* RaftLocalState::release_hard_state() {
  
  ::eraftpb::HardState* temp = hard_state_;
  hard_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::eraftpb::HardState* RaftLocalState::unsafe_arena_release_hard_state() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftLocalState.hard_state)
  
  ::eraftpb::HardState* temp = hard_state_;
  hard_state_ = nullptr;
  return temp;
}
inline ::eraftpb::HardState* RaftLocalState::_internal_mutable_hard_state() {
  
  if (hard_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::eraftpb::HardState>(GetArena());
    hard_state_ = p;
  }
  return hard_state_;
}
inline ::eraftpb::HardState* RaftLocalState::mutable_hard_state() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftLocalState.hard_state)
  return _internal_mutable_hard_state();
}
inline void RaftLocalState::set_allocated_hard_state(::eraftpb::HardState* hard_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hard_state_);
  }
  if (hard_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hard_state)->GetArena();
    if (message_arena != submessage_arena) {
      hard_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hard_state, submessage_arena);
    }
    
  } else {
    
  }
  hard_state_ = hard_state;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftLocalState.hard_state)
}

// uint64 last_index = 2;
inline void RaftLocalState::clear_last_index() {
  last_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftLocalState::_internal_last_index() const {
  return last_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftLocalState::last_index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftLocalState.last_index)
  return _internal_last_index();
}
inline void RaftLocalState::_internal_set_last_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_index_ = value;
}
inline void RaftLocalState::set_last_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_index(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftLocalState.last_index)
}

// uint64 last_term = 3;
inline void RaftLocalState::clear_last_term() {
  last_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftLocalState::_internal_last_term() const {
  return last_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftLocalState::last_term() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftLocalState.last_term)
  return _internal_last_term();
}
inline void RaftLocalState::_internal_set_last_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_term_ = value;
}
inline void RaftLocalState::set_last_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_term(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftLocalState.last_term)
}

// -------------------------------------------------------------------

// RaftApplyState

// uint64 applied_index = 1;
inline void RaftApplyState::clear_applied_index() {
  applied_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftApplyState::_internal_applied_index() const {
  return applied_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftApplyState::applied_index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftApplyState.applied_index)
  return _internal_applied_index();
}
inline void RaftApplyState::_internal_set_applied_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  applied_index_ = value;
}
inline void RaftApplyState::set_applied_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_applied_index(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftApplyState.applied_index)
}

// .raft_serverpb.RaftTruncatedState truncated_state = 2;
inline bool RaftApplyState::_internal_has_truncated_state() const {
  return this != internal_default_instance() && truncated_state_ != nullptr;
}
inline bool RaftApplyState::has_truncated_state() const {
  return _internal_has_truncated_state();
}
inline void RaftApplyState::clear_truncated_state() {
  if (GetArena() == nullptr && truncated_state_ != nullptr) {
    delete truncated_state_;
  }
  truncated_state_ = nullptr;
}
inline const ::raft_serverpb::RaftTruncatedState& RaftApplyState::_internal_truncated_state() const {
  const ::raft_serverpb::RaftTruncatedState* p = truncated_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::raft_serverpb::RaftTruncatedState&>(
      ::raft_serverpb::_RaftTruncatedState_default_instance_);
}
inline const ::raft_serverpb::RaftTruncatedState& RaftApplyState::truncated_state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftApplyState.truncated_state)
  return _internal_truncated_state();
}
inline void RaftApplyState::unsafe_arena_set_allocated_truncated_state(
    ::raft_serverpb::RaftTruncatedState* truncated_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(truncated_state_);
  }
  truncated_state_ = truncated_state;
  if (truncated_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.RaftApplyState.truncated_state)
}
inline ::raft_serverpb::RaftTruncatedState* RaftApplyState::release_truncated_state() {
  
  ::raft_serverpb::RaftTruncatedState* temp = truncated_state_;
  truncated_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::raft_serverpb::RaftTruncatedState* RaftApplyState::unsafe_arena_release_truncated_state() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftApplyState.truncated_state)
  
  ::raft_serverpb::RaftTruncatedState* temp = truncated_state_;
  truncated_state_ = nullptr;
  return temp;
}
inline ::raft_serverpb::RaftTruncatedState* RaftApplyState::_internal_mutable_truncated_state() {
  
  if (truncated_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_serverpb::RaftTruncatedState>(GetArena());
    truncated_state_ = p;
  }
  return truncated_state_;
}
inline ::raft_serverpb::RaftTruncatedState* RaftApplyState::mutable_truncated_state() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftApplyState.truncated_state)
  return _internal_mutable_truncated_state();
}
inline void RaftApplyState::set_allocated_truncated_state(::raft_serverpb::RaftTruncatedState* truncated_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete truncated_state_;
  }
  if (truncated_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(truncated_state);
    if (message_arena != submessage_arena) {
      truncated_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, truncated_state, submessage_arena);
    }
    
  } else {
    
  }
  truncated_state_ = truncated_state;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftApplyState.truncated_state)
}

// -------------------------------------------------------------------

// RaftTruncatedState

// uint64 index = 1;
inline void RaftTruncatedState::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftTruncatedState::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftTruncatedState::index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftTruncatedState.index)
  return _internal_index();
}
inline void RaftTruncatedState::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void RaftTruncatedState::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftTruncatedState.index)
}

// uint64 term = 2;
inline void RaftTruncatedState::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftTruncatedState::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftTruncatedState::term() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftTruncatedState.term)
  return _internal_term();
}
inline void RaftTruncatedState::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void RaftTruncatedState::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftTruncatedState.term)
}

// -------------------------------------------------------------------

// RegionLocalState

// .raft_serverpb.PeerState state = 1;
inline void RegionLocalState::clear_state() {
  state_ = 0;
}
inline ::raft_serverpb::PeerState RegionLocalState::_internal_state() const {
  return static_cast< ::raft_serverpb::PeerState >(state_);
}
inline ::raft_serverpb::PeerState RegionLocalState::state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RegionLocalState.state)
  return _internal_state();
}
inline void RegionLocalState::_internal_set_state(::raft_serverpb::PeerState value) {
  
  state_ = value;
}
inline void RegionLocalState::set_state(::raft_serverpb::PeerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RegionLocalState.state)
}

// .metapb.Region region = 2;
inline bool RegionLocalState::_internal_has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline bool RegionLocalState::has_region() const {
  return _internal_has_region();
}
inline const ::metapb::Region& RegionLocalState::_internal_region() const {
  const ::metapb::Region* p = region_;
  return p != nullptr ? *p : reinterpret_cast<const ::metapb::Region&>(
      ::metapb::_Region_default_instance_);
}
inline const ::metapb::Region& RegionLocalState::region() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RegionLocalState.region)
  return _internal_region();
}
inline void RegionLocalState::unsafe_arena_set_allocated_region(
    ::metapb::Region* region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.RegionLocalState.region)
}
inline ::metapb::Region* RegionLocalState::release_region() {
  
  ::metapb::Region* temp = region_;
  region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::metapb::Region* RegionLocalState::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RegionLocalState.region)
  
  ::metapb::Region* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::metapb::Region* RegionLocalState::_internal_mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArena());
    region_ = p;
  }
  return region_;
}
inline ::metapb::Region* RegionLocalState::mutable_region() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RegionLocalState.region)
  return _internal_mutable_region();
}
inline void RegionLocalState::set_allocated_region(::metapb::Region* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region)->GetArena();
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RegionLocalState.region)
}

// -------------------------------------------------------------------

// StoreIdent

// uint64 cluster_id = 1;
inline void StoreIdent::clear_cluster_id() {
  cluster_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreIdent::_internal_cluster_id() const {
  return cluster_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.StoreIdent.cluster_id)
  return _internal_cluster_id();
}
inline void StoreIdent::_internal_set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cluster_id_ = value;
}
inline void StoreIdent::set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cluster_id(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.StoreIdent.cluster_id)
}

// uint64 store_id = 2;
inline void StoreIdent::clear_store_id() {
  store_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreIdent::_internal_store_id() const {
  return store_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.StoreIdent.store_id)
  return _internal_store_id();
}
inline void StoreIdent::_internal_set_store_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  store_id_ = value;
}
inline void StoreIdent::set_store_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_store_id(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.StoreIdent.store_id)
}

// string addr = 3;
inline void StoreIdent::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& StoreIdent::addr() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.StoreIdent.addr)
  return _internal_addr();
}
inline void StoreIdent::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.StoreIdent.addr)
}
inline std::string* StoreIdent::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.StoreIdent.addr)
  return _internal_mutable_addr();
}
inline const std::string& StoreIdent::_internal_addr() const {
  return addr_.Get();
}
inline void StoreIdent::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StoreIdent::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft_serverpb.StoreIdent.addr)
}
inline void StoreIdent::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raft_serverpb.StoreIdent.addr)
}
inline void StoreIdent::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.StoreIdent.addr)
}
inline std::string* StoreIdent::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StoreIdent::release_addr() {
  // @@protoc_insertion_point(field_release:raft_serverpb.StoreIdent.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StoreIdent::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.StoreIdent.addr)
}

// -------------------------------------------------------------------

// KeyValue

// bytes key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft_serverpb.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raft_serverpb.KeyValue.key)
}
inline void KeyValue::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:raft_serverpb.KeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.KeyValue.key)
}

// bytes value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft_serverpb.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raft_serverpb.KeyValue.value)
}
inline void KeyValue::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:raft_serverpb.KeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.KeyValue.value)
}

// -------------------------------------------------------------------

// RaftSnapshotData

// .metapb.Region region = 1;
inline bool RaftSnapshotData::_internal_has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline bool RaftSnapshotData::has_region() const {
  return _internal_has_region();
}
inline const ::metapb::Region& RaftSnapshotData::_internal_region() const {
  const ::metapb::Region* p = region_;
  return p != nullptr ? *p : reinterpret_cast<const ::metapb::Region&>(
      ::metapb::_Region_default_instance_);
}
inline const ::metapb::Region& RaftSnapshotData::region() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.region)
  return _internal_region();
}
inline void RaftSnapshotData::unsafe_arena_set_allocated_region(
    ::metapb::Region* region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.RaftSnapshotData.region)
}
inline ::metapb::Region* RaftSnapshotData::release_region() {
  
  ::metapb::Region* temp = region_;
  region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::metapb::Region* RaftSnapshotData::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftSnapshotData.region)
  
  ::metapb::Region* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::metapb::Region* RaftSnapshotData::_internal_mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArena());
    region_ = p;
  }
  return region_;
}
inline ::metapb::Region* RaftSnapshotData::mutable_region() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftSnapshotData.region)
  return _internal_mutable_region();
}
inline void RaftSnapshotData::set_allocated_region(::metapb::Region* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region)->GetArena();
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftSnapshotData.region)
}

// uint64 file_size = 2;
inline void RaftSnapshotData::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftSnapshotData::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RaftSnapshotData::file_size() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.file_size)
  return _internal_file_size();
}
inline void RaftSnapshotData::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
}
inline void RaftSnapshotData::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftSnapshotData.file_size)
}

// repeated .raft_serverpb.KeyValue data = 3;
inline int RaftSnapshotData::_internal_data_size() const {
  return data_.size();
}
inline int RaftSnapshotData::data_size() const {
  return _internal_data_size();
}
inline void RaftSnapshotData::clear_data() {
  data_.Clear();
}
inline ::raft_serverpb::KeyValue* RaftSnapshotData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftSnapshotData.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::KeyValue >*
RaftSnapshotData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:raft_serverpb.RaftSnapshotData.data)
  return &data_;
}
inline const ::raft_serverpb::KeyValue& RaftSnapshotData::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::raft_serverpb::KeyValue& RaftSnapshotData::data(int index) const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.data)
  return _internal_data(index);
}
inline ::raft_serverpb::KeyValue* RaftSnapshotData::_internal_add_data() {
  return data_.Add();
}
inline ::raft_serverpb::KeyValue* RaftSnapshotData::add_data() {
  // @@protoc_insertion_point(field_add:raft_serverpb.RaftSnapshotData.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::KeyValue >&
RaftSnapshotData::data() const {
  // @@protoc_insertion_point(field_list:raft_serverpb.RaftSnapshotData.data)
  return data_;
}

// .raft_serverpb.SnapshotMeta meta = 5;
inline bool RaftSnapshotData::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool RaftSnapshotData::has_meta() const {
  return _internal_has_meta();
}
inline void RaftSnapshotData::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::raft_serverpb::SnapshotMeta& RaftSnapshotData::_internal_meta() const {
  const ::raft_serverpb::SnapshotMeta* p = meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::raft_serverpb::SnapshotMeta&>(
      ::raft_serverpb::_SnapshotMeta_default_instance_);
}
inline const ::raft_serverpb::SnapshotMeta& RaftSnapshotData::meta() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.meta)
  return _internal_meta();
}
inline void RaftSnapshotData::unsafe_arena_set_allocated_meta(
    ::raft_serverpb::SnapshotMeta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.RaftSnapshotData.meta)
}
inline ::raft_serverpb::SnapshotMeta* RaftSnapshotData::release_meta() {
  
  ::raft_serverpb::SnapshotMeta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::raft_serverpb::SnapshotMeta* RaftSnapshotData::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftSnapshotData.meta)
  
  ::raft_serverpb::SnapshotMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::raft_serverpb::SnapshotMeta* RaftSnapshotData::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_serverpb::SnapshotMeta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::raft_serverpb::SnapshotMeta* RaftSnapshotData::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftSnapshotData.meta)
  return _internal_mutable_meta();
}
inline void RaftSnapshotData::set_allocated_meta(::raft_serverpb::SnapshotMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftSnapshotData.meta)
}

// -------------------------------------------------------------------

// SnapshotCFFile

// string cf = 1;
inline void SnapshotCFFile::clear_cf() {
  cf_.ClearToEmpty();
}
inline const std::string& SnapshotCFFile::cf() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotCFFile.cf)
  return _internal_cf();
}
inline void SnapshotCFFile::set_cf(const std::string& value) {
  _internal_set_cf(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotCFFile.cf)
}
inline std::string* SnapshotCFFile::mutable_cf() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotCFFile.cf)
  return _internal_mutable_cf();
}
inline const std::string& SnapshotCFFile::_internal_cf() const {
  return cf_.Get();
}
inline void SnapshotCFFile::_internal_set_cf(const std::string& value) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SnapshotCFFile::set_cf(std::string&& value) {
  
  cf_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft_serverpb.SnapshotCFFile.cf)
}
inline void SnapshotCFFile::set_cf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raft_serverpb.SnapshotCFFile.cf)
}
inline void SnapshotCFFile::set_cf(const char* value,
    size_t size) {
  
  cf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.SnapshotCFFile.cf)
}
inline std::string* SnapshotCFFile::_internal_mutable_cf() {
  
  return cf_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SnapshotCFFile::release_cf() {
  // @@protoc_insertion_point(field_release:raft_serverpb.SnapshotCFFile.cf)
  return cf_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SnapshotCFFile::set_allocated_cf(std::string* cf) {
  if (cf != nullptr) {
    
  } else {
    
  }
  cf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.SnapshotCFFile.cf)
}

// uint64 size = 2;
inline void SnapshotCFFile::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotCFFile::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotCFFile::size() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotCFFile.size)
  return _internal_size();
}
inline void SnapshotCFFile::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void SnapshotCFFile::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotCFFile.size)
}

// uint32 checksum = 3;
inline void SnapshotCFFile::clear_checksum() {
  checksum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SnapshotCFFile::_internal_checksum() const {
  return checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SnapshotCFFile::checksum() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotCFFile.checksum)
  return _internal_checksum();
}
inline void SnapshotCFFile::_internal_set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  checksum_ = value;
}
inline void SnapshotCFFile::set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotCFFile.checksum)
}

// -------------------------------------------------------------------

// SnapshotMeta

// repeated .raft_serverpb.SnapshotCFFile cf_files = 1;
inline int SnapshotMeta::_internal_cf_files_size() const {
  return cf_files_.size();
}
inline int SnapshotMeta::cf_files_size() const {
  return _internal_cf_files_size();
}
inline void SnapshotMeta::clear_cf_files() {
  cf_files_.Clear();
}
inline ::raft_serverpb::SnapshotCFFile* SnapshotMeta::mutable_cf_files(int index) {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >*
SnapshotMeta::mutable_cf_files() {
  // @@protoc_insertion_point(field_mutable_list:raft_serverpb.SnapshotMeta.cf_files)
  return &cf_files_;
}
inline const ::raft_serverpb::SnapshotCFFile& SnapshotMeta::_internal_cf_files(int index) const {
  return cf_files_.Get(index);
}
inline const ::raft_serverpb::SnapshotCFFile& SnapshotMeta::cf_files(int index) const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotMeta.cf_files)
  return _internal_cf_files(index);
}
inline ::raft_serverpb::SnapshotCFFile* SnapshotMeta::_internal_add_cf_files() {
  return cf_files_.Add();
}
inline ::raft_serverpb::SnapshotCFFile* SnapshotMeta::add_cf_files() {
  // @@protoc_insertion_point(field_add:raft_serverpb.SnapshotMeta.cf_files)
  return _internal_add_cf_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >&
SnapshotMeta::cf_files() const {
  // @@protoc_insertion_point(field_list:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_;
}

// -------------------------------------------------------------------

// SnapshotChunk

// .raft_serverpb.RaftMessage message = 1;
inline bool SnapshotChunk::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool SnapshotChunk::has_message() const {
  return _internal_has_message();
}
inline void SnapshotChunk::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::raft_serverpb::RaftMessage& SnapshotChunk::_internal_message() const {
  const ::raft_serverpb::RaftMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::raft_serverpb::RaftMessage&>(
      ::raft_serverpb::_RaftMessage_default_instance_);
}
inline const ::raft_serverpb::RaftMessage& SnapshotChunk::message() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotChunk.message)
  return _internal_message();
}
inline void SnapshotChunk::unsafe_arena_set_allocated_message(
    ::raft_serverpb::RaftMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft_serverpb.SnapshotChunk.message)
}
inline ::raft_serverpb::RaftMessage* SnapshotChunk::release_message() {
  
  ::raft_serverpb::RaftMessage* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::raft_serverpb::RaftMessage* SnapshotChunk::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:raft_serverpb.SnapshotChunk.message)
  
  ::raft_serverpb::RaftMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::raft_serverpb::RaftMessage* SnapshotChunk::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_serverpb::RaftMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::raft_serverpb::RaftMessage* SnapshotChunk::mutable_message() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotChunk.message)
  return _internal_mutable_message();
}
inline void SnapshotChunk::set_allocated_message(::raft_serverpb::RaftMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.SnapshotChunk.message)
}

// bytes data = 2;
inline void SnapshotChunk::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SnapshotChunk::data() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotChunk.data)
  return _internal_data();
}
inline void SnapshotChunk::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotChunk.data)
}
inline std::string* SnapshotChunk::mutable_data() {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotChunk.data)
  return _internal_mutable_data();
}
inline const std::string& SnapshotChunk::_internal_data() const {
  return data_.Get();
}
inline void SnapshotChunk::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SnapshotChunk::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft_serverpb.SnapshotChunk.data)
}
inline void SnapshotChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:raft_serverpb.SnapshotChunk.data)
}
inline void SnapshotChunk::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.SnapshotChunk.data)
}
inline std::string* SnapshotChunk::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SnapshotChunk::release_data() {
  // @@protoc_insertion_point(field_release:raft_serverpb.SnapshotChunk.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SnapshotChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.SnapshotChunk.data)
}

// -------------------------------------------------------------------

// Done

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_serverpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raft_serverpb::RaftMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_serverpb::RaftMessageType>() {
  return ::raft_serverpb::RaftMessageType_descriptor();
}
template <> struct is_proto_enum< ::raft_serverpb::PeerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_serverpb::PeerState>() {
  return ::raft_serverpb::PeerState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_5fserverpb_2eproto
